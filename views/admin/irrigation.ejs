<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width initial-scale=1.0">
    <title>NetHouseAutomation Dashboard</title>
    <!-- GLOBAL MAINLY STYLES-->
    <link href="./assets/vendors/bootstrap/dist/css/bootstrap.min.css" rel="stylesheet" />
    <link href="./assets/vendors/font-awesome/css/font-awesome.min.css" rel="stylesheet" />
    <link href="./assets/vendors/themify-icons/css/themify-icons.css" rel="stylesheet" />
    <!-- PLUGINS STYLES-->
    <link href="./assets/vendors/jvectormap/jquery-jvectormap-2.0.3.css" rel="stylesheet" />
    <!-- THEME STYLES-->
    <link href="assets/css/main.min.css" rel="stylesheet" />
    <!-- PAGE LEVEL STYLES-->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <link href="./assets/vendors/fullcalendar/dist/fullcalendar.min.css" rel="stylesheet" />
    <link href="./assets/vendors/fullcalendar/dist/fullcalendar.print.min.css" rel="stylesheet" media="print" />
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11.0.19/dist/sweetalert2.min.css">

</head>

<body class="fixed-navbar">
    <div class="page-wrapper">
        <!-- START HEADER-->
        <header class="header">
            <div class="page-brand">
                <a class="link" href="/admin-dashboard">
                    <span class="brand">Demo
                        <span class="brand-tip">FARM</span>
                    </span>
                    <span class="brand-mini">DF</span>
                </a>
            </div>
            <div class="flexbox flex-1">
                <!-- START TOP-LEFT TOOLBAR-->
                <ul class="nav navbar-toolbar">
                    <li>
                        <a class="nav-link sidebar-toggler js-sidebar-toggler"><i class="ti-menu"></i></a>
                    </li>
                    <!--<li>
                        <form class="navbar-search" action="javascript:;">
                            <div class="rel">
                                <span class="search-icon"><i class="ti-search"></i></span>
                                <input class="form-control" placeholder="Search here...">
                            </div>
                        </form>
                    </li>-->
                </ul>
                <!-- END TOP-LEFT TOOLBAR-->
                <!-- START TOP-RIGHT TOOLBAR-->
                <ul class="nav navbar-toolbar">
                    
                    <li class="dropdown dropdown-user">
                        <a class="nav-link dropdown-toggle link" data-toggle="dropdown">
                            <img src="./assets/img/admin-avatar.png" />
                            <span></span>Admin<i class="fa fa-angle-down m-l-5"></i></a>
                        <ul class="dropdown-menu dropdown-menu-right">
                            <a class="dropdown-item" href="/admin-profile"><i class="fa fa-user"></i>Profile</a>
                            <li class="dropdown-divider"></li>
                            <a class="dropdown-item" href="/logout"><i class="fa fa-power-off"></i>Logout</a>
                        </ul>
                    </li>
                </ul>
                <!-- END TOP-RIGHT TOOLBAR-->
            </div>
        </header>
        <!-- END HEADER-->
        <!-- START SIDEBAR-->
        <nav class="page-sidebar" id="sidebar">
            <div id="sidebar-collapse">
                <div class="admin-block d-flex">
                    <div>
                        <img src="./assets/img/admin-avatar.png" width="45px" />
                    </div>
                    <div class="admin-info">
                        <div class="font-strong">Dan Lloyd</div><small>User</small></div>
                </div>
                <ul class="side-menu metismenu">
                    <li>
                        <a class="active" href="/admin-dashboard"><i class="sidebar-item-icon fas fa-tachometer-alt"></i>
                            <span class="nav-label">Dashboard</span>
                        </a>
                    </li>
                    
                    <li>
                        <a class="active" href="/admin-plant-overview"><i class="sidebar-item-icon fas fa-leaf"></i>
                            <span class="nav-label">Plant Overview</span>
                        </a>
                    </li>
                    <li>
                        <a class="active" href="/admin-irrigation-controll-controll"><i class="sidebar-item-icon fas fa-faucet"></i>
                            <span class="nav-label">Irrigation Controll</span>
                        </a>
                    </li>
                    <li>
                        <a class="active" href="/admin-reports&analytics"><i class="sidebar-item-icon fas fa-chart-bar"></i>
                            <span class="nav-label">Reports & Analytics</span>
                        </a>
                    </li>
                    <li>
                        <a class="active" href="/admin-user-management"><i class="sidebar-item-icon fas fa-users-cog"></i>
                            <span class="nav-label">User Management</span>
                        </a>
                    </li>
                    
                </ul>
            </div>
        </nav>
        <div class="content-wrapper">
            <div class="page-content fade-in-up">
                <div class="row">
                    <!-- Left Column -->
                    <div class="col-lg-8">
                        

                        <!-- Soil Status -->
                        <div class="ibox">
                            <div class="ibox-head">
                                <div class="ibox-title">Soil Status</div>
                            </div>
                            <div class="ibox-body">
                                <div class="row">
                                    <!-- Moisture Gauge -->
                                    <div class="col-md-6">
                                        <div class="sensor-gauge moisture">
                                            <div class="gauge-header">
                                                <div class="gauge-icon">
                                                    <i class="fas fa-tint"></i>
                                                </div>
                                                <div class="gauge-title">Soil Moisture</div>
                                            </div>
                                            <div class="gauge-content">
                                                <div class="gauge-value" id="moistureValue">--%</div>
                                                <div class="gauge-status">
                                                    <span class="badge" id="moistureStatus">Loading...</span>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    <!-- Temperature Gauge -->
                                    <div class="col-md-6">
                                        <div class="sensor-gauge temperature">
                                            <div class="gauge-header">
                                                <div class="gauge-icon">
                                                    <i class="fas fa-thermometer-half"></i>
                                                </div>
                                                <div class="gauge-title">Soil Temperature</div>
                                            </div>
                                            <div class="gauge-content">
                                                <div class="gauge-value" id="temperatureValue">--Â°C</div>
                                                <div class="gauge-status">
                                                    <span class="badge" id="temperatureStatus">Loading...</span>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div class="row mt-4">
                                    <div class="col-12">
                                        <div class="sensor-stats">
                                            <!-- Removed trend stat item -->
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Current Crop Information -->
                        <div class="ibox">
                            <div class="ibox-head">
                                <div class="ibox-title">Current Crop Information</div>
                            </div>
                            <div class="ibox-body" id="currentCropSection">
                                <div id="noCropMessage" style="display: none;">
                                    <div class="text-center py-4">
                                        <i class="fas fa-seedling fa-3x text-muted mb-3"></i>
                                        <h4>No Active Crop</h4>
                                        <p class="text-muted">There is currently no active crop in the system.</p>
                                        <a href="/admin-plant-overview" class="btn btn-primary mt-3">
                                            <i class="fas fa-plus"></i> Plant New Crop
                                        </a>
                                    </div>
                                </div>
                                <div id="cropInfo" style="display: none;">
                                    <div class="row">
                                        <div class="col-12">
                                            <div class="crop-details">
                                                <div class="d-flex justify-content-between align-items-center mb-4">
                                                    <h3 class="crop-name" id="cropName"></h3>
                                                    <a href="/admin-plant-overview" class="btn btn-primary">
                                                        <i class="fas fa-leaf"></i> Plant Overview
                                                    </a>
                                                </div>
                                                <div class="crop-info">
                                                    <div class="info-item">
                                                        <i class="fas fa-calendar"></i>
                                                        <span>Planted: <span id="plantedDate"></span></span>
                                                    </div>
                                                    <div class="info-item">
                                                        <i class="fas fa-clock"></i>
                                                        <span>Expected Harvest: <span id="harvestDate"></span></span>
                                                    </div>
                                                    <div class="info-item">
                                                        <i class="fas fa-leaf"></i>
                                                        <span>Growth Stage: <span id="growthStage"></span></span>
                                                    </div>
                                                    <div class="info-item">
                                                        <i class="fas fa-chart-line"></i>
                                                        <span>Health Score: <span id="healthScore"></span></span>
                                                    </div>
                                                </div>
                                                <div class="mt-4">
                                                    <h5>Optimal Conditions</h5>
                                                    <div class="row">
                                                        <div class="col-md-6">
                                                            <div class="info-item">
                                                                <i class="fas fa-tint"></i>
                                                                <span>Moisture: <span id="optimalMoisture"></span></span>
                                                            </div>
                                                            <div class="info-item">
                                                                <i class="fas fa-thermometer-half"></i>
                                                                <span>Temperature: <span id="optimalTemperature"></span></span>
                                                            </div>
                                                        </div>
                                                        <div class="col-md-6">
                                                            <div class="info-item">
                                                                <i class="fas fa-tint"></i>
                                                                <span>Humidity: <span id="optimalHumidity"></span></span>
                                                            </div>
                                                            <div class="info-item">
                                                                <i class="fas fa-sun"></i>
                                                                <span>Light: <span id="optimalLight"></span></span>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Irrigation History -->
                        <div class="ibox">
                            <div class="ibox-head">
                                <div class="ibox-title">Irrigation History</div>
                            </div>
                            <div class="ibox-body">
                                <div class="table-responsive">
                                    <table class="table table-hover">
                                        <thead>
                                            <tr>
                                                <th>Date & Time</th>
                                                <th>Duration</th>
                                                <th>Moisture Before</th>
                                                <th>Moisture After</th>
                                                <th>Status</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            <tr>
                                                <td>Today, 6:00 AM</td>
                                                <td>15 min</td>
                                                <td>62%</td>
                                                <td>68%</td>
                                                <td><span class="badge badge-success">Completed</span></td>
                                            </tr>
                                            <tr>
                                                <td>Yesterday, 8:00 PM</td>
                                                <td>10 min</td>
                                                <td>60%</td>
                                                <td>65%</td>
                                                <td><span class="badge badge-success">Completed</span></td>
                                            </tr>
                                        </tbody>
                                    </table>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Right Column -->
                    <div class="col-lg-4">
                        <!-- Next Irrigation -->
                        <div class="ibox">
                            <div class="ibox-head">
                                <div class="ibox-title">Next Irrigation</div>
                            </div>
                            <div class="ibox-body">
                                <div class="text-center" id="nextIrrigationInfo">
                                    <div class="time-value" id="nextIrrigationTime">--:--</div>
                                    <div class="time-label" id="nextIrrigationDate">Loading...</div>
                                    <div class="progress mt-3">
                                        <div class="progress-bar bg-primary" role="progressbar" id="nextIrrigationProgress" style="width: 0%"></div>
                                    </div>
                                    <div class="mt-2">
                                        <small class="text-muted" id="nextIrrigationStatus">Calculating next irrigation...</small>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <!-- Quick Controls -->
                        <div class="ibox">
                            <div class="ibox-head">
                                <div class="ibox-title">Quick Controls</div>
                            </div>
                            <div class="ibox-body">
                                <div class="form-group">
                                    <label>Automation Mode</label>
                                    <div class="mode-switch mb-4">
                                        <div class="switch">
                                            <input type="checkbox" id="autoModeSwitch" checked>
                                            <label for="autoModeSwitch"></label>
                                        </div>
                                        <span class="mode-label">Automatic</span>
                                    </div>
                                </div>

                                <div class="form-group">
                                    <label>Manual Duration (minutes)</label>
                                    <div class="input-group">
                                        <input type="number" class="form-control" id="durationInput" min="1" max="60" value="15">
                                        <div class="input-group-append">
                                            <span class="input-group-text">min</span>
                                        </div>
                                    </div>
                                </div>

                                <div class="mt-4">
                                    <button class="btn btn-primary btn-block" id="startButton" onclick="startManualIrrigation()">
                                        <i class="fa fa-play"></i> Start Irrigation
                                    </button>
                                    <button class="btn btn-danger btn-block mt-2" id="stopButton" onclick="stopIrrigation()">
                                        <i class="fa fa-stop"></i> Stop Irrigation
                                    </button>
                                </div>

                                <!-- Add Alert Container -->
                                <div id="irrigationAlert" class="alert alert-info mt-3" style="display: none;">
                                    <i class="fa fa-info-circle"></i> <span id="alertMessage"></span>
                                </div>
                            </div>
                        </div>

                        <!-- Irrigation Schedule -->
                        <div class="ibox">
                            <div class="ibox-head">
                                <div class="ibox-title">Irrigation Schedule</div>
                                <div class="ibox-tools">
                                    <button class="btn btn-primary btn-sm" data-toggle="modal" data-target="#scheduleModal">
                                        <i class="fa fa-plus"></i> Add Schedule
                                    </button>
                                </div>
                            </div>
                            <div class="ibox-body">
                                <div class="table-responsive">
                                    <table class="table table-hover" id="scheduleTable">
                                        <thead>
                                            <tr>
                                                <th>Time</th>
                                                <th>Duration</th>
                                                <th>Days</th>
                                                <th>Status</th>
                                                <th>Actions</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            <!-- Schedule rows will be dynamically added here -->
                                        </tbody>
                                    </table>
                                </div>
                            </div>
                        </div>
                        
                    </div>
                </div>
            </div>

            <style>
                .moisture-gauge {
                    text-align: center;
                    padding: 20px;
                    background: #f8f9fa;
                    border-radius: 8px;
                }

                .gauge-value {
                    font-size: 48px;
                    font-weight: 700;
                    color: #2196F3;
                }

                .gauge-label {
                    font-size: 16px;
                    color: #666;
                    margin-top: 5px;
                }

                .gauge-range {
                    font-size: 14px;
                    color: #999;
                    margin-top: 5px;
                }

                .moisture-stats {
                    padding: 20px;
                }

                .stat-item {
                    display: flex;
                    align-items: center;
                    margin-bottom: 15px;
                }

                .stat-item i {
                    font-size: 24px;
                    color: #2196F3;
                    margin-right: 15px;
                }

                .stat-info {
                    flex: 1;
                }

                .stat-label {
                    font-size: 14px;
                    color: #666;
                }

                .stat-value {
                    font-size: 16px;
                    font-weight: 600;
                    color: #2c3e50;
                }

                .mode-switch {
                    display: flex;
                    align-items: center;
                    gap: 10px;
                }

                .mode-label {
                    font-size: 16px;
                    font-weight: 500;
                }

                .time-value {
                    font-size: 32px;
                    font-weight: 600;
                    color: #2196F3;
                }

                .time-label {
                    font-size: 14px;
                    color: #666;
                }

                .switch {
                    position: relative;
                    display: inline-block;
                    width: 60px;
                    height: 34px;
                }

                .switch input {
                    opacity: 0;
                    width: 0;
                    height: 0;
                }

                .switch label {
                    position: absolute;
                    cursor: pointer;
                    top: 0;
                    left: 0;
                    right: 0;
                    bottom: 0;
                    background-color: #ccc;
                    transition: .4s;
                    border-radius: 34px;
                }

                .switch label:before {
                    position: absolute;
                    content: "";
                    height: 26px;
                    width: 26px;
                    left: 4px;
                    bottom: 4px;
                    background-color: white;
                    transition: .4s;
                    border-radius: 50%;
                }

                .switch input:checked + label {
                    background-color: #2196F3;
                }

                .switch input:checked + label:before {
                    transform: translateX(26px);
                }

                /* New styles for crop information */
                .crop-image {
                    max-height: 200px;
                    object-fit: cover;
                    border-radius: 8px;
                    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
                }

                .crop-details {
                    padding: 15px;
                }

                .crop-name {
                    font-size: 24px;
                    font-weight: 600;
                    color: #2c3e50;
                    margin-bottom: 20px;
                }

                .crop-info {
                    display: flex;
                    flex-direction: column;
                    gap: 15px;
                }

                .info-item {
                    display: flex;
                    align-items: center;
                    gap: 10px;
                }

                .info-item i {
                    font-size: 18px;
                    color: #2196F3;
                    width: 24px;
                }

                /* Enhanced sensor gauge styles */
                .sensor-gauge {
                    background: #fff;
                    border-radius: 8px;
                    padding: 20px;
                    height: 100%;
                    box-shadow: 0 1px 3px rgba(0,0,0,0.1);
                }

                .gauge-header {
                    display: flex;
                    align-items: center;
                    margin-bottom: 15px;
                }

                .gauge-icon {
                    width: 40px;
                    height: 40px;
                    border-radius: 50%;
                    background: #f8f9fa;
                    display: flex;
                    align-items: center;
                    justify-content: center;
                    margin-right: 15px;
                }

                .gauge-icon i {
                    font-size: 20px;
                    color: #2196F3;
                }

                .gauge-title {
                    font-size: 18px;
                    font-weight: 600;
                    color: #2c3e50;
                }

                .gauge-content {
                    text-align: center;
                }

                .gauge-value {
                    font-size: 48px;
                    font-weight: 700;
                    color: #2196F3;
                    margin: 10px 0;
                }

                .gauge-status {
                    margin-top: 10px;
                }

                .gauge-status .badge {
                    padding: 8px 15px;
                    font-size: 14px;
                    font-weight: 500;
                }

                .badge-success {
                    background-color: #28a745;
                }

                .badge-warning {
                    background-color: #ffc107;
                    color: #000;
                }

                .badge-danger {
                    background-color: #dc3545;
                }

                /* Add styles for disabled buttons */
                .btn.disabled {
                    opacity: 0.6;
                    cursor: not-allowed;
                    pointer-events: none;
                }

                /* Style for the alert */
                #irrigationAlert {
                    transition: all 0.3s ease;
                    margin-top: 15px;
                }

                #irrigationAlert i {
                    margin-right: 8px;
                }

                .alert-warning {
                    background-color: #fff3cd;
                    border-color: #ffeeba;
                    color: #856404;
                }

                .alert-info {
                    background-color: #d1ecf1;
                    border-color: #bee5eb;
                    color: #0c5460;
                }

                /* Add tooltip styles */
                [title] {
                    position: relative;
                    cursor: help;
                }

                .checkbox-wrapper {
                    display: flex;
                    align-items: center;
                    cursor: pointer;
                }

                .checkbox-wrapper input[type="checkbox"] {
                    margin-right: 5px;
                    cursor: pointer;
                }

                .checkbox-wrapper label {
                    margin-bottom: 0;
                    cursor: pointer;
                }

                .form-check-input {
                    width: 18px;
                    height: 18px;
                    margin-top: 0;
                }

                .form-check-label {
                    padding-left: 5px;
                }
            </style>

            <script>
                function toggleIrrigation(id, status) {
                    console.log(`Setting irrigation ${id} to ${status ? 'on' : 'off'}`);
                }

                // Modify startManualIrrigation function
                async function startManualIrrigation() {
                    try {
                    const duration = document.getElementById('durationInput').value;
                        
                        // Get current moisture value
                        const response = await fetch('/api/soil-status');
                        const data = await response.json();
                        const currentMoisture = data.moisture.value;

                        // Create irrigation record in Firestore
                        const irrigationResponse = await fetch('/api/irrigation-records', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                            },
                            body: JSON.stringify({
                                startTime: new Date(),
                                moistureBefore: currentMoisture,
                                duration: parseInt(duration),
                                note: 'Manual Irrigation'
                            })
                        });

                        if (!irrigationResponse.ok) {
                            throw new Error('Failed to create irrigation record');
                        }

                        // Update manual trigger in Realtime DB
                        const manualResponse = await fetch('/api/manual-trigger', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                            },
                            body: JSON.stringify({
                                enabled: true,
                                duration: parseInt(duration)
                            })
                        });

                        if (!manualResponse.ok) {
                            throw new Error('Failed to update manual trigger');
                        }

                        // Check status after update
                        await checkIrrigationStatus();
                        console.log('Manual irrigation started');
                    } catch (error) {
                        console.error('Error starting manual irrigation:', error);
                    }
                }

                async function stopIrrigation() {
                    try {
                        // Update stop trigger in Realtime DB
                        const stopResponse = await fetch('/api/stop-trigger', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                            },
                            body: JSON.stringify({
                                enabled: true
                            })
                        });

                        if (!stopResponse.ok) {
                            throw new Error('Failed to update stop trigger');
                        }

                        // Check status after update
                        await checkIrrigationStatus();
                        console.log('Irrigation stop triggered');
                    } catch (error) {
                        console.error('Error stopping irrigation:', error);
                        alert('Failed to stop irrigation. Please try again.');
                    }
                }

                // Update next irrigation countdown
                function updateCountdown() {
                    // Implementation for countdown timer
                }

                // Function to format date
                function formatDate(date) {
                    return new Date(date).toLocaleDateString('en-US', {
                        year: 'numeric',
                        month: 'long',
                        day: 'numeric'
                    });
                }

                // Function to update crop information
                function updateCropInfo(cropData) {
                    const noCropMessage = document.getElementById('noCropMessage');
                    const cropInfo = document.getElementById('cropInfo');

                    if (!cropData) {
                        noCropMessage.style.display = 'block';
                        cropInfo.style.display = 'none';
                        return;
                    }

                    noCropMessage.style.display = 'none';
                    cropInfo.style.display = 'block';

                    // Update crop details
                    document.getElementById('cropName').textContent = cropData.name;
                    document.getElementById('plantedDate').textContent = formatDate(cropData.startDate);
                    document.getElementById('harvestDate').textContent = formatDate(cropData.expectedHarvest);
                    document.getElementById('growthStage').textContent = cropData.growthStage;
                    document.getElementById('healthScore').textContent = `${cropData.score}%`;

                    // Update optimal conditions
                    const optimal = cropData.optimalConditions;
                    document.getElementById('optimalMoisture').textContent = `${optimal.moisture}%`;
                    document.getElementById('optimalTemperature').textContent = `${optimal.temperature}Â°C`;
                    document.getElementById('optimalHumidity').textContent = `${optimal.humidity}%`;
                    document.getElementById('optimalLight').textContent = `${optimal.light} lux`;
                }

                // Update the updateSoilStatus function to include crop information
                function updateSoilStatus() {
                    fetch('/api/soil-status')
                        .then(response => response.json())
                        .then(data => {
                            // Update moisture
                            document.getElementById('moistureValue').textContent = `${data.moisture.value}%`;
                            const moistureStatus = document.getElementById('moistureStatus');
                            moistureStatus.textContent = data.moisture.status;
                            moistureStatus.className = `badge badge-${data.moisture.color}`;

                            // Update temperature
                            document.getElementById('temperatureValue').textContent = `${data.temperature.value}Â°C`;
                            const temperatureStatus = document.getElementById('temperatureStatus');
                            temperatureStatus.textContent = data.temperature.status;
                            temperatureStatus.className = `badge badge-${data.temperature.color}`;

                            // Update crop information
                            updateCropInfo(data.currentCrop);
                        })
                        .catch(error => {
                            console.error('Error fetching soil status:', error);
                        });
                }

                // Initialize the page
                document.addEventListener('DOMContentLoaded', function() {
                    updateSoilStatus();
                    // Update every 30 seconds
                    setInterval(updateSoilStatus, 30000);
                });

                // Add these new functions for automation control
                function toggleAutomationMode(isEnabled) {
                    fetch('/api/toggle-automation', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({ enabled: isEnabled })
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            console.log('Automation mode updated successfully');
                        } else {
                            console.error('Failed to update automation mode');
                        }
                    })
                    .catch(error => {
                        console.error('Error updating automation mode:', error);
                    });
                }

                // Add event listener for automation switch
                document.getElementById('autoModeSwitch').addEventListener('change', function(e) {
                    toggleAutomationMode(e.target.checked);
                });

                // Initialize automation state
                function initializeAutomationState() {
                    fetch('/api/automation-state')
                        .then(response => response.json())
                        .then(data => {
                            document.getElementById('autoModeSwitch').checked = data.enabled;
                        })
                        .catch(error => {
                            console.error('Error fetching automation state:', error);
                        });
                }

                // Add to the DOMContentLoaded event listener
                document.addEventListener('DOMContentLoaded', function() {
                    loadInitialSoilStatus();
                    initializeAutomationState();
                });

                // Modify checkIrrigationStatus function
                async function checkIrrigationStatus() {
                    try {
                        // Get both manual and automation status
                        const [manualSnapshot, automationSnapshot] = await Promise.all([
                            realtimeDB.ref('/manual').once('value'),
                            realtimeDB.ref('/automation').once('value')
                        ]);

                        const manualData = manualSnapshot.val();
                        const automationData = automationSnapshot.val();

                        const isManualEnabled = manualData?.enabled || false;
                        const isAutomationEnabled = automationData?.enabled || false;

                        // Update button states
                        const startButton = document.getElementById('startButton');
                        const stopButton = document.getElementById('stopButton');
                        const alertDiv = document.getElementById('irrigationAlert');
                        const alertMessage = document.getElementById('alertMessage');

                        // Disable start button if automation is running
                        if (isAutomationEnabled) {
                            startButton.disabled = true;
                            startButton.classList.add('disabled');
                            alertDiv.style.display = 'block';
                            alertDiv.className = 'alert alert-warning mt-3';
                            alertMessage.textContent = 'Automated irrigation is currently running';
                        } else if (isManualEnabled) {
                            startButton.disabled = true;
                            startButton.classList.add('disabled');
                            alertDiv.style.display = 'block';
                            alertDiv.className = 'alert alert-info mt-3';
                            alertMessage.textContent = `Manual irrigation will run for ${manualData.duration} minutes`;
                        } else {
                            startButton.disabled = false;
                            startButton.classList.remove('disabled');
                            alertDiv.style.display = 'none';
                        }

                        // Enable stop button only if either manual or automation is enabled
                        stopButton.disabled = !(isManualEnabled || isAutomationEnabled);
                        stopButton.classList.toggle('disabled', !(isManualEnabled || isAutomationEnabled));
                    } catch (error) {
                        console.error('Error checking irrigation status:', error);
                    }
                }

                // Initial load of soil status
                function loadInitialSoilStatus() {
                    fetch('/api/soil-status')
                        .then(response => response.json())
                        .then(data => {
                            updateSensorValues(data);
                            updateCropInfo(data.currentCrop);
                        })
                        .catch(error => {
                            console.error('Error fetching soil status:', error);
                        });
                }

                // Initialize the page
                document.addEventListener('DOMContentLoaded', function() {
                    loadInitialSoilStatus();
                });

                // Function to format time remaining
                function formatTimeRemaining(milliseconds) {
                    const seconds = Math.floor(milliseconds / 1000);
                    const minutes = Math.floor(seconds / 60);
                    const hours = Math.floor(minutes / 60);
                    
                    if (hours > 0) {
                        return `${hours}h ${minutes % 60}m remaining`;
                    } else if (minutes > 0) {
                        return `${minutes}m ${seconds % 60}s remaining`;
                    } else {
                        return `${seconds}s remaining`;
                    }
                }

                // Function to update next irrigation display
                async function updateNextIrrigation() {
                    try {
                        const response = await fetch('/api/irrigation-schedules');
                        const data = await response.json();
                        
                        if (data.success && data.schedules.length > 0) {
                            const now = new Date();
                            let nextSchedule = null;
                            let minTimeDiff = Infinity;

                            // Find the next active schedule
                            data.schedules.forEach(schedule => {
                                if (schedule.isActive) {
                                    const [hours, minutes] = schedule.time.split(':').map(Number);
                                    const scheduleTime = new Date(now);
                                    scheduleTime.setHours(hours, minutes, 0, 0);

                                    // If the time has passed today, check for next occurrence
                                    if (scheduleTime <= now) {
                                        scheduleTime.setDate(scheduleTime.getDate() + 1);
                                    }

                                    const timeDiff = scheduleTime - now;
                                    if (timeDiff < minTimeDiff) {
                                        minTimeDiff = timeDiff;
                                        nextSchedule = {
                                            time: schedule.time,
                                            nextOccurrence: scheduleTime
                                        };
                                    }
                                }
                            });

                            if (nextSchedule) {
                                // Update the display
                                document.getElementById('nextIrrigationTime').textContent = nextSchedule.time;
                                document.getElementById('nextIrrigationDate').textContent = 
                                    nextSchedule.nextOccurrence.toLocaleDateString('en-US', { 
                                        weekday: 'long', 
                                        month: 'short', 
                                        day: 'numeric' 
                                    });

                                // Calculate progress (assuming 24-hour cycle)
                                const totalTime = 24 * 60 * 60 * 1000; // 24 hours in milliseconds
                                const timeUntilNext = nextSchedule.nextOccurrence - now;
                                const progress = ((totalTime - timeUntilNext) / totalTime) * 100;
                                
                                document.getElementById('nextIrrigationProgress').style.width = `${progress}%`;
                                document.getElementById('nextIrrigationStatus').textContent = formatTimeRemaining(timeUntilNext);
                            } else {
                                // No active schedules
                                document.getElementById('nextIrrigationTime').textContent = '--:--';
                                document.getElementById('nextIrrigationDate').textContent = 'No active schedules';
                                document.getElementById('nextIrrigationProgress').style.width = '0%';
                                document.getElementById('nextIrrigationStatus').textContent = 'No upcoming irrigation';
                            }
                        } else {
                            // No schedules found
                            document.getElementById('nextIrrigationTime').textContent = '--:--';
                            document.getElementById('nextIrrigationDate').textContent = 'No schedules';
                            document.getElementById('nextIrrigationProgress').style.width = '0%';
                            document.getElementById('nextIrrigationStatus').textContent = 'No upcoming irrigation';
                        }
                    } catch (error) {
                        console.error('Error updating next irrigation:', error);
                        document.getElementById('nextIrrigationTime').textContent = '--:--';
                        document.getElementById('nextIrrigationDate').textContent = 'Error';
                        document.getElementById('nextIrrigationProgress').style.width = '0%';
                        document.getElementById('nextIrrigationStatus').textContent = 'Failed to load schedule';
                    }
                }

                // Initialize the page
                document.addEventListener('DOMContentLoaded', function() {
                    loadSchedules();
                    updateNextIrrigation();
                    // Update next irrigation every minute
                    setInterval(updateNextIrrigation, 60000);
                    // Reload schedules every minute
                    setInterval(loadSchedules, 60000);
                });
            </script>
        </div>
    </div>
    <!-- BEGIN THEME CONFIG PANEL-->
    <div class="theme-config">
        <div class="theme-config-toggle"><i class="fa fa-cog theme-config-show"></i><i class="ti-close theme-config-close"></i></div>
        <div class="theme-config-box">
            <div class="text-center font-18 m-b-20">SETTINGS</div>
            <div class="font-strong">LAYOUT OPTIONS</div>
            <div class="check-list m-b-20 m-t-10">
                <label class="ui-checkbox ui-checkbox-gray">
                    <input id="_fixedNavbar" type="checkbox" checked>
                    <span class="input-span"></span>Fixed navbar</label>
                <label class="ui-checkbox ui-checkbox-gray">
                    <input id="_fixedlayout" type="checkbox">
                    <span class="input-span"></span>Fixed layout</label>
                <label class="ui-checkbox ui-checkbox-gray">
                    <input class="js-sidebar-toggler" type="checkbox">
                    <span class="input-span"></span>Collapse sidebar</label>
            </div>
            <div class="font-strong">LAYOUT STYLE</div>
            <div class="m-t-10">
                <label class="ui-radio ui-radio-gray m-r-10">
                    <input type="radio" name="layout-style" value="" checked="">
                    <span class="input-span"></span>Fluid</label>
                <label class="ui-radio ui-radio-gray">
                    <input type="radio" name="layout-style" value="1">
                    <span class="input-span"></span>Boxed</label>
            </div>
            <div class="m-t-10 m-b-10 font-strong">THEME COLORS</div>
            <div class="d-flex m-b-20">
                <div class="color-skin-box" data-toggle="tooltip" data-original-title="Default">
                    <label>
                        <input type="radio" name="setting-theme" value="default" checked="">
                        <span class="color-check-icon"><i class="fa fa-check"></i></span>
                        <div class="color bg-white"></div>
                        <div class="color-small bg-ebony"></div>
                    </label>
                </div>
                <div class="color-skin-box" data-toggle="tooltip" data-original-title="Blue">
                    <label>
                        <input type="radio" name="setting-theme" value="blue">
                        <span class="color-check-icon"><i class="fa fa-check"></i></span>
                        <div class="color bg-blue"></div>
                        <div class="color-small bg-ebony"></div>
                    </label>
                </div>
                <div class="color-skin-box" data-toggle="tooltip" data-original-title="Green">
                    <label>
                        <input type="radio" name="setting-theme" value="green">
                        <span class="color-check-icon"><i class="fa fa-check"></i></span>
                        <div class="color bg-green"></div>
                        <div class="color-small bg-ebony"></div>
                    </label>
                </div>
                <div class="color-skin-box" data-toggle="tooltip" data-original-title="Purple">
                    <label>
                        <input type="radio" name="setting-theme" value="purple">
                        <span class="color-check-icon"><i class="fa fa-check"></i></span>
                        <div class="color bg-purple"></div>
                        <div class="color-small bg-ebony"></div>
                    </label>
                </div>
                <div class="color-skin-box" data-toggle="tooltip" data-original-title="Orange">
                    <label>
                        <input type="radio" name="setting-theme" value="orange">
                        <span class="color-check-icon"><i class="fa fa-check"></i></span>
                        <div class="color bg-orange"></div>
                        <div class="color-small bg-ebony"></div>
                    </label>
                </div>
                <div class="color-skin-box" data-toggle="tooltip" data-original-title="Pink">
                    <label>
                        <input type="radio" name="setting-theme" value="pink">
                        <span class="color-check-icon"><i class="fa fa-check"></i></span>
                        <div class="color bg-pink"></div>
                        <div class="color-small bg-ebony"></div>
                    </label>
                </div>
            </div>
            <div class="d-flex">
                <div class="color-skin-box" data-toggle="tooltip" data-original-title="White">
                    <label>
                        <input type="radio" name="setting-theme" value="white">
                        <span class="color-check-icon"><i class="fa fa-check"></i></span>
                        <div class="color"></div>
                        <div class="color-small bg-silver-100"></div>
                    </label>
                </div>
                <div class="color-skin-box" data-toggle="tooltip" data-original-title="Blue light">
                    <label>
                        <input type="radio" name="setting-theme" value="blue-light">
                        <span class="color-check-icon"><i class="fa fa-check"></i></span>
                        <div class="color bg-blue"></div>
                        <div class="color-small bg-silver-100"></div>
                    </label>
                </div>
                <div class="color-skin-box" data-toggle="tooltip" data-original-title="Green light">
                    <label>
                        <input type="radio" name="setting-theme" value="green-light">
                        <span class="color-check-icon"><i class="fa fa-check"></i></span>
                        <div class="color bg-green"></div>
                        <div class="color-small bg-silver-100"></div>
                    </label>
                </div>
                <div class="color-skin-box" data-toggle="tooltip" data-original-title="Purple light">
                    <label>
                        <input type="radio" name="setting-theme" value="purple-light">
                        <span class="color-check-icon"><i class="fa fa-check"></i></span>
                        <div class="color bg-purple"></div>
                        <div class="color-small bg-silver-100"></div>
                    </label>
                </div>
                <div class="color-skin-box" data-toggle="tooltip" data-original-title="Orange light">
                    <label>
                        <input type="radio" name="setting-theme" value="orange-light">
                        <span class="color-check-icon"><i class="fa fa-check"></i></span>
                        <div class="color bg-orange"></div>
                        <div class="color-small bg-silver-100"></div>
                    </label>
                </div>
                <div class="color-skin-box" data-toggle="tooltip" data-original-title="Pink light">
                    <label>
                        <input type="radio" name="setting-theme" value="pink-light">
                        <span class="color-check-icon"><i class="fa fa-check"></i></span>
                        <div class="color bg-pink"></div>
                        <div class="color-small bg-silver-100"></div>
                    </label>
                </div>
            </div>
        </div>
    </div>
    <!-- END THEME CONFIG PANEL-->
    <!-- BEGIN PAGA BACKDROPS-->
    <div class="sidenav-backdrop backdrop"></div>
    <div class="preloader-backdrop">
        <div class="page-preloader">Loading</div>
    </div>
    <!-- END PAGA BACKDROPS-->
    <!-- CORE PLUGINS-->
    <script src="./assets/vendors/jquery/dist/jquery.min.js" type="text/javascript"></script>
    <script src="./assets/vendors/popper.js/dist/umd/popper.min.js" type="text/javascript"></script>
    <script src="./assets/vendors/bootstrap/dist/js/bootstrap.min.js" type="text/javascript"></script>
    <script src="./assets/vendors/metisMenu/dist/metisMenu.min.js" type="text/javascript"></script>
    <script src="./assets/vendors/jquery-slimscroll/jquery.slimscroll.min.js" type="text/javascript"></script>
    <!-- Socket.IO -->
    <script src="/socket.io/socket.io.js"></script>
    <!-- PAGE LEVEL PLUGINS-->
    <script src="./assets/vendors/chart.js/dist/Chart.min.js" type="text/javascript"></script>
    <script src="./assets/vendors/jvectormap/jquery-jvectormap-2.0.3.min.js" type="text/javascript"></script>
    <script src="./assets/vendors/jvectormap/jquery-jvectormap-world-mill-en.js" type="text/javascript"></script>
    <script src="./assets/vendors/jvectormap/jquery-jvectormap-us-aea-en.js" type="text/javascript"></script>
    <script src="./assets/vendors/moment/min/moment.min.js" type="text/javascript"></script>
    <script src="./assets/vendors/fullcalendar/dist/fullcalendar.min.js" type="text/javascript"></script>
    <script src="./assets/vendors/jquery-ui/jquery-ui.min.js" type="text/javascript"></script>
    
    <!-- CORE SCRIPTS-->
    <script src="assets/js/app.min.js" type="text/javascript"></script>
    <!-- PAGE LEVEL SCRIPTS-->
    <script src="./assets/js/scripts/dashboard_1_demo.js" type="text/javascript"></script>
    <script src="./assets/js/scripts/calendar-demo.js" type="text/javascript"></script>

    <script>
        // Initialize Socket.IO connection
        const socket = io();

        // Function to update sensor values
        function updateSensorValues(data) {
            // Update moisture
            document.getElementById('moistureValue').textContent = `${data.moisture.value}%`;
            const moistureStatus = document.getElementById('moistureStatus');
            moistureStatus.textContent = data.moisture.status;
            moistureStatus.className = `badge badge-${data.moisture.color}`;

            // Update temperature
            document.getElementById('temperatureValue').textContent = `${data.temperature.value}Â°C`;
            const temperatureStatus = document.getElementById('temperatureStatus');
            temperatureStatus.textContent = data.temperature.status;
            temperatureStatus.className = `badge badge-${data.temperature.color}`;
        }

        // Listen for real-time updates
        socket.on('sensorUpdate', (data) => {
            updateSensorValues(data);
        });

        // Function to update crop information
        function updateCropInfo(cropData) {
            const noCropMessage = document.getElementById('noCropMessage');
            const cropInfo = document.getElementById('cropInfo');

            if (!cropData) {
                noCropMessage.style.display = 'block';
                cropInfo.style.display = 'none';
                return;
            }

            noCropMessage.style.display = 'none';
            cropInfo.style.display = 'block';

            // Update crop details
            document.getElementById('cropName').textContent = cropData.name;
            document.getElementById('plantedDate').textContent = formatDate(cropData.startDate);
            document.getElementById('harvestDate').textContent = formatDate(cropData.expectedHarvest);
            document.getElementById('growthStage').textContent = cropData.growthStage;
            document.getElementById('healthScore').textContent = `${cropData.score}%`;

            // Update optimal conditions
            const optimal = cropData.optimalConditions;
            document.getElementById('optimalMoisture').textContent = `${optimal.moisture}%`;
            document.getElementById('optimalTemperature').textContent = `${optimal.temperature}Â°C`;
            document.getElementById('optimalHumidity').textContent = `${optimal.humidity}%`;
            document.getElementById('optimalLight').textContent = `${optimal.light} lux`;
        }

        // Function to format date
        function formatDate(date) {
            return new Date(date).toLocaleDateString('en-US', {
                year: 'numeric',
                month: 'long',
                day: 'numeric'
            });
        }

        // Initial load of soil status
        function loadInitialSoilStatus() {
            fetch('/api/soil-status')
                .then(response => response.json())
                .then(data => {
                    updateSensorValues(data);
                    updateCropInfo(data.currentCrop);
                })
                .catch(error => {
                    console.error('Error fetching soil status:', error);
                });
        }

        // Initialize the page
        document.addEventListener('DOMContentLoaded', function() {
            loadInitialSoilStatus();
        });
    </script>

    <!-- Add this modal HTML before the closing body tag -->
    <div class="modal fade" id="scheduleModal" tabindex="-1" role="dialog" aria-labelledby="scheduleModalLabel" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="scheduleModalLabel">Add Irrigation Schedule</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <form id="scheduleForm">
                        <div class="form-group">
                            <label for="scheduleTime">Time</label>
                            <input type="time" class="form-control" id="scheduleTime" required>
                        </div>
                        <div class="form-group">
                            <label for="scheduleDuration">Duration (minutes)</label>
                            <input type="number" class="form-control" id="scheduleDuration" min="1" max="60" value="15" required>
                        </div>
                        <div class="form-group">
                            <label>Days</label>
                            <div class="d-flex flex-wrap">
                                <div class="checkbox-wrapper mr-3 mb-2">
                                    <input type="checkbox" id="day0" value="0" class="form-check-input">
                                    <label for="day0" class="form-check-label">Sun</label>
                                </div>
                                <div class="checkbox-wrapper mr-3 mb-2">
                                    <input type="checkbox" id="day1" value="1" class="form-check-input">
                                    <label for="day1" class="form-check-label">Mon</label>
                                </div>
                                <div class="checkbox-wrapper mr-3 mb-2">
                                    <input type="checkbox" id="day2" value="2" class="form-check-input">
                                    <label for="day2" class="form-check-label">Tue</label>
                                </div>
                                <div class="checkbox-wrapper mr-3 mb-2">
                                    <input type="checkbox" id="day3" value="3" class="form-check-input">
                                    <label for="day3" class="form-check-label">Wed</label>
                                </div>
                                <div class="checkbox-wrapper mr-3 mb-2">
                                    <input type="checkbox" id="day4" value="4" class="form-check-input">
                                    <label for="day4" class="form-check-label">Thu</label>
                                </div>
                                <div class="checkbox-wrapper mr-3 mb-2">
                                    <input type="checkbox" id="day5" value="5" class="form-check-input">
                                    <label for="day5" class="form-check-label">Fri</label>
                                </div>
                                <div class="checkbox-wrapper mr-3 mb-2">
                                    <input type="checkbox" id="day6" value="6" class="form-check-input">
                                    <label for="day6" class="form-check-label">Sat</label>
                                </div>
                            </div>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                    <button type="button" class="btn btn-primary" onclick="saveSchedule()">Save Schedule</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Add this JavaScript code before the closing body tag -->
    <script>
    // Function to format days array into readable string
    function formatDays(days) {
        const dayNames = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];
        return days.map(day => dayNames[day]).join(', ');
    }

    // Function to load schedules
    async function loadSchedules() {
        try {
            const response = await fetch('/api/irrigation-schedules');
            const data = await response.json();
            
            if (data.success) {
                const tbody = document.querySelector('#scheduleTable tbody');
                tbody.innerHTML = '';
                
                data.schedules.forEach(schedule => {
                    const row = document.createElement('tr');
                    row.innerHTML = `
                        <td><i class="fa fa-clock-o"></i> ${schedule.time}</td>
                        <td>${schedule.duration} min</td>
                        <td>${formatDays(schedule.days)}</td>
                        <td>
                            <span class="badge badge-${schedule.isActive ? 'success' : 'danger'}">
                                ${schedule.isActive ? 'Active' : 'Inactive'}
                            </span>
                        </td>
                        <td>
                            ${schedule.isActive ? 
                                `<button class="btn btn-sm btn-danger" onclick="toggleScheduleStatus('${schedule.id}', false)">
                                    <i class="fa fa-power-off"></i> Disable
                                </button>` :
                                `<button class="btn btn-sm btn-success" onclick="toggleScheduleStatus('${schedule.id}', true)">
                                    <i class="fa fa-power-off"></i> Activate
                                </button>`
                            }
                            <button class="btn btn-sm btn-primary ml-2" onclick="editSchedule('${schedule.id}', '${schedule.time}', ${schedule.duration}, ${JSON.stringify(schedule.days)})">
                                <i class="fa fa-edit"></i> Edit
                            </button>
                            <button class="btn btn-sm btn-danger ml-2" onclick="confirmDeleteSchedule('${schedule.id}')">
                                <i class="fa fa-trash"></i> Delete
                            </button>
                        </td>
                    `;
                    tbody.appendChild(row);
                });
            }
        } catch (error) {
            console.error('Error loading schedules:', error);
        }
    }

    // Function to save new schedule
    async function saveSchedule() {
        const time = document.getElementById('scheduleTime').value;
        const duration = parseInt(document.getElementById('scheduleDuration').value);
        const days = [];
        
        // Get selected days
        for (let i = 0; i < 7; i++) {
            if (document.getElementById(`day${i}`).checked) {
                days.push(i);
            }
        }
        
        if (!time || !duration || days.length === 0) {
            alert('Please fill in all required fields');
            return;
        }
        
        try {
            const response = await fetch('/api/irrigation-schedules', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ time, duration, days })
            });
            
            const data = await response.json();
            if (data.success) {
                $('#scheduleModal').modal('hide');
                loadSchedules();
                // Reset form
                document.getElementById('scheduleForm').reset();
            } else {
                alert('Failed to save schedule');
            }
        } catch (error) {
            console.error('Error saving schedule:', error);
            alert('Error saving schedule');
        }
    }

    // Function to toggle schedule status
    async function toggleScheduleStatus(scheduleId, newStatus) {
        try {
            const response = await fetch(`/api/irrigation-schedules/${scheduleId}/toggle`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ isActive: newStatus })
            });
            
            const data = await response.json();
            if (data.success) {
                Swal.fire({
                    icon: 'success',
                    title: newStatus ? 'Schedule Activated' : 'Schedule Disabled',
                    text: `The schedule has been ${newStatus ? 'activated' : 'disabled'}.`,
                    timer: 1500,
                    showConfirmButton: false
                });
                loadSchedules();
            } else {
                Swal.fire(
                    'Error!',
                    'Failed to update schedule status.',
                    'error'
                );
            }
        } catch (error) {
            console.error('Error toggling schedule status:', error);
            Swal.fire(
                'Error!',
                'An error occurred while updating the schedule status.',
                'error'
            );
        }
    }

    // Function to confirm schedule deletion
    function confirmDeleteSchedule(scheduleId) {
        Swal.fire({
            title: 'Are you sure?',
            text: "This schedule will be permanently deleted!",
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#d33',
            cancelButtonColor: '#3085d6',
            confirmButtonText: 'Yes, delete it!',
            cancelButtonText: 'Cancel'
        }).then((result) => {
            if (result.isConfirmed) {
                deleteSchedule(scheduleId);
            }
        });
    }

    // Function to delete schedule
    async function deleteSchedule(scheduleId) {
        try {
            const response = await fetch(`/api/irrigation-schedules/${scheduleId}`, {
                method: 'DELETE'
            });
            
            const data = await response.json();
            if (data.success) {
                Swal.fire(
                    'Deleted!',
                    'The schedule has been deleted.',
                    'success'
                );
                loadSchedules();
            } else {
                Swal.fire(
                    'Error!',
                    'Failed to delete schedule.',
                    'error'
                );
            }
        } catch (error) {
            console.error('Error deleting schedule:', error);
            Swal.fire(
                'Error!',
                'An error occurred while deleting the schedule.',
                'error'
            );
        }
    }

    // Load schedules when page loads
    document.addEventListener('DOMContentLoaded', function() {
        loadSchedules();
        // Reload schedules every minute
        setInterval(loadSchedules, 60000);
    });

    // Function to open edit modal with schedule data
    function editSchedule(id, time, duration, days) {
        console.log('Opening edit modal for schedule:', { id, time, duration, days });
        
        // Set the values in the form
        document.getElementById('editScheduleId').value = id;
        document.getElementById('editScheduleTime').value = time;
        document.getElementById('editScheduleDuration').value = duration;
        
        // Show the modal
        $('#editScheduleModal').modal('show');
    }

    // Function to update schedule
    async function updateSchedule() {
        const id = document.getElementById('editScheduleId').value;
        const time = document.getElementById('editScheduleTime').value;
        const duration = parseInt(document.getElementById('editScheduleDuration').value);
        
        if (!time || !duration) {
            Swal.fire({
                icon: 'error',
                title: 'Error!',
                text: 'Please fill in all required fields'
            });
            return;
        }
        
        try {
            const response = await fetch(`/api/irrigation-schedules/${id}`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ time, duration })
            });
            
            const data = await response.json();
            if (data.success) {
                $('#editScheduleModal').modal('hide');
                loadSchedules();
                Swal.fire({
                    icon: 'success',
                    title: 'Schedule Updated',
                    text: 'The irrigation schedule has been updated successfully.',
                    timer: 1500,
                    showConfirmButton: false
                });
            } else {
                Swal.fire({
                    icon: 'error',
                    title: 'Error!',
                    text: data.error || 'Failed to update schedule'
                });
            }
        } catch (error) {
            console.error('Error updating schedule:', error);
            Swal.fire({
                icon: 'error',
                title: 'Error!',
                text: 'An error occurred while updating the schedule'
            });
        }
    }
    </script>

    <!-- Add SweetAlert2 JS in the head section -->
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11.0.19/dist/sweetalert2.all.min.js"></script>

    <!-- Add this right before the closing body tag -->
    <div class="modal fade" id="editScheduleModal" tabindex="-1" role="dialog" aria-labelledby="editScheduleModalLabel" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="editScheduleModalLabel">Edit Irrigation Schedule</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <form id="editScheduleForm">
                        <input type="hidden" id="editScheduleId">
                        <div class="form-group">
                            <label for="editScheduleTime">Time</label>
                            <input type="time" class="form-control" id="editScheduleTime" required>
                        </div>
                        <div class="form-group">
                            <label for="editScheduleDuration">Duration (minutes)</label>
                            <input type="number" class="form-control" id="editScheduleDuration" min="1" max="60" value="15" required>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                    <button type="button" class="btn btn-primary" onclick="updateSchedule()">Save Changes</button>
                </div>
            </div>
        </div>
    </div>
</body>

</html>