<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width initial-scale=1.0">
    <title>NetHouseAutomation Dashboard</title>
    <!-- GLOBAL MAINLY STYLES-->
    <link href="./assets/vendors/bootstrap/dist/css/bootstrap.min.css" rel="stylesheet" />
    <link href="./assets/vendors/font-awesome/css/font-awesome.min.css" rel="stylesheet" />
    <link href="./assets/vendors/themify-icons/css/themify-icons.css" rel="stylesheet" />
    <!-- PLUGINS STYLES-->
    <link href="./assets/vendors/jvectormap/jquery-jvectormap-2.0.3.css" rel="stylesheet" />
    <!-- THEME STYLES-->
    <link href="assets/css/main.min.css" rel="stylesheet" />
    <!-- PAGE LEVEL STYLES-->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <link href="./assets/vendors/fullcalendar/dist/fullcalendar.min.css" rel="stylesheet" />
    <link href="./assets/vendors/fullcalendar/dist/fullcalendar.print.min.css" rel="stylesheet" media="print" />

    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/weather-icons/2.0.10/css/weather-icons.min.css">

</head>

<body class="fixed-navbar">
    <div class="page-wrapper">
        <!-- START HEADER-->
        <header class="header">
            <div class="page-brand">
                <a class="link" href="/admin-home">
                    <span class="brand">Demo
                        <span class="brand-tip">FARM</span>
                    </span>
                    <span class="brand-mini">DF</span>
                </a>
            </div>
            <div class="flexbox flex-1">
                <!-- START TOP-LEFT TOOLBAR-->
                <ul class="nav navbar-toolbar">
                    <li>
                        <a class="nav-link sidebar-toggler js-sidebar-toggler"><i class="ti-menu"></i></a>
                    </li>
                    <!--<li>
                        <form class="navbar-search" action="javascript:;">
                            <div class="rel">
                                <span class="search-icon"><i class="ti-search"></i></span>
                                <input class="form-control" placeholder="Search here...">
                            </div>
                        </form>
                    </li>-->
                </ul>
                <!-- END TOP-LEFT TOOLBAR-->
                <!-- START TOP-RIGHT TOOLBAR-->
                <ul class="nav navbar-toolbar">
                    
                    <li class="dropdown dropdown-user">
                        <a class="nav-link dropdown-toggle link" data-toggle="dropdown">
                            <img src="./assets/img/admin-avatar.png" />
                            <span></span>Admin<i class="fa fa-angle-down m-l-5"></i></a>
                        <ul class="dropdown-menu dropdown-menu-right">
                            <a class="dropdown-item" href="/admin-profile"><i class="fa fa-user"></i>Profile</a>
                            <li class="dropdown-divider"></li>
                            <a class="dropdown-item" href="/logout"><i class="fa fa-power-off"></i>Logout</a>
                        </ul>
                    </li>
                </ul>
                <!-- END TOP-RIGHT TOOLBAR-->
            </div>
        </header>
        <!-- END HEADER-->
        <!-- START SIDEBAR-->
        <nav class="page-sidebar" id="sidebar">
            <div id="sidebar-collapse">
                <div class="admin-block d-flex">
                    <div>
                        <img src="./assets/img/admin-avatar.png" width="45px" />
                    </div>
                    <div class="admin-info">
                        <div class="font-strong">Dan Lloyd</div><small>Administrator</small></div>
                </div>
                <ul class="side-menu metismenu">
                    <li>
                        <a class="active" href="/admin-home"><i class="sidebar-item-icon fas fa-tachometer-alt"></i>
                            <span class="nav-label">Dashboard</span>
                        </a>
                    </li>
                    
                    <li>
                        <a class="active" href="/admin-plant-overview"><i class="sidebar-item-icon fas fa-leaf"></i>
                            <span class="nav-label">Plant Overview</span>
                        </a>
                    </li>
                    <li>
                        <a class="active" href="/admin-irrigation-controll"><i class="sidebar-item-icon fas fa-faucet"></i>
                            <span class="nav-label">Irrigation Controll</span>
                        </a>
                    </li>
                    <li>
                        <a class="active" href="/admin-reports&analytics"><i class="sidebar-item-icon fas fa-chart-bar"></i>
                            <span class="nav-label">Reports & Analytics</span>
                        </a>
                    </li>
                    <li>
                        <a class="active" href="/admin-user-management"><i class="sidebar-item-icon fas fa-users-cog"></i>
                            <span class="nav-label">User Management</span>
                        </a>
                    </li>
                    
                </ul>
            </div>
        </nav>
        <!-- END SIDEBAR-->
        <div class="content-wrapper">
            <!-- START PAGE CONTENT-->
            <div class="page-content fade-in-up">
                <div class="row">
                    <div class="col-lg-3 col-md-6">
                        <div class="ibox bg-success color-white widget-stat">
                            <div class="ibox-body">
                                <h2 class="m-b-5 font-strong">Temperature</h2>
                                <div class="m-b-5 widget-stat-icon"id="temperature"><%= sensorData.temperature.value %>Â°C</div>
                                <i class="fas fa-thermometer-half "></i>
                                <div><small id="temperature-status"><%= sensorData.temperature.status %></small></div>
                            </div>
                        </div>
                    </div>
                    <div class="col-lg-3 col-md-6">
                        <div class="ibox bg-info color-white widget-stat">
                            <div class="ibox-body">
                                <h2 class="m-b-5 font-strong">Humidity</h2><i class=" fas fa-tint"></i>
                                <div class="m-b-5 widget-stat-icon" id="humidity"><%= sensorData.humidity.value %>%</div>
                                <div><small id="humidity-status"><%= sensorData.humidity.status %></small></div>
                            </div>
                        </div>
                    </div>
                    <div class="col-lg-3 col-md-6">
                        <div class="ibox bg-warning color-white widget-stat">
                            <div class="ibox-body">
                                <h2 class="m-b-5 font-strong">Moisture</h2><i class="fas fa-water"></i>
                                <div class="m-b-5 widget-stat-icon" id="moisture"><%= sensorData.moisture.value %></div>
                                <div><small id="moisture-status"><%= sensorData.moisture.status %></small></div>
                            </div>
                        </div>
                    </div>
                    <div class="col-lg-3 col-md-6">
                        <div class="ibox bg-danger color-white widget-stat">
                            <div class="ibox-body">
                            
                                <h2 class="m-b-5 font-strong">PH</h2>
                                <div class="m-b-5 widget-stat-icon" id="light"> <%= sensorData.ph.value %></div>
                                <i class="fas fa-flask"></i>
                                <div><small id="light-status"><%= sensorData.ph.status %></small></div>
                                
                            </div>
                        </div>
                    </div>
    
                </div>



                <div class="row">
                    <div class="col-lg-8">
                        <div class="ibox">
                            <div class="ibox-body">
                                <div class="flexbox mb-4">
                                    <div>
                                        <h3 class="m-0">Daily NPK Data</h3>
                                        
                                    </div>
                                    
                                    <div class="d-inline-flex">
                                        <div class="px-3" style="border-right: 1px solid rgba(0,0,0,.1);">
                                            <div class="text-muted">DAILY AVERAGE</div>
                                            <small id="npk-last-update">Last updated: Loading...</small>
                                            
                                        </div>
                                        <div class="px-3" style="border-right: 1px solid rgba(0,0,0,.1);">
                                            <div class="text-muted">NITROGEN (N)</div>
                                            <div>
                                                <span class="h2 m-0"><span id="npk-nitrogen">0.0</span></span>
                                                <span class="text-info ml-2" id="nitrogen-trend"><i class="fa fa-minus"></i> 0%</span>
                                            </div>
                                        </div>
                                        <div class="px-3" style="border-right: 1px solid rgba(0,0,0,.1);">
                                            <div class="text-muted">POTASSIUM (P)</div>
                                            <div>
                                                <span class="h2 m-0"><span id="npk-phosphorus">0.0</span></span>
                                                <span class="text-info ml-2" id="phosphorus-trend"><i class="fa fa-minus"></i> 0%</span>
                                            </div>
                                        </div>
                                        <div class="px-3">
                                            <div class="text-muted">PHOSPHORUS (K)</div>
                                            <div>
                                                <span class="h2 m-0"><span id="npk-potassium">0.0</span></span>
                                                <span class="text-info ml-2" id="potassium-trend"><i class="fa fa-minus"></i> 0%</span>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div>
                   
                                    
                                    <script src="/socket.io/socket.io.js"></script>
                                    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

                                    <div style="position: relative; height: 400px; width: 100%; padding: 20px;">
                                        <canvas id="sensorChart"></canvas>
                                    </div>
                                    <script>
                                        document.addEventListener('DOMContentLoaded', function() {
                                            // If you're not using Socket.IO, remove the following line
                                            const socket = io(); 
                                        
                                            // Get canvas context
                                            const ctx = document.getElementById('sensorChart');
                                            if (!ctx) {
                                                console.error('Canvas element not found');
                                                return;
                                            }
                                        
                                            const sensorChart = new Chart(ctx.getContext('2d'), {
                                                type: 'line',
                                                data: {
                                                    labels: [],
                                                    datasets: [
                                                        { 
                                                            label: 'Nitrogen (N)', 
                                                            data: [], 
                                                            borderColor: '#4BC0C0',
                                                            backgroundColor: 'rgba(75, 192, 192, 0.1)',
                                                            borderWidth: 2,
                                                            pointRadius: 4,
                                                            tension: 0.1
                                                        },
                                                        { 
                                                            label: 'Phosphorus (P)', 
                                                            data: [], 
                                                            borderColor: '#FFCE56',
                                                            backgroundColor: 'rgba(255, 206, 86, 0.1)',
                                                            borderWidth: 2,
                                                            pointRadius: 4,
                                                            tension: 0.1
                                                        },
                                                        { 
                                                            label: 'Potassium (K)', 
                                                            data: [], 
                                                            borderColor: '#FF9F40',
                                                            backgroundColor: 'rgba(255, 159, 64, 0.1)',
                                                            borderWidth: 2,
                                                            pointRadius: 4,
                                                            tension: 0.1
                                                        }
                                                    ]
                                                },
                                                options: {
                                                    responsive: true,
                                                    maintainAspectRatio: false,
                                                    scales: {
                                                        x: {
                                                            title: { display: true, text: 'Time' },
                                                            ticks: {
                                                                callback: function(value) {
                                                                    return value; // Or format if needed
                                                                }
                                                            }
                                                        },
                                                        y: {
                                                            title: { display: true, text: 'NPK Values (ppm)' },
                                                            min: 0,
                                                            max: 50 // <-- Fixed Y-axis range
                                                        }
                                                    },
                                                    plugins: {
                                                        legend: {
                                                            position: 'top'
                                                        }
                                                    }
                                                }
                                            });
                                        
                                            // Load initial data
                                            fetch('/sensors/history')
                                                .then(res => res.json())
                                                .then(data => {
                                                    data.forEach(reading => {
                                                        updateChart(reading.timestamp, reading);
                                                    });
                                                })
                                                .catch(err => {
                                                    console.error('Error loading initial data:', err);
                                                });
                                        
                                            // Real-time updates (enable only if Socket.IO is set up)
                                            socket.on('sensor_update', (data) => {
                                                updateChart(data.timestamp, data);
                                            });
                                        
                                            function updateChart(timestamp, data) {
                                                const timeLabel = new Date(timestamp).toLocaleTimeString();
                                        
                                                sensorChart.data.labels.push(timeLabel);
                                                sensorChart.data.datasets[0].data.push(data.nitrogen);
                                                sensorChart.data.datasets[1].data.push(data.phosphorus);
                                                sensorChart.data.datasets[2].data.push(data.potassium);
                                        
                                                if (sensorChart.data.labels.length > 100) {
                                                    sensorChart.data.labels.shift();
                                                    sensorChart.data.datasets.forEach(dataset => dataset.data.shift());
                                                }
                                        
                                                sensorChart.update();
                                            }
                                        });
                                        </script>
                                        

                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-lg-4">
                        <div class="ibox">
                            <div class="ibox-head">
                                <div class="ibox-title">Weather & Time</div>
                            </div>
                            <div class="ibox-body">
                                <!-- Sun/Moon Position Arc -->
                                <div class="sky-arc-container">
                                    <svg class="sky-arc" viewBox="0 0 300 100" xmlns="http://www.w3.org/2000/svg">
                                        <defs>
                                            <!-- Day Gradient -->
                                            <linearGradient id="dayGradient" x1="0%" y1="0%" x2="100%" y2="0%">
                                                <stop offset="0%" stop-color="#1e5799" />
                                                <stop offset="50%" stop-color="#2989d8" />
                                                <stop offset="100%" stop-color="#1e5799" />
                                            </linearGradient>
                                            <!-- Night Gradient -->
                                            <linearGradient id="nightGradient" x1="0%" y1="0%" x2="100%" y2="0%">
                                                <stop offset="0%" stop-color="#0c1445" />
                                                <stop offset="50%" stop-color="#1a237e" />
                                                <stop offset="100%" stop-color="#0c1445" />
                                            </linearGradient>
                                            <!-- Sun Glow -->
                                            <radialGradient id="sunGlow" cx="50%" cy="50%" r="50%" fx="50%" fy="50%">
                                                <stop offset="0%" stop-color="#ffee00" stop-opacity="0.8" />
                                                <stop offset="100%" stop-color="#ff9800" stop-opacity="0" />
                                            </radialGradient>
                                            <!-- Moon Glow -->
                                            <radialGradient id="moonGlow" cx="50%" cy="50%" r="50%" fx="50%" fy="50%">
                                                <stop offset="0%" stop-color="#ffffff" stop-opacity="0.6" />
                                                <stop offset="100%" stop-color="#bbbbbb" stop-opacity="0" />
                                            </radialGradient>
                                        </defs>
                                        <!-- Arc Path -->
                                        <path class="arc-path" d="M 0,100 Q 150,0 300,100" fill="none" stroke-width="6" stroke="url(#dayGradient)" />
                                        
                                        
                                        <!-- Celestial Body -->
                                        <g id="celestial-container" transform="translate(150, 50)">
                                            <circle id="celestial-glow" r="20" fill="url(#sunGlow)" opacity="0.7" />
                                            <circle id="celestial-body" r="10" fill="#f9d71c" />
                                        </g>
                                        <h2 class="m-b-5 font-strong">Light</h2>
                                <div class="m-b-5" id="light"><%= sensorData.light.value %></div>
                                <div><small id="light-status"><%= sensorData.light.status %></small></div>
                                    </svg>
                                    
                            
                                </div>
                                
                                <!-- Current Date and Time -->
                                <div class="datetime-container text-center mb-3">
                                    <h2 id="current-date" class="mb-1"></h2>
                                    <h1 id="current-time" class="font-strong"></h1>
                                </div>
                                
                                <!-- Weather Display -->
                                <div class="weather-card">
                                    <div class="weather-icon-container">
                                        <i id="weather-icon" class="wi"></i>
                                    </div>
                                    <div class="weather-details">
                                        <div class="weather-temp" id="weather-temp">--Â°C</div>
                                        <div class="weather-desc" id="weather-desc">Loading weather...</div>
                                        <div class="weather-stats">
                                            <div class="weather-stat">
                                                <i class="wi wi-humidity"></i>
                                                <span id="weather-humidity">--%</span>
                                            </div>
                                            <div class="weather-stat">
                                                <i class="wi wi-strong-wind"></i>
                                                <span id="weather-wind">-- km/h</span>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <!-- Weather Icons CSS -->
                    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/weather-icons/2.0.10/css/weather-icons.min.css">
                    
                    <style>
                    /* Sky Arc Styles */
                    .sky-arc-container {
                        margin: 0 auto 20px;
                        width: 100%;
                        max-width: 350px;
                        position: relative;
                        height: 80px;
                    }
                    
                    .sky-arc {
                        width: 100%;
                        height: 100%;
                        display: block;
                    }
                    
                    .arc-path {
                        stroke-linecap: round;
                        transition: stroke 0.5s ease;
                    }
                    
                    /* Celestial Body Styles */
                    #celestial-container {
                        transition: transform 0.5s cubic-bezier(0.65, 0, 0.35, 1);
                    }
                    
                    #celestial-glow {
                        transition: all 0.5s ease;
                    }
                    
                    #celestial-body {
                        transition: all 0.5s ease;
                    }
                    
                    /* Weather Card Styles */
                    .weather-card {
                        background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
                        border-radius: 15px;
                        padding: 15px;
                        box-shadow: 0 4px 15px rgba(0,0,0,0.1);
                        display: flex;
                        align-items: center;
                        transition: all 0.5s ease;
                    }
                    
                    .weather-icon-container {
                        font-size: 3rem;
                        margin-right: 15px;
                        min-width: 60px;
                        text-align: center;
                        color: #4a6fa5;
                    }
                    
                    .weather-details {
                        flex-grow: 1;
                    }
                    
                    .weather-temp {
                        font-size: 2rem;
                        font-weight: bold;
                        margin-bottom: 5px;
                        color: #2c3e50;
                    }
                    
                    .weather-desc {
                        color: #4a5568;
                        margin-bottom: 10px;
                        text-transform: capitalize;
                    }
                    
                    .weather-stats {
                        display: flex;
                        gap: 15px;
                    }
                    
                    .weather-stat {
                        display: flex;
                        align-items: center;
                        gap: 5px;
                        font-size: 0.9rem;
                        color: #4a5568;
                    }
                    
                    /* Animations */
                    @keyframes sunPulse {
                        0% { transform: scale(1); opacity: 0.8; }
                        50% { transform: scale(1.1); opacity: 1; }
                        100% { transform: scale(1); opacity: 0.8; }
                    }
                    
                    .sun-animation {
                        animation: sunPulse 3s infinite ease-in-out;
                    }
                    
                    .moon-animation {
                        animation: sunPulse 4s infinite ease-in-out;
                    }
                    </style>
                    
                    <script>
                    // Calapan City Coordinates
                    const CALAPAN_LAT = 13.4125;
                    const CALAPAN_LON = 121.1803;
                    
                    // 1. Date & Time Functions
                    function updateDateTime() {
                        const now = new Date();
                        
                        // Format date (e.g., "Monday, May 15, 2023")
                        const dateOptions = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' };
                        document.getElementById('current-date').textContent = now.toLocaleDateString(undefined, dateOptions);
                        
                        // Format time (e.g., "14:30")
                        const timeOptions = { hour: '2-digit', minute: '2-digit', hour12: false };
                        document.getElementById('current-time').textContent = now.toLocaleTimeString(undefined, timeOptions);
                        
                        // Update sun/moon position
                        updateSunMoonPosition(now);
                    }
                    
                    // Calculate celestial body position
                    function updateSunMoonPosition(now) {
                        const hours = now.getHours();
                        const minutes = now.getMinutes();
                        const totalMinutes = hours * 60 + minutes;
                        const isDaytime = hours >= 6 && hours < 18;
                        const container = document.getElementById('celestial-container');
                        const body = document.getElementById('celestial-body');
                        const glow = document.getElementById('celestial-glow');
                        const arc = document.querySelector('.arc-path');
                        
                        // Set day/night mode
                        if (isDaytime) {
                            // Sun configuration
                            arc.setAttribute('stroke', 'url(#dayGradient)');
                            body.setAttribute('fill', '#f9d71c');
                            glow.setAttribute('fill', 'url(#sunGlow)');
                            glow.style.opacity = '0.7';
                            body.classList.add('sun-animation');
                            body.classList.remove('moon-animation');
                        } else {
                            // Moon configuration
                            arc.setAttribute('stroke', 'url(#nightGradient)');
                            body.setAttribute('fill', '#e6e6e6');
                            glow.setAttribute('fill', 'url(#moonGlow)');
                            glow.style.opacity = '0.5';
                            body.classList.remove('sun-animation');
                            body.classList.add('moon-animation');
                        }
                        
                        // Calculate position along arc (6am = left, 12pm = top, 6pm = right)
                        const progress = Math.min(Math.max((totalMinutes - 360) / 720, 0), 1); // 6am-6pm = 0-1
                        const angle = progress * Math.PI; // 0-Ï radians
                        const x = 150 * (1 - Math.cos(angle)); // Calculate x position
                        const y = 100 * Math.sin(angle) + 50; // Calculate y position
                        
                        container.setAttribute('transform', `translate(${x}, ${y})`);
                    }
                    
                    // 2. Weather Functions (Using Open-Meteo)
                    async function fetchWeather() {
                        try {
                            const response = await fetch(
                                `https://api.open-meteo.com/v1/forecast?latitude=${CALAPAN_LAT}&longitude=${CALAPAN_LON}&current=temperature_2m,relative_humidity_2m,wind_speed_10m,weather_code&timezone=auto`
                            );
                            const data = await response.json();
                            
                            if (data.current) {
                                const weather = getWeatherDetails(data.current.weather_code);
                                
                                document.getElementById('weather-temp').textContent = `${Math.round(data.current.temperature_2m)}Â°C`;
                                document.getElementById('weather-desc').textContent = weather.description;
                                document.getElementById('weather-icon').className = `wi ${weather.icon}`;
                                document.getElementById('weather-humidity').textContent = `${data.current.relative_humidity_2m}%`;
                                document.getElementById('weather-wind').textContent = `${Math.round(data.current.wind_speed_10m)} km/h`;
                                
                                // Update weather card color based on conditions
                                updateWeatherCardStyle(data.current.weather_code);
                            }
                        } catch (error) {
                            console.error("Weather fetch error:", error);
                            document.getElementById('weather-desc').textContent = "Weather data unavailable";
                        }
                    }
                    
                    // Update weather card style based on conditions
                    function updateWeatherCardStyle(weatherCode) {
                        const card = document.querySelector('.weather-card');
                        const icon = document.getElementById('weather-icon');
                        let gradient, iconColor;
                        
                        if (weatherCode >= 200 && weatherCode < 300) {
                            gradient = 'linear-gradient(135deg, #2c3e50 0%, #4ca1af 100%)';
                            iconColor = '#f1c40f';
                        } else if (weatherCode >= 300 && weatherCode < 600) {
                            gradient = 'linear-gradient(135deg, #757f9a 0%, #d7dde8 100%)';
                            iconColor = '#3498db';
                        } else if (weatherCode >= 600 && weatherCode < 700) {
                            gradient = 'linear-gradient(135deg, #83a4d4 0%, #b6fbff 100%)';
                            iconColor = '#ecf0f1';
                        } else if (weatherCode === 800) {
                            gradient = 'linear-gradient(135deg, #56ccf2 0%, #2f80ed 100%)';
                            iconColor = '#f39c12';
                        } else {
                            gradient = 'linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%)';
                            iconColor = '#7f8c8d';
                        }
                        
                        card.style.background = gradient;
                        icon.style.color = iconColor;
                    }
                    
                    // Weather code mapping (WMO codes)
                    function getWeatherDetails(code) {
                        const weatherMap = {
                            0: { description: "Clear sky", icon: "wi-day-sunny" },
                            1: { description: "Mainly clear", icon: "wi-day-cloudy" },
                            2: { description: "Partly cloudy", icon: "wi-cloud" },
                            3: { description: "Overcast", icon: "wi-cloudy" },
                            45: { description: "Fog", icon: "wi-fog" },
                            48: { description: "Freezing fog", icon: "wi-fog" },
                            51: { description: "Light drizzle", icon: "wi-sprinkle" },
                            53: { description: "Moderate drizzle", icon: "wi-sprinkle" },
                            55: { description: "Heavy drizzle", icon: "wi-sprinkle" },
                            61: { description: "Light rain", icon: "wi-rain" },
                            63: { description: "Moderate rain", icon: "wi-rain" },
                            65: { description: "Heavy rain", icon: "wi-rain" },
                            80: { description: "Light showers", icon: "wi-showers" },
                            81: { description: "Moderate showers", icon: "wi-showers" },
                            82: { description: "Heavy showers", icon: "wi-showers" },
                            95: { description: "Thunderstorm", icon: "wi-thunderstorm" },
                            96: { description: "Thunderstorm with hail", icon: "wi-storm-showers" },
                            99: { description: "Heavy thunderstorm", icon: "wi-storm-showers" }
                        };
                        
                        return weatherMap[code] || { description: "Unknown", icon: "wi-cloud" };
                    }
                    
                    // Initialize everything when page loads
                    window.addEventListener('DOMContentLoaded', () => {
                        updateDateTime();
                        fetchWeather();
                        
                        // Update time (and sun position) every minute
                        setInterval(updateDateTime, 60000);
                        
                        // Update weather every 30 minutes
                        setInterval(fetchWeather, 1800000);
                    });
                    </script>
                    
                </div>
                
                <style>
                    .visitors-table tbody tr td:last-child {
                        display: flex;
                        align-items: center;
                    }

                    .visitors-table .progress {
                        flex: 1;
                    }

                    .visitors-table .progress-parcent {
                        text-align: right;
                        margin-left: 10px;
                    }
                </style>
            <!-- END PAGE CONTENT-->
            <footer class="page-footer">
                <div class="font-13">2025 Â© <b>NetHouseAutomation</b> - All rights reserved.</div>
                <div class="to-top"><i class="fa fa-angle-double-up"></i></div>
            </footer>
        </div>
    </div>
    <!-- BEGIN THEME CONFIG PANEL-->
    <div class="theme-config">
        <div class="theme-config-toggle"><i class="fa fa-cog theme-config-show"></i><i class="ti-close theme-config-close"></i></div>
        <div class="theme-config-box">
            <div class="text-center font-18 m-b-20">SETTINGS</div>
            <div class="font-strong">LAYOUT OPTIONS</div>
            <div class="check-list m-b-20 m-t-10">
                <label class="ui-checkbox ui-checkbox-gray">
                    <input id="_fixedNavbar" type="checkbox" checked>
                    <span class="input-span"></span>Fixed navbar</label>
                <label class="ui-checkbox ui-checkbox-gray">
                    <input id="_fixedlayout" type="checkbox">
                    <span class="input-span"></span>Fixed layout</label>
                <label class="ui-checkbox ui-checkbox-gray">
                    <input class="js-sidebar-toggler" type="checkbox">
                    <span class="input-span"></span>Collapse sidebar</label>
            </div>
            <div class="font-strong">LAYOUT STYLE</div>
            <div class="m-t-10">
                <label class="ui-radio ui-radio-gray m-r-10">
                    <input type="radio" name="layout-style" value="" checked="">
                    <span class="input-span"></span>Fluid</label>
                <label class="ui-radio ui-radio-gray">
                    <input type="radio" name="layout-style" value="1">
                    <span class="input-span"></span>Boxed</label>
            </div>
            <div class="m-t-10 m-b-10 font-strong">THEME COLORS</div>
            <div class="d-flex m-b-20">
                <div class="color-skin-box" data-toggle="tooltip" data-original-title="Default">
                    <label>
                        <input type="radio" name="setting-theme" value="default" checked="">
                        <span class="color-check-icon"><i class="fa fa-check"></i></span>
                        <div class="color bg-white"></div>
                        <div class="color-small bg-ebony"></div>
                    </label>
                </div>
                <div class="color-skin-box" data-toggle="tooltip" data-original-title="Blue">
                    <label>
                        <input type="radio" name="setting-theme" value="blue">
                        <span class="color-check-icon"><i class="fa fa-check"></i></span>
                        <div class="color bg-blue"></div>
                        <div class="color-small bg-ebony"></div>
                    </label>
                </div>
                <div class="color-skin-box" data-toggle="tooltip" data-original-title="Green">
                    <label>
                        <input type="radio" name="setting-theme" value="green">
                        <span class="color-check-icon"><i class="fa fa-check"></i></span>
                        <div class="color bg-green"></div>
                        <div class="color-small bg-ebony"></div>
                    </label>
                </div>
                <div class="color-skin-box" data-toggle="tooltip" data-original-title="Purple">
                    <label>
                        <input type="radio" name="setting-theme" value="purple">
                        <span class="color-check-icon"><i class="fa fa-check"></i></span>
                        <div class="color bg-purple"></div>
                        <div class="color-small bg-ebony"></div>
                    </label>
                </div>
                <div class="color-skin-box" data-toggle="tooltip" data-original-title="Orange">
                    <label>
                        <input type="radio" name="setting-theme" value="orange">
                        <span class="color-check-icon"><i class="fa fa-check"></i></span>
                        <div class="color bg-orange"></div>
                        <div class="color-small bg-ebony"></div>
                    </label>
                </div>
                <div class="color-skin-box" data-toggle="tooltip" data-original-title="Pink">
                    <label>
                        <input type="radio" name="setting-theme" value="pink">
                        <span class="color-check-icon"><i class="fa fa-check"></i></span>
                        <div class="color bg-pink"></div>
                        <div class="color-small bg-ebony"></div>
                    </label>
                </div>
            </div>
            <div class="d-flex">
                <div class="color-skin-box" data-toggle="tooltip" data-original-title="White">
                    <label>
                        <input type="radio" name="setting-theme" value="white">
                        <span class="color-check-icon"><i class="fa fa-check"></i></span>
                        <div class="color"></div>
                        <div class="color-small bg-silver-100"></div>
                    </label>
                </div>
                <div class="color-skin-box" data-toggle="tooltip" data-original-title="Blue light">
                    <label>
                        <input type="radio" name="setting-theme" value="blue-light">
                        <span class="color-check-icon"><i class="fa fa-check"></i></span>
                        <div class="color bg-blue"></div>
                        <div class="color-small bg-silver-100"></div>
                    </label>
                </div>
                <div class="color-skin-box" data-toggle="tooltip" data-original-title="Green light">
                    <label>
                        <input type="radio" name="setting-theme" value="green-light">
                        <span class="color-check-icon"><i class="fa fa-check"></i></span>
                        <div class="color bg-green"></div>
                        <div class="color-small bg-silver-100"></div>
                    </label>
                </div>
                <div class="color-skin-box" data-toggle="tooltip" data-original-title="Purple light">
                    <label>
                        <input type="radio" name="setting-theme" value="purple-light">
                        <span class="color-check-icon"><i class="fa fa-check"></i></span>
                        <div class="color bg-purple"></div>
                        <div class="color-small bg-silver-100"></div>
                    </label>
                </div>
                <div class="color-skin-box" data-toggle="tooltip" data-original-title="Orange light">
                    <label>
                        <input type="radio" name="setting-theme" value="orange-light">
                        <span class="color-check-icon"><i class="fa fa-check"></i></span>
                        <div class="color bg-orange"></div>
                        <div class="color-small bg-silver-100"></div>
                    </label>
                </div>
                <div class="color-skin-box" data-toggle="tooltip" data-original-title="Pink light">
                    <label>
                        <input type="radio" name="setting-theme" value="pink-light">
                        <span class="color-check-icon"><i class="fa fa-check"></i></span>
                        <div class="color bg-pink"></div>
                        <div class="color-small bg-silver-100"></div>
                    </label>
                </div>
            </div>
        </div>
    </div>
    <!-- END THEME CONFIG PANEL-->
    <!-- BEGIN PAGA BACKDROPS-->
    <div class="sidenav-backdrop backdrop"></div>
    <div class="preloader-backdrop">
        <div class="page-preloader">Loading</div>
    </div>
    <!-- END PAGA BACKDROPS-->
    <!-- CORE PLUGINS-->
    <script src="./assets/vendors/jquery/dist/jquery.min.js" type="text/javascript"></script>
    <script src="./assets/vendors/popper.js/dist/umd/popper.min.js" type="text/javascript"></script>
    <script src="./assets/vendors/bootstrap/dist/js/bootstrap.min.js" type="text/javascript"></script>
    <script src="./assets/vendors/metisMenu/dist/metisMenu.min.js" type="text/javascript"></script>
    <script src="./assets/vendors/jquery-slimscroll/jquery.slimscroll.min.js" type="text/javascript"></script>
    <!-- PAGE LEVEL PLUGINS-->
    <script src="./assets/vendors/chart.js/dist/Chart.min.js" type="text/javascript"></script>
    <script src="./assets/vendors/jvectormap/jquery-jvectormap-2.0.3.min.js" type="text/javascript"></script>
    <script src="./assets/vendors/jvectormap/jquery-jvectormap-world-mill-en.js" type="text/javascript"></script>
    <script src="./assets/vendors/jvectormap/jquery-jvectormap-us-aea-en.js" type="text/javascript"></script>
    <script src="./assets/vendors/moment/min/moment.min.js" type="text/javascript"></script>
    <script src="./assets/vendors/fullcalendar/dist/fullcalendar.min.js" type="text/javascript"></script>
    <script src="./assets/vendors/jquery-ui/jquery-ui.min.js" type="text/javascript"></script>
    
    <!-- CORE SCRIPTS-->
    <script src="assets/js/app.min.js" type="text/javascript"></script>
    <!-- PAGE LEVEL SCRIPTS-->
    <script src="./assets/js/scripts/dashboard_1_demo.js" type="text/javascript"></script>

    <script src="./assets/js/scripts/calendar-demo.js" type="text/javascript"></script>

    <script>
        function fetchSensorData() {
            fetch('/sensors_data') // Make an AJAX request to the new API
                .then(response => response.json())
                .then(data => {
                    // Update each sensor value and status
                    document.getElementById("temperature").innerHTML = `${data.temperature.value}Â°C`;
                    document.getElementById("temperature-status").innerText = data.temperature.status;
    
                    document.getElementById("humidity").innerHTML = `${data.humidity.value}%`;
                    document.getElementById("humidity-status").innerText = data.humidity.status;
    
                    document.getElementById("moisture").innerHTML = data.moisture.value;
                    document.getElementById("moisture-status").innerText = data.moisture.status;
    
                    document.getElementById("ph").innerHTML = data.ph.value;
                    document.getElementById("ph-status").innerText = data.ph.status;
                })
                .catch(error => console.error("Error fetching sensor data:", error));
        }
    
        // Refresh every 5 seconds
        setInterval(fetchSensorData, 10000);
    
        // Initial data load when the page first loads
        window.onload = fetchSensorData;
    </script>
    <script>
    // Store previous values for trend calculation
    let previousNPK = {
        nitrogen: 0,
        phosphorus: 0,
        potassium: 0
    };

    function formatDate(dateString) {
        if (!dateString) return 'Never';
        const options = { 
            year: 'numeric', 
            month: 'short', 
            day: 'numeric'
        };
        return new Date(dateString).toLocaleDateString(undefined, options);
    }

    function calculateTrend(current, previous) {
        if (!previous || previous === 0) return { change: 0, direction: 'neutral' };
        
        const change = ((current - previous) / previous) * 100;
        const absChange = Math.abs(change).toFixed(0);
        
        return {
            value: absChange,
            direction: change > 0 ? 'up' : change < 0 ? 'down' : 'neutral'
        };
    }

    function updateNPKUI(type, currentValue, previousValue, lastUpdated) {
        const element = document.getElementById(`npk-${type}`);
        const trendElement = document.getElementById(`${type}-trend`);
        
        // Update the value
        element.textContent = currentValue.toFixed(1);
        
        // Calculate trend
        const trend = calculateTrend(currentValue, previousValue);
        
        // Update trend indicator
        if (trend.direction === 'up') {
            trendElement.innerHTML = `<i class="fa fa-level-up"></i> +${trend.value}%`;
            trendElement.className = "text-success ml-2";
        } else if (trend.direction === 'down') {
            trendElement.innerHTML = `<i class="fa fa-level-down"></i> -${trend.value}%`;
            trendElement.className = "text-warning ml-2";
        } else {
            trendElement.innerHTML = `<i class="fa fa-minus"></i> 0%`;
            trendElement.className = "text-info ml-2";
        }
        
        // Update timestamp (only once)
        if (type === 'nitrogen' && lastUpdated) {
            document.getElementById('npk-last-update').textContent = `Last updated: ${formatDate(lastUpdated)}`;
        }
    }

    // Initialize when page loads
    window.addEventListener('DOMContentLoaded', () => {
        // Fetch last 2 records to calculate initial trends
        fetch('/npk-data')
            .then(response => response.json())
            .then(data => {
                // Store previous values
                previousNPK = {
                    nitrogen: data.previous.nitrogen,
                    phosphorus: data.previous.phosphorus,
                    potassium: data.previous.potassium
                };
                
                // Update UI with current values and trends
                updateNPKUI('nitrogen', data.current.nitrogen, data.previous.nitrogen, data.current.timestamp);
                updateNPKUI('phosphorus', data.current.phosphorus, data.previous.phosphorus);
                updateNPKUI('potassium', data.current.potassium, data.previous.potassium);
            })
            .catch(err => console.error('Error fetching initial NPK data:', err));
        
        // Set up real-time listener (keep your existing SSE implementation)
        setupNPKListener();
    });

    // Modified SSE handler to maintain trends
    function setupNPKListener() {
        const eventSource = new EventSource('/npk-updates');
        
        eventSource.onmessage = (event) => {
            try {
                const data = JSON.parse(event.data);
                
                // Update previous values with current values before updating
                const currentValues = {
                    nitrogen: previousNPK.nitrogen,
                    phosphorus: previousNPK.phosphorus,
                    potassium: previousNPK.potassium
                };
                
                // Update UI with new values compared to previous values
                updateNPKUI('nitrogen', data.nitrogen, currentValues.nitrogen, data.lastUpdated);
                updateNPKUI('phosphorus', data.phosphorus, currentValues.phosphorus);
                updateNPKUI('potassium', data.potassium, currentValues.potassium);
                
                // Store current values as previous for next update
                previousNPK = {
                    nitrogen: data.nitrogen,
                    phosphorus: data.phosphorus,
                    potassium: data.potassium
                };
            } catch (e) {
                console.error('Error processing NPK update:', e);
            }
        };
        
        eventSource.onerror = () => {
            console.log('SSE connection error. Attempting to reconnect...');
            eventSource.close();
            setTimeout(setupNPKListener, 5000);
        };
    }
</script>
   
</body>

</html>