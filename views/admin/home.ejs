<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>NetHouseAutomation Dashboard</title>
    <!-- Core CSS -->
    <link href="./assets/vendors/bootstrap/dist/css/bootstrap.min.css" rel="stylesheet" />
    <link href="./assets/vendors/font-awesome/css/font-awesome.min.css" rel="stylesheet" />
    <link href="./assets/vendors/themify-icons/css/themify-icons.css" rel="stylesheet" />
    <link href="assets/css/main.min.css" rel="stylesheet" />
    <!-- Additional CSS -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/weather-icons/2.0.10/css/weather-icons.min.css">
    <style>
        :root {
            --primary-color: #4CAF50;
            --secondary-color: #2196F3;
            --warning-color: #FFC107;
            --danger-color: #F44336;
            --success-color: #4CAF50;
            --text-color: #333;
            --light-bg: #f8f9fa;
            --card-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            --transition: all 0.3s ease;
            --border-radius: 15px;
            --container-padding: 20px;
        }

        body {
            background-color: #f5f7fa;
            color: var(--text-color);
        }

        /* Dashboard Card Styles */
        .dashboard-card {
            background: white;
            border-radius: var(--border-radius);
            box-shadow: var(--card-shadow);
            transition: var(--transition);
            margin-bottom: 20px;
            overflow: hidden;
            border: none;
        }

        .dashboard-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 8px 15px rgba(0, 0, 0, 0.15);
        }

        .dashboard-card .card-body {
            padding: var(--container-padding);
        }

        /* Sensor Value Styles */
        .sensor-value {
            font-size: 2.5rem;
            font-weight: bold;
            margin: 15px 0;
            color: var(--text-color);
        }

        .sensor-status {
            font-size: 0.9rem;
            padding: 6px 12px;
            border-radius: 20px;
            display: inline-block;
            font-weight: 500;
        }

        .status-normal { background-color: var(--success-color); color: white; }
        .status-warning { background-color: var(--warning-color); color: black; }
        .status-danger { background-color: var(--danger-color); color: white; }

        /* Ibox Styles */
        .ibox {
            background: white;
            border-radius: var(--border-radius);
            box-shadow: var(--card-shadow);
            margin-bottom: 20px;
            overflow: hidden;
            border: none;
        }

        .ibox-head {
            padding: var(--container-padding);
            border-bottom: 1px solid rgba(0,0,0,0.1);
            display: flex;
            justify-content: space-between;
            align-items: center;
            background: #f8f9fa;
        }

        .ibox-title {
            font-size: 1.2rem;
            font-weight: 600;
            color: var(--text-color);
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .ibox-body {
            padding: var(--container-padding);
        }

        /* Weather Card Styles */
        .weather-card {
            background: #4CAF50;
            color: white;
            border-radius: var(--border-radius);
            padding: var(--container-padding);
            margin-bottom: 20px;
            box-shadow: var(--card-shadow);
        }

        .weather-icon {
            font-size: 3.5rem;
            margin-bottom: 15px;
        }

        .weather-temp {
            font-size: 3rem;
            font-weight: bold;
            margin-bottom: 10px;
        }

        .weather-details {
            display: flex;
            justify-content: space-around;
            margin-top: 20px;
            padding-top: 20px;
            border-top: 1px solid rgba(255,255,255,0.2);
        }

        .weather-stat {
            text-align: center;
        }

        .weather-stat i {
            font-size: 1.8rem;
            margin-bottom: 8px;
        }

        /* Crop Management Styles */
        .crop-info-card {
            background: white;
            border-radius: var(--border-radius);
            padding: var(--container-padding);
            margin-bottom: 20px;
            box-shadow: var(--card-shadow);
        }

        .crop-header {
            margin-bottom: 20px;
            padding-bottom: 15px;
            border-bottom: 1px solid rgba(0,0,0,0.1);
        }

        .crop-name {
            font-size: 1.8rem;
            color: #2a7f62;
            margin-bottom: 10px;
        }

        .health-badge {
            display: inline-block;
            padding: 6px 15px;
            border-radius: 20px;
            font-size: 0.9rem;
            font-weight: 500;
            background: #e8f5e9;
            color: #2a7f62;
        }

        .stat-grid {
            display: grid;
            grid-template-columns: repeat(2, 1fr);
            gap: 20px;
        }

        .stat-item {
            background: white;
            padding: 20px;
            border-radius: 12px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.05);
            transition: var(--transition);
        }

        .stat-item:hover {
            transform: translateY(-3px);
            box-shadow: 0 4px 8px rgba(0,0,0,0.1);
        }

        .stat-icon {
            font-size: 1.8rem;
            color: #2a7f62;
            margin-bottom: 12px;
        }

        .stat-label {
            font-size: 0.9rem;
            color: #666;
            margin-bottom: 8px;
        }

        .stat-value {
            font-size: 1.4rem;
            font-weight: 600;
            color: var(--text-color);
        }

        /* Recommendations Styles */
        .recommendation-box {
            background: white;
            border-radius: var(--border-radius);
        }

        .recommendation-header {
            background: #2a7f62;
            color: white;
            padding: 15px 20px;
            border-radius: var(--border-radius) var(--border-radius) 0 0;
        }

        .recommendation-list {
            padding: 15px;
        }

        .crop-item {
            display: flex;
            align-items: center;
            padding: 15px;
            border-radius: 12px;
            margin-bottom: 12px;
            background: #f8f9fa;
            cursor: pointer;
            transition: var(--transition);
            border: 1px solid rgba(0,0,0,0.05);
        }

        .crop-item:hover {
            background: #e8f5e9;
            transform: translateX(5px);
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }

        .crop-rank {
            width: 35px;
            height: 35px;
            background: #2a7f62;
            color: white;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: bold;
            margin-right: 15px;
            flex-shrink: 0;
        }

        .crop-info {
            flex-grow: 1;
        }

        .crop-name {
            font-weight: 500;
            margin-bottom: 5px;
            color: #333;
            font-size: 1.1rem;
        }

        .crop-status {
            font-size: 0.8rem;
            padding: 3px 10px;
            border-radius: 12px;
            margin-left: 8px;
        }

        .crop-status.registered {
            background: #28a745;
            color: white;
        }

        .crop-status.new {
            background: #17a2b8;
            color: white;
        }

        .crop-match {
            display: flex;
            align-items: center;
            margin-top: 8px;
        }

        .match-bar {
            height: 6px;
            background: #2a7f62;
            border-radius: 3px;
            margin-right: 10px;
            width: 60px;
        }

        /* Irrigation Control Styles */
        .automation-toggle {
            background: #f8f9fa;
            border-radius: 12px;
            padding: 15px;
            margin-bottom: 20px;
        }

        .toggle-switch {
            position: relative;
            width: 60px;
            height: 34px;
        }

        .toggle-switch-checkbox {
            display: none;
        }

        .toggle-switch-label {
            display: block;
            overflow: hidden;
            cursor: pointer;
            border: 0 solid #bbb;
            border-radius: 20px;
            margin: 0;
        }

        .toggle-switch-inner {
            display: block;
            width: 200%;
            margin-left: -100%;
            transition: margin 0.3s ease-in 0s;
        }

        .toggle-switch-inner:before,
        .toggle-switch-inner:after {
            display: block;
            float: left;
            width: 50%;
            height: 34px;
            padding: 0;
            line-height: 34px;
            font-size: 14px;
            color: white;
            font-weight: bold;
            box-sizing: border-box;
        }

        .toggle-switch-inner:before {
            content: "";
            padding-left: 10px;
            background-color: #4CAF50;
            color: #fff;
        }

        .toggle-switch-inner:after {
            content: "";
            padding-right: 10px;
            background-color: #bbb;
            color: #fff;
            text-align: right;
        }

        .toggle-switch-switch {
            display: block;
            width: 24px;
            margin: 5px;
            background: #fff;
            position: absolute;
            top: 0;
            bottom: 0;
            right: 26px;
            border: 0 solid #bbb;
            border-radius: 20px;
            transition: all 0.3s ease-in 0s;
        }

        .toggle-switch-checkbox:checked + .toggle-switch-label .toggle-switch-inner {
            margin-left: 0;
        }

        .toggle-switch-checkbox:checked + .toggle-switch-label .toggle-switch-switch {
            right: 0px;
        }

        /* Button Styles */
        .btn-primary {
            background: #4CAF50;
            border: none;
            padding: 10px 20px;
            border-radius: 8px;
            font-weight: 500;
            transition: all 0.3s ease;
            color: white;
        }

        .btn-primary:hover {
            background: #43A047;
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(0,0,0,0.1);
        }

        .btn-primary:active {
            background: #388E3C;
            transform: translateY(0);
        }

        /* Responsive Styles */
        @media (max-width: 992px) {
            .col-lg-8, .col-lg-4 {
                margin-bottom: 20px;
            }

            .stat-grid {
                grid-template-columns: 1fr;
            }

            .sensor-value {
                font-size: 2rem;
            }

            .weather-temp {
                font-size: 2.5rem;
            }
        }

        @media (max-width: 768px) {
            .weather-details {
                flex-direction: column;
                gap: 15px;
            }

            .crop-item {
                flex-direction: column;
                text-align: center;
            }

            .crop-rank {
                margin: 0 auto 10px;
            }

            .crop-match {
                justify-content: center;
            }
        }
    </style>
</head>

<body class="fixed-navbar">
    <div class="page-wrapper">
        <!-- Header -->
        <header class="header">
            <div class="page-brand">
                <a class="link" href="/admin-home">
                    <span class="brand">NetHouse
                        <span class="brand-tip">AUTOMATION</span>
                    </span>
                    <span class="brand-mini">NHA</span>
                </a>
            </div>
            <div class="flexbox flex-1">
                <ul class="nav navbar-toolbar">
                    <li>
                        <a class="nav-link sidebar-toggler js-sidebar-toggler"><i class="ti-menu"></i></a>
                    </li>
                </ul>
                <ul class="nav navbar-toolbar">
                    <li>
                        <a class="nav-link" href="#" id="pendingUsersBtn">
                            <i class="fa fa-user-clock"></i>
                            <span class="badge badge-danger" id="pendingUsersCount" style="display: none;">0</span>
                        </a>
                    </li>
                    <li class="dropdown dropdown-user">
                        <a class="nav-link dropdown-toggle link" data-toggle="dropdown">
                            <img src="<%= user.profilePicture %>" />
                            <span></span><%= user.name %><i class="fa fa-angle-down m-l-5"></i>
                        </a>
                        <ul class="dropdown-menu dropdown-menu-right">
                            <a class="dropdown-item" href="/admin-profile"><i class="fa fa-user"></i>Profile</a>
                            <li class="dropdown-divider"></li>
                            <a class="dropdown-item" href="/logout"><i class="fa fa-power-off"></i>Logout</a>
                        </ul>
                    </li>
                </ul>
            </div>
        </header>

        <!-- Sidebar -->
        <nav class="page-sidebar" id="sidebar">
            <div id="sidebar-collapse">
                <div class="admin-block d-flex">
                    <div>
                        <img src="<%= user.profilePicture %>" width="45px" />
                    </div>
                    <div class="admin-info">
                        <div class="font-strong"><%= user.name %></div>
                        <small><%= user.role %></small>
                    </div>
                </div>
                <ul class="side-menu metismenu">
                    <li>
                        <a class="active" href="/admin-home">
                            <i class="sidebar-item-icon fas fa-tachometer-alt"></i>
                            <span class="nav-label">Dashboard</span>
                        </a>
                    </li>
                    <li>
                        <a href="/admin-plant-overview">
                            <i class="sidebar-item-icon fas fa-leaf"></i>
                            <span class="nav-label">Plant Overview</span>
                        </a>
                    </li>
                    <li>
                        <a href="/admin-irrigation-controll">
                            <i class="sidebar-item-icon fas fa-faucet"></i>
                            <span class="nav-label">Irrigation Control</span>
                        </a>
                    </li>
                    <li>
                        <a href="/admin-reports&analytics">
                            <i class="sidebar-item-icon fas fa-chart-bar"></i>
                            <span class="nav-label">Reports & Analytics</span>
                        </a>
                    </li>
                    <li>
                        <a href="/admin-user-management">
                            <i class="sidebar-item-icon fas fa-users-cog"></i>
                            <span class="nav-label">User Management</span>
                        </a>
                    </li>
                </ul>
            </div>
        </nav>

        <!-- Main Content -->
        <div class="content-wrapper">
            <div class="page-content fade-in-up">
                <!-- Sensor Cards -->
                <div class="row">
                    <div class="col-lg-3 col-md-6">
                        <div class="dashboard-card">
                            <div class="card-body text-center">
                                <i class="fas fa-thermometer-half fa-2x text-danger mb-3"></i>
                                <h3 class="sensor-value" id="temperature"><%= sensorData.temperature.value %>°C</h3>
                                <span class="sensor-status" id="temperature-status"><%= sensorData.temperature.status %></span>
                            </div>
                        </div>
                    </div>
                    <div class="col-lg-3 col-md-6">
                        <div class="dashboard-card">
                            <div class="card-body text-center">
                                <i class="fas fa-tint fa-2x text-info mb-3"></i>
                                <h3 class="sensor-value" id="humidity"><%= sensorData.humidity.value %>%</h3>
                                <span class="sensor-status" id="humidity-status"><%= sensorData.humidity.status %></span>
                            </div>
                        </div>
                    </div>
                    <div class="col-lg-3 col-md-6">
                        <div class="dashboard-card">
                            <div class="card-body text-center">
                                <i class="fas fa-water fa-2x text-warning mb-3"></i>
                                <h3 class="sensor-value" id="moisture"><%= sensorData.moisture.value %></h3>
                                <span class="sensor-status" id="moisture-status"><%= sensorData.moisture.status %></span>
                            </div>
                        </div>
                    </div>
                    <div class="col-lg-3 col-md-6">
                        <div class="dashboard-card">
                            <div class="card-body text-center">
                                <i class="fas fa-flask fa-2x text-success mb-3"></i>
                                <h3 class="sensor-value" id="ph"><%= sensorData.ph.value %></h3>
                                <span class="sensor-status" id="ph-status"><%= sensorData.ph.status %></span>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Main Content Section -->
                <div class="row">
                    <!-- Left Column -->
                    <div class="col-lg-8">
                        <!-- NPK Chart -->
                        <div class="ibox mb-4">
                            <div class="ibox-body">
                                <div class="flexbox mb-4">
                                    <div>
                                        <h3 class="m-0">Daily NPK Data</h3>
                                    </div>
                                    <div class="d-inline-flex">
                                        <div class="px-3" style="border-right: 1px solid rgba(0,0,0,.1);">
                                            <div class="text-muted">DAILY AVERAGE</div>
                                            <small id="npk-last-update">Last updated: Loading...</small>
                                        </div>
                                        <div class="px-3" style="border-right: 1px solid rgba(0,0,0,.1);">
                                            <div class="text-muted">NITROGEN (N)</div>
                                            <div>
                                                <span class="h2 m-0"><span id="npk-nitrogen">0.0</span></span>
                                                <span class="text-info ml-2" id="nitrogen-trend"><i class="fa fa-minus"></i> 0%</span>
                                            </div>
                                        </div>
                                        <div class="px-3" style="border-right: 1px solid rgba(0,0,0,.1);">
                                            <div class="text-muted">POTASSIUM (P)</div>
                                            <div>
                                                <span class="h2 m-0"><span id="npk-phosphorus">0.0</span></span>
                                                <span class="text-info ml-2" id="phosphorus-trend"><i class="fa fa-minus"></i> 0%</span>
                                            </div>
                                        </div>
                                        <div class="px-3">
                                            <div class="text-muted">PHOSPHORUS (K)</div>
                                            <div>
                                                <span class="h2 m-0"><span id="npk-potassium">0.0</span></span>
                                                <span class="text-info ml-2" id="potassium-trend"><i class="fa fa-minus"></i> 0%</span>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div>
                                    <script src="/socket.io/socket.io.js"></script>
                                    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
                                    <div style="position: relative; height: 400px; width: 100%; padding: 20px;">
                                        <canvas id="sensorChart"></canvas>
                                    </div>
                                    <script>
                                        document.addEventListener('DOMContentLoaded', function() {
                                            const socket = io(); 
                                        
                                            // Get canvas context
                                            const ctx = document.getElementById('sensorChart');
                                            if (!ctx) {
                                                console.error('Canvas element not found');
                                                return;
                                            }

                                            // Function to update NPK averages display
                                            function updateNPKAverages(data) {
                                                document.getElementById('npk-nitrogen').textContent = data.nitrogen.toFixed(1);
                                                document.getElementById('npk-phosphorus').textContent = data.phosphorus.toFixed(1);
                                                document.getElementById('npk-potassium').textContent = data.potassium.toFixed(1);
                                                document.getElementById('npk-last-update').textContent = `Last updated: ${new Date().toLocaleTimeString()}`;
                                            }
                                        
                                            const sensorChart = new Chart(ctx.getContext('2d'), {
                                                type: 'line',
                                                data: {
                                                    labels: [],
                                                    datasets: [
                                                        { 
                                                            label: 'Nitrogen (N)', 
                                                            data: [], 
                                                            borderColor: '#4BC0C0',
                                                            backgroundColor: 'rgba(75, 192, 192, 0.1)',
                                                            borderWidth: 2,
                                                            pointRadius: 4,
                                                            tension: 0.1
                                                        },
                                                        { 
                                                            label: 'Phosphorus (P)', 
                                                            data: [], 
                                                            borderColor: '#FFCE56',
                                                            backgroundColor: 'rgba(255, 206, 86, 0.1)',
                                                            borderWidth: 2,
                                                            pointRadius: 4,
                                                            tension: 0.1
                                                        },
                                                        { 
                                                            label: 'Potassium (K)', 
                                                            data: [], 
                                                            borderColor: '#FF9F40',
                                                            backgroundColor: 'rgba(255, 159, 64, 0.1)',
                                                            borderWidth: 2,
                                                            pointRadius: 4,
                                                            tension: 0.1
                                                        }
                                                    ]
                                                },
                                                options: {
                                                    responsive: true,
                                                    maintainAspectRatio: false,
                                                    scales: {
                                                        x: {
                                                            title: { display: true, text: 'Time' },
                                                            ticks: {
                                                                callback: function(value) {
                                                                    return value;
                                                                }
                                                            }
                                                        },
                                                        y: {
                                                            title: { display: true, text: 'NPK Values (ppm)' },
                                                            min: 0,
                                                            max: 50
                                                        }
                                                    },
                                                    plugins: {
                                                        legend: {
                                                            position: 'top'
                                                        }
                                                    }
                                                }
                                            });

                                            // Function to fetch NPK data
                                            async function fetchNPKData() {
                                                try {
                                                    const response = await fetch('/npk-data');
                                                    const data = await response.json();
                                                    
                                                    if (data.current) {
                                                        updateNPKAverages(data.current);
                                                        
                                                        // Update trends if we have previous data
                                                        if (data.previous) {
                                                            updateTrend('nitrogen', data.current.nitrogen, data.previous.nitrogen);
                                                            updateTrend('phosphorus', data.current.phosphorus, data.previous.phosphorus);
                                                            updateTrend('potassium', data.current.potassium, data.previous.potassium);
                                                        }
                                                    }
                                                } catch (error) {
                                                    console.error('Error fetching NPK data:', error);
                                                }
                                            }

                                            // Function to update trend indicators
                                            function updateTrend(element, current, previous) {
                                                const trendElement = document.getElementById(`${element}-trend`);
                                                if (!trendElement) return;

                                                const change = ((current - previous) / previous) * 100;
                                                const trendIcon = change > 0 ? 'fa-arrow-up' : change < 0 ? 'fa-arrow-down' : 'fa-minus';
                                                const trendColor = change > 0 ? 'text-success' : change < 0 ? 'text-danger' : 'text-info';
                                                
                                                trendElement.innerHTML = `<i class="fa ${trendIcon}"></i> ${Math.abs(change).toFixed(1)}%`;
                                                trendElement.className = `ml-2 ${trendColor}`;
                                            }
                                        
                                            // Load initial data
                                            fetch('/sensors/history')
                                                .then(res => res.json())
                                                .then(data => {
                                                    data.forEach(reading => {
                                                        updateChart(reading.timestamp, reading);
                                                    });
                                                })
                                                .catch(err => {
                                                    console.error('Error loading initial data:', err);
                                                });
                                        
                                            // Initial NPK data fetch
                                            fetchNPKData();
                                        
                                            // Real-time updates
                                            socket.on('sensor_update', (data) => {
                                                updateChart(data.timestamp, data);
                                            });

                                            // Set up SSE for NPK updates
                                            const npkEventSource = new EventSource('/npk-updates');
                                            npkEventSource.onmessage = function(event) {
                                                const data = JSON.parse(event.data);
                                                updateNPKAverages(data);
                                            };
                                        
                                            function updateChart(timestamp, data) {
                                                const timeLabel = new Date(timestamp).toLocaleTimeString();
                                        
                                                sensorChart.data.labels.push(timeLabel);
                                                sensorChart.data.datasets[0].data.push(data.nitrogen);
                                                sensorChart.data.datasets[1].data.push(data.phosphorus);
                                                sensorChart.data.datasets[2].data.push(data.potassium);
                                        
                                                if (sensorChart.data.labels.length > 100) {
                                                    sensorChart.data.labels.shift();
                                                    sensorChart.data.datasets.forEach(dataset => dataset.data.shift());
                                                }
                                        
                                                sensorChart.update();
                                            }

                                            // Refresh NPK data every 5 minutes
                                            setInterval(fetchNPKData, 300000);
                                        });
                                    </script>
                                </div>
                            </div>
                        </div>

                        <!-- Crop Management -->
                        <div class="ibox">
                            <div class="ibox-head">
                                <div class="ibox-title">
                                    <i class="fas fa-leaf mr-2"></i>Crop Management
                                </div>
                            </div>
                            <div class="ibox-body">
                                <% if (!cropData) { %>
                                    <div class="text-center py-5">
                                        <i class="fas fa-seedling fa-4x text-muted mb-3"></i>
                                        <h3 class="mb-3">No Crop Planted</h3>
                                        <p class="text-muted mb-4">Start your farming journey by planting a new crop</p>
                                        <a href="/admin-plant-overview" class="btn btn-primary btn-lg">
                                            <i class="fas fa-arrow-right mr-2"></i>Go to Plant Overview
                                        </a>
                                    </div>
                                <% } else { %>
                                    <!-- Current Crop Info -->
                                    <div class="crop-info-card mb-4">
                                        <div class="crop-header">
                                            <div class="d-flex align-items-center">
                                                <i class="fas fa-seedling fa-2x text-success mr-3"></i>
                                                <div>
                                                    <h2 class="crop-name mb-1" id="crop-name">
                                                        <%= cropData.name %>
                                                    </h2>
                                                    <span class="health-badge" id="health-badge">
                                                        <%= cropData.healthStatus %>
                                                    </span>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="stat-grid">
                                            <div class="stat-item">
                                                <i class="fas fa-calendar-alt stat-icon"></i>
                                                <div class="stat-label">Planting Date</div>
                                                <div class="stat-value" id="planting-date">
                                                    <%= new Date(cropData.plantingDate).toLocaleDateString() %>
                                                </div>
                                            </div>
                                            <div class="stat-item">
                                                <i class="fas fa-clock stat-icon"></i>
                                                <div class="stat-label">Growth Stage</div>
                                                <div class="stat-value" id="growth-stage">
                                                    <%= cropData.growthStage %>
                                                </div>
                                            </div>
                                            <div class="stat-item">
                                                <i class="fas fa-leaf stat-icon"></i>
                                                <div class="stat-label">Health Status</div>
                                                <div class="stat-value" id="health-status">
                                                    <%= cropData.healthStatus %>
                                                </div>
                                            </div>
                                            <div class="stat-item">
                                                <i class="fas fa-chart-line stat-icon"></i>
                                                <div class="stat-label">Health Score</div>
                                                <div class="stat-value" id="health-score">
                                                    <%= cropData.score %>% 
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    
                                    <!-- Disease Prevention Section -->
                                    <div class="crop-info-card mb-4">
                                        <h4 class="section-title">
                                            <i class="fas fa-shield-virus mr-2"></i>Disease Prevention
                                        </h4>
                                        <div class="disease-list">
                                            <% if (cropData.diseases) { %>
                                                <% cropData.diseases.forEach(disease => { %>
                                                    <div class="disease-item">
                                                        <div class="disease-header">
                                                            <i class="fas fa-exclamation-triangle text-warning"></i>
                                                            <span class="disease-name"><%= disease.name %></span>
                                                        </div>
                                                        <div class="disease-info">
                                                            <p class="disease-description"><%= disease.description %></p>
                                                            <div class="prevention-methods">
                                                                <strong>Prevention:</strong>
                                                                <ul>
                                                                    <% disease.prevention.forEach(method => { %>
                                                                        <li><%= method %></li>
                                                                    <% }); %>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                <% }); %>
                                            <% } else { %>
                                                <div class="text-center py-3 text-muted">
                                                    <i class="fas fa-check-circle fa-2x mb-2"></i>
                                                    <p>No disease threats detected</p>
                                                </div>
                                            <% } %>
                                        </div>
                                    </div>
                                    
                                    <!-- Chemical Fertilizers Section -->
                                    <div class="crop-info-card">
                                        <h4 class="section-title">
                                            <i class="fas fa-flask mr-2"></i>Recommended Fertilizers
                                        </h4>
                                        <div class="fertilizer-list">
                                            <% if (cropData.fertilizers) { %>
                                                <% cropData.fertilizers.forEach(fertilizer => { %>
                                                    <div class="fertilizer-item">
                                                        <div class="fertilizer-header">
                                                            <i class="fas fa-leaf text-success"></i>
                                                            <span class="fertilizer-name"><%= fertilizer.name %></span>
                                                            <span class="fertilizer-type <%= fertilizer.type.toLowerCase() %>">
                                                                <%= fertilizer.type %>
                                                            </span>
                                                        </div>
                                                        <div class="fertilizer-info">
                                                            <p class="fertilizer-description"><%= fertilizer.description %></p>
                                                            <div class="application-info">
                                                                <strong>Application:</strong>
                                                                <ul>
                                                                    <% fertilizer.application.forEach(step => { %>
                                                                        <li><%= step %></li>
                                                                    <% }); %>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                <% }); %>
                                            <% } else { %>
                                                <div class="text-center py-3 text-muted">
                                                    <i class="fas fa-info-circle fa-2x mb-2"></i>
                                                    <p>No fertilizer recommendations available</p>
                                                </div>
                                            <% } %>
                                        </div>
                                    </div>
                                <% } %>
                            </div>
                        </div>
                    </div>

                    <!-- Right Column -->
                    <div class="col-lg-4">
                        <!-- Weather Card -->
                        <div class="weather-card mb-4">
                            <div class="text-center">
                                <i class="wi wi-day-sunny weather-icon"></i>
                                <div class="weather-temp" id="weather-temp">--°C</div>
                                <div class="weather-desc" id="weather-desc">Loading weather...</div>
                            </div>
                            <div class="weather-details">
                                <div class="weather-stat">
                                    <i class="wi wi-humidity"></i>
                                    <div id="weather-humidity">--%</div>
                                </div>
                                <div class="weather-stat">
                                    <i class="wi wi-strong-wind"></i>
                                    <div id="weather-wind">-- km/h</div>
                                </div>
                            </div>
                        </div>

                        <!-- Crop Recommendations -->
                        <div class="ibox mb-4">
                            <div class="ibox-head">
                                <div class="ibox-title">
                                    <i class="fas fa-lightbulb mr-2"></i>Crop Recommendations
                                </div>
                            </div>
                            <div class="ibox-body p-0">
                                <div class="recommendation-box">
                                    <div class="recommendation-list" id="recommended-crops-list">
                                        <% if (recommendations && recommendations.length > 0) { %>
                                            <% recommendations.forEach((crop, index) => { %>
                                                <div class="crop-item" 
                                                     data-crop-name="<%= crop.name %>"
                                                     data-crop-score="<%= (crop.score || crop.ruleBasedScore || 0) %>"
                                                     data-crop-status="<%= crop.isRegistered ? 'Registered' : 'New' %>">
                                                    <div class="crop-rank"><%= index + 1 %></div>
                                                    <div class="crop-info">
                                                        <div class="crop-name">
                                                            <%= crop.name %>
                                                            <span class="crop-status <%= crop.isRegistered ? 'registered' : 'new' %>">
                                                                <%= crop.isRegistered ? 'Registered' : 'New' %>
                                                            </span>
                                                        </div>
                                                        <div class="crop-match">
                                                            <div class="match-bar" style="width: <%= (crop.score || crop.ruleBasedScore || 0) %>%"></div>
                                                            <span><%= Math.round(crop.score || crop.ruleBasedScore || 0) %>% Match</span>
                                                        </div>
                                                    </div>
                                                    <div class="crop-select">
                                                        <i class="fas fa-chevron-right"></i>
                                                    </div>
                                                </div>
                                            <% }); %>
                                        <% } else { %>
                                            <div class="text-center py-4">
                                                <i class="fas fa-info-circle fa-2x text-muted mb-2"></i>
                                                <p class="mb-0">No crop recommendations available</p>
                                            </div>
                                        <% } %>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Irrigation Control -->
                        <div class="ibox">
                            <div class="ibox-head">
                                <div class="ibox-title">Irrigation Control</div>
                            </div>
                            <div class="ibox-body">
                                <!-- Automation Mode Toggle -->
                                <div class="automation-toggle mb-4">
                                    <div class="d-flex align-items-center justify-content-between p-3 bg-light rounded">
                                        <div class="d-flex align-items-center">
                                            <i class="fas fa-robot mr-3 text-primary"></i>
                                            <div>
                                                <h5 class="mb-0">Automation Mode</h5>
                                                <small class="text-muted">Enable/disable automatic irrigation</small>
                                            </div>
                                        </div>
                                        <div class="toggle-switch">
                                            <input type="checkbox" id="autoModeSwitch" class="toggle-switch-checkbox" checked>
                                            <label class="toggle-switch-label" for="autoModeSwitch">
                                                <span class="toggle-switch-inner"></span>
                                                <span class="toggle-switch-switch"></span>
                                            </label>
                                        </div>
                                    </div>
                                </div>

                                <!-- Next Irrigation Section -->
                                <div class="next-irrigation">
                                    <h5 class="mb-3">Next Irrigation</h5>
                                    <!-- Running Irrigation Status -->
                                    <div id="runningIrrigationStatus" class="alert alert-info mb-3" style="display: none;">
                                        <div class="d-flex align-items-center">
                                            <i class="fas fa-tint fa-spin mr-2"></i>
                                            <div>
                                                <strong id="runningIrrigationType"></strong>
                                                <div id="runningIrrigationDetails" class="small"></div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="text-center" id="nextIrrigationInfo">
                                        <div class="time-value" id="nextIrrigationTime">--:--</div>
                                        <div class="time-label" id="nextIrrigationDate">Loading...</div>
                                        <div class="progress mt-3">
                                            <div class="progress-bar bg-primary" role="progressbar" id="nextIrrigationProgress" style="width: 0%"></div>
                                        </div>
                                        <div class="mt-2">
                                            <small class="text-muted" id="nextIrrigationStatus">Calculating next irrigation...</small>
                                        </div>
                                    </div>
                                </div>

                                <!-- Control Button -->
                                <div class="text-center mt-4">
                                    <a href="/admin-irrigation-controll" class="btn btn-primary btn-lg btn-block">
                                        <i class="fas fa-faucet mr-2"></i>
                                        Go to Irrigation Control
                                    </a>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <!-- Pending Users Modal -->
<div class="modal fade" id="pendingUsersModal" tabindex="-1" role="dialog" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Pending Users</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div id="pendingUsersList">
                    <!-- Pending users will be loaded here -->
                </div>
            </div>
        </div>
    </div>
</div>

            <!-- Footer -->
            <footer class="page-footer">
                <div class="font-13">2025 © <b>NetHouseAutomation</b> - All rights reserved.</div>
                <div class="to-top"><i class="fa fa-angle-double-up"></i></div>
            </footer>
        </div>
    </div>

    <!-- Core Scripts -->
    <script src="./assets/vendors/jquery/dist/jquery.min.js"></script>
    <script src="./assets/vendors/popper.js/dist/umd/popper.min.js"></script>
    <script src="./assets/vendors/bootstrap/dist/js/bootstrap.min.js"></script>
    <script src="./assets/vendors/metisMenu/dist/metisMenu.min.js"></script>
    <script src="./assets/vendors/jquery-slimscroll/jquery.slimscroll.min.js"></script>
    <script src="./assets/vendors/chart.js/dist/Chart.min.js"></script>
    <script src="assets/js/app.min.js"></script>

    <script>
        function toggleAutomationMode(isEnabled) {
            fetch('/api/toggle-automation', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ enabled: isEnabled })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    console.log('Automation mode updated successfully');
                } else {
                    console.error('Failed to update automation mode');
                }
            })
            .catch(error => {
                console.error('Error updating automation mode:', error);
            });
        }

        // Add event listener for automation switch
        document.getElementById('autoModeSwitch').addEventListener('change', function(e) {
            toggleAutomationMode(e.target.checked);
        });

        // Initialize automation state
        function initializeAutomationState() {
            fetch('/api/automation-state')
                .then(response => response.json())
                .then(data => {
                    document.getElementById('autoModeSwitch').checked = data.enabled;
                })
                .catch(error => {
                    console.error('Error fetching automation state:', error);
                });
        }

        // Calapan City Coordinates
        const CALAPAN_LAT = 13.4125;
        const CALAPAN_LON = 121.1803;
        
        // Weather Functions
        async function fetchWeather() {
            try {
                const response = await fetch(
                    `https://api.open-meteo.com/v1/forecast?latitude=${CALAPAN_LAT}&longitude=${CALAPAN_LON}&current=temperature_2m,relative_humidity_2m,wind_speed_10m,weather_code&timezone=auto`
                );
                const data = await response.json();
                
                if (data.current) {
                    const weather = getWeatherDetails(data.current.weather_code);
                    
                    document.getElementById('weather-temp').textContent = `${Math.round(data.current.temperature_2m)}°C`;
                    document.getElementById('weather-desc').textContent = weather.description;
                    document.querySelector('.weather-icon').className = `wi ${weather.icon} weather-icon`;
                    document.getElementById('weather-humidity').textContent = `${data.current.relative_humidity_2m}%`;
                    document.getElementById('weather-wind').textContent = `${Math.round(data.current.wind_speed_10m)} km/h`;
                    
                    // Update weather card color based on conditions
                    updateWeatherCardStyle(data.current.weather_code);
                }
            } catch (error) {
                console.error("Weather fetch error:", error);
                document.getElementById('weather-desc').textContent = "Weather data unavailable";
            }
        }
        
        // Update weather card style based on conditions
        function updateWeatherCardStyle(weatherCode) {
            const card = document.querySelector('.weather-card');
            let gradient;
            
            if (weatherCode >= 200 && weatherCode < 300) {
                gradient = 'linear-gradient(135deg, #2c3e50 0%, #4ca1af 100%)';
            } else if (weatherCode >= 300 && weatherCode < 600) {
                gradient = 'linear-gradient(135deg, #757f9a 0%, #d7dde8 100%)';
            } else if (weatherCode >= 600 && weatherCode < 700) {
                gradient = 'linear-gradient(135deg, #83a4d4 0%, #b6fbff 100%)';
            } else if (weatherCode === 800) {
                gradient = 'linear-gradient(135deg, #56ccf2 0%, #2f80ed 100%)';
            } else {
                gradient = 'linear-gradient(135deg, #4CAF50 0%, #2196F3 100%)';
            }
            
            card.style.background = gradient;
        }
        
        // Weather code mapping (WMO codes)
        function getWeatherDetails(code) {
            const weatherMap = {
                0: { description: "Clear sky", icon: "wi-day-sunny" },
                1: { description: "Mainly clear", icon: "wi-day-cloudy" },
                2: { description: "Partly cloudy", icon: "wi-cloud" },
                3: { description: "Overcast", icon: "wi-cloudy" },
                45: { description: "Fog", icon: "wi-fog" },
                48: { description: "Freezing fog", icon: "wi-fog" },
                51: { description: "Light drizzle", icon: "wi-sprinkle" },
                53: { description: "Moderate drizzle", icon: "wi-sprinkle" },
                55: { description: "Heavy drizzle", icon: "wi-sprinkle" },
                61: { description: "Light rain", icon: "wi-rain" },
                63: { description: "Moderate rain", icon: "wi-rain" },
                65: { description: "Heavy rain", icon: "wi-rain" },
                80: { description: "Light showers", icon: "wi-showers" },
                81: { description: "Moderate showers", icon: "wi-showers" },
                82: { description: "Heavy showers", icon: "wi-showers" },
                95: { description: "Thunderstorm", icon: "wi-thunderstorm" },
                96: { description: "Thunderstorm with hail", icon: "wi-storm-showers" },
                99: { description: "Heavy thunderstorm", icon: "wi-storm-showers" }
            };
            
            return weatherMap[code] || { description: "Unknown", icon: "wi-cloud" };
        }
        
        // Initialize weather when page loads
        window.addEventListener('DOMContentLoaded', () => {
            fetchWeather();
            // Update weather every 30 minutes
            setInterval(fetchWeather, 1800000);
        });

        // Existing sensor data fetch function
        function fetchSensorData() {
            fetch('/sensors_data')
                .then(response => response.json())
                .then(data => {
                    document.getElementById("temperature").innerHTML = `${data.temperature.value}°C`;
                    document.getElementById("temperature-status").innerText = data.temperature.status;
    
                    document.getElementById("humidity").innerHTML = `${data.humidity.value}%`;
                    document.getElementById("humidity-status").innerText = data.humidity.status;
    
                    document.getElementById("moisture").innerHTML = data.moisture.value;
                    document.getElementById("moisture-status").innerText = data.moisture.status;
    
                    document.getElementById("ph").innerHTML = data.ph.value;
                    document.getElementById("ph-status").innerText = data.ph.status;
                })
                .catch(error => console.error("Error fetching sensor data:", error));
        }
    
        // Refresh sensor data every 10 seconds
        setInterval(fetchSensorData, 10000);
    
        // Initial data load
        window.onload = fetchSensorData;
    </script>

    <!-- Add these scripts before the closing body tag -->
    <script>
        // Function to format time remaining
        function formatTimeRemaining(milliseconds) {
            const seconds = Math.floor(milliseconds / 1000);
            const minutes = Math.floor(seconds / 60);
            const hours = Math.floor(minutes / 60);
            
            if (hours > 0) {
                return `${hours}h ${minutes % 60}m remaining`;
            } else if (minutes > 0) {
                return `${minutes}m ${seconds % 60}s remaining`;
            } else {
                return `${seconds}s remaining`;
            }
        }

        // Function to format date and time
        function formatDateTime(date) {
            if (!date) return 'N/A';
            return new Date(date).toLocaleString('en-US', {
                year: 'numeric',
                month: 'short',
                day: 'numeric',
                hour: '2-digit',
                minute: '2-digit'
            });
        }

        // Function to update next irrigation display
        async function updateNextIrrigation() {
            try {
                const response = await fetch('/api/irrigation-schedules');
                const data = await response.json();
                
                if (data.success && data.schedules.length > 0) {
                    const now = new Date();
                    let nextSchedule = null;
                    let minTimeDiff = Infinity;

                    // Find the next active schedule
                    data.schedules.forEach(schedule => {
                        if (schedule.isActive) {
                            const [hours, minutes] = schedule.time.split(':').map(Number);
                            const scheduleTime = new Date(now);
                            scheduleTime.setHours(hours, minutes, 0, 0);

                            // If the time has passed today, check for next occurrence
                            if (scheduleTime <= now) {
                                scheduleTime.setDate(scheduleTime.getDate() + 1);
                            }

                            // Find the next scheduled day
                            let daysToAdd = 0;
                            const currentDay = scheduleTime.getDay();
                            
                            // If today is not a scheduled day, find the next scheduled day
                            if (!schedule.days.includes(currentDay)) {
                                // Look for the next scheduled day within the next 7 days
                                for (let i = 1; i <= 7; i++) {
                                    const nextDay = (currentDay + i) % 7;
                                    if (schedule.days.includes(nextDay)) {
                                        daysToAdd = i;
                                        break;
                                    }
                                }
                                scheduleTime.setDate(scheduleTime.getDate() + daysToAdd);
                            }

                            const timeDiff = scheduleTime - now;
                            if (timeDiff < minTimeDiff) {
                                minTimeDiff = timeDiff;
                                nextSchedule = {
                                    time: schedule.time,
                                    nextOccurrence: scheduleTime,
                                    days: schedule.days
                                };
                            }
                        }
                    });

                    if (nextSchedule) {
                        // Format the days
                        const dayNames = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
                        const scheduledDays = nextSchedule.days.map(day => dayNames[day]).join(', ');

                        // Update the display
                        document.getElementById('nextIrrigationTime').textContent = nextSchedule.time;
                        document.getElementById('nextIrrigationDate').textContent = 
                            `${nextSchedule.nextOccurrence.toLocaleDateString('en-US', { 
                                weekday: 'long', 
                                month: 'short', 
                                day: 'numeric' 
                            })} (${scheduledDays})`;

                        // Calculate progress (assuming 24-hour cycle)
                        const totalTime = 24 * 60 * 60 * 1000; // 24 hours in milliseconds
                        const timeUntilNext = nextSchedule.nextOccurrence - now;
                        const progress = ((totalTime - timeUntilNext) / totalTime) * 100;
                        
                        document.getElementById('nextIrrigationProgress').style.width = `${progress}%`;
                        document.getElementById('nextIrrigationStatus').textContent = formatTimeRemaining(timeUntilNext);
                    } else {
                        // No active schedules
                        document.getElementById('nextIrrigationTime').textContent = '--:--';
                        document.getElementById('nextIrrigationDate').textContent = 'No active schedules';
                        document.getElementById('nextIrrigationProgress').style.width = '0%';
                        document.getElementById('nextIrrigationStatus').textContent = 'No upcoming irrigation';
                    }
                } else {
                    // No schedules found
                    document.getElementById('nextIrrigationTime').textContent = '--:--';
                    document.getElementById('nextIrrigationDate').textContent = 'No schedules';
                    document.getElementById('nextIrrigationProgress').style.width = '0%';
                    document.getElementById('nextIrrigationStatus').textContent = 'No upcoming irrigation';
                }
            } catch (error) {
                console.error('Error updating next irrigation:', error);
                document.getElementById('nextIrrigationTime').textContent = '--:--';
                document.getElementById('nextIrrigationDate').textContent = 'Error';
                document.getElementById('nextIrrigationProgress').style.width = '0%';
                document.getElementById('nextIrrigationStatus').textContent = 'Failed to load schedule';
            }
        }

        // Function to update running irrigation status
        function updateRunningIrrigationStatus(record) {
            const statusDiv = document.getElementById('runningIrrigationStatus');
            const typeSpan = document.getElementById('runningIrrigationType');
            const detailsDiv = document.getElementById('runningIrrigationDetails');
            const nextIrrigationInfo = document.getElementById('nextIrrigationInfo');
            
            if (record && record.status === 'in_progress') {
                // Show the status div
                statusDiv.style.display = 'block';
                
                // Determine irrigation type and details based on the note field
                let type = '';
                let details = '';
                
                // Check the note field to determine the type of irrigation
                if (record.note && record.note.toLowerCase().includes('automated')) {
                    type = 'Automation Irrigation';
                    details = `Started at ${formatDateTime(record.startTime)}`;
                    statusDiv.className = 'alert alert-primary mb-3';
                } else if (record.note && record.note.toLowerCase().includes('manual')) {
                    type = 'Manual Irrigation';
                    details = `Duration: ${record.duration} minutes | Started at ${formatDateTime(record.startTime)}`;
                    statusDiv.className = 'alert alert-success mb-3';
                } else if (record.note && record.note.toLowerCase().includes('scheduled')) {
                    type = 'Schedule Irrigation';
                    details = `Duration: ${record.duration} minutes | Started at ${formatDateTime(record.startTime)}`;
                    statusDiv.className = 'alert alert-info mb-3';
                } else {
                    // Default case if note doesn't match any known type
                    type = 'Irrigation Running';
                    details = `Started at ${formatDateTime(record.startTime)}`;
                    statusDiv.className = 'alert alert-secondary mb-3';
                }
                
                typeSpan.textContent = type;
                detailsDiv.textContent = details;
                
                // Hide next irrigation info and show running status
                nextIrrigationInfo.style.display = 'none';
                
                // Update the time-value and time-label with running status
                document.getElementById('nextIrrigationTime').textContent = type;
                document.getElementById('nextIrrigationDate').textContent = details;
                document.getElementById('nextIrrigationProgress').style.width = '100%';
                document.getElementById('nextIrrigationStatus').textContent = 'Irrigation in Progress';
            } else {
                // Hide the status div if no irrigation is running
                statusDiv.style.display = 'none';
                
                // Show next irrigation info
                nextIrrigationInfo.style.display = 'block';
                
                // Update next irrigation information
                updateNextIrrigation();
            }
        }

        // Function to check for running irrigation
        async function checkRunningIrrigation() {
            try {
                const response = await fetch('/api/irrigation-history?page=1');
                const data = await response.json();
                
                if (data.success && data.records.length > 0) {
                    // Check if the most recent record is still running
                    const latestRecord = data.records[0];
                    if (latestRecord.status === 'in_progress') {
                        updateRunningIrrigationStatus(latestRecord);
                    }
                }
            } catch (error) {
                console.error('Error checking running irrigation:', error);
            }
        }

        // Initialize Socket.IO connection and handle real-time updates
        document.addEventListener('DOMContentLoaded', function() {
            // Initialize Socket.IO connection
            const socket = io();
            
            // Listen for irrigation record updates
            socket.on('irrigationRecordUpdate', (record) => {
                // Update running irrigation status
                updateRunningIrrigationStatus(record);
            });
            
            // Initial check for running irrigation
            checkRunningIrrigation();
            
            // Update next irrigation every minute
            updateNextIrrigation();
            setInterval(updateNextIrrigation, 60000);
        });
    </script>

    <script>
        // Function to show crop details
        function showCropDetails(name, score, status) {
            // Create and show a modal with crop details
            const modal = document.createElement('div');
            modal.className = 'modal fade';
            modal.id = 'cropDetailsModal';
            modal.innerHTML = `
                <div class="modal-dialog">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title">${name}</h5>
                            <button type="button" class="close" data-dismiss="modal">&times;</button>
                        </div>
                        <div class="modal-body">
                            <div class="crop-details">
                                <p><strong>Match Score:</strong> ${score}%</p>
                                <p><strong>Status:</strong> ${status}</p>
                            </div>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                            <button type="button" class="btn btn-primary" onclick="plantCrop('${name}')">Plant This Crop</button>
                        </div>
                    </div>
                </div>
            `;
            document.body.appendChild(modal);
            $(modal).modal('show');
            
            // Clean up modal when hidden
            $(modal).on('hidden.bs.modal', function () {
                document.body.removeChild(modal);
            });
        }

        // Function to handle planting a crop
        function plantCrop(cropName) {
            // Add your planting logic here
            console.log('Planting crop:', cropName);
            // You can add an API call here to handle the planting process
        }

        // Add event listeners for crop items
        document.addEventListener('DOMContentLoaded', function() {
            document.addEventListener('click', function(e) {
                if (e.target.closest('.crop-item')) {
                    const cropItem = e.target.closest('.crop-item');
                    const name = cropItem.dataset.cropName;
                    const score = cropItem.dataset.cropScore;
                    const status = cropItem.dataset.cropStatus;
                    showCropDetails(name, score, status);
                }
            });
        });
    </script>


<script>
document.addEventListener('DOMContentLoaded', function() {
    // Load pending users count
    loadPendingUsersCount();

    // Handle pending users button click
    document.getElementById('pendingUsersBtn').addEventListener('click', function(e) {
        e.preventDefault();
        loadPendingUsers();
        $('#pendingUsersModal').modal('show');
    });

    // Function to load pending users count
    async function loadPendingUsersCount() {
        try {
            const response = await fetch('/api/users/pending/count');
            const data = await response.json();
            if (data.success) {
                const countBadge = document.getElementById('pendingUsersCount');
                if (data.count > 0) {
                    countBadge.textContent = data.count;
                    countBadge.style.display = 'inline';
                } else {
                    countBadge.style.display = 'none';
                }
            }
        } catch (error) {
            console.error('Error loading pending users count:', error);
        }
    }

    // Function to load pending users
    async function loadPendingUsers() {
        try {
            const response = await fetch('/api/users/pending');
            const data = await response.json();

            if (data.success) {
                const pendingUsersList = document.getElementById('pendingUsersList');
                pendingUsersList.innerHTML = '';

                if (!data.users || data.users.length === 0) {
                    pendingUsersList.innerHTML = '<div class="alert alert-info">No pending users found.</div>';
                    return;
                }

                data.users.forEach(user => {
                    const userCard = document.createElement('div');
                    userCard.className = 'card mb-3';
                    userCard.innerHTML = `
                        <div class="card-body">
                            <div class="row">
                                <div class="col-md-2">
                                    <img src="${user.profilePicture || '/assets/img/default-avatar.png'}" 
                                         class="img-fluid rounded-circle" 
                                         style="width: 80px; height: 80px; object-fit: cover;">
                                </div>
                                <div class="col-md-7">
                                    <h5 class="card-title">${user.name}</h5>
                                    <p class="card-text">
                                        <strong>Email:</strong> ${user.email}<br>
                                        <strong>Contact:</strong> ${user.contactNumber || 'N/A'}<br>
                                        <strong>Role:</strong> ${user.role}<br>
                                        <strong>Email Verification:</strong> ${user.isVerified ? 'Verified' : 'Not Verified'}<br>
                                        <strong>Registered:</strong> ${user.createdAt}
                                    </p>
                                </div>
                                <div class="col-md-3 text-right">
                                    <button class="btn btn-success btn-sm mb-2 approve-user" 
                                            data-user-id="${user.id}">
                                        <i class="fa fa-check"></i> Approve
                                    </button>
                                    <button class="btn btn-danger btn-sm reject-user" 
                                            data-user-id="${user.id}">
                                        <i class="fa fa-times"></i> Reject
                                    </button>
                                </div>
                            </div>
                        </div>
                    `;
                    pendingUsersList.appendChild(userCard);
                });

                // Add event listeners for approve/reject buttons
                document.querySelectorAll('.approve-user').forEach(button => {
                    button.addEventListener('click', handleUserApproval);
                });
                document.querySelectorAll('.reject-user').forEach(button => {
                    button.addEventListener('click', handleUserRejection);
                });
            } else {
                const pendingUsersList = document.getElementById('pendingUsersList');
                pendingUsersList.innerHTML = `<div class="alert alert-danger">Error: ${data.message}</div>`;
            }
        } catch (error) {
            console.error('Error loading pending users:', error);
            const pendingUsersList = document.getElementById('pendingUsersList');
            pendingUsersList.innerHTML = `<div class="alert alert-danger">Failed to load pending users: ${error.message}</div>`;
        }
    }

    // Handle user approval
    async function handleUserApproval(e) {
        const userId = e.target.closest('button').dataset.userId;
        try {
            const response = await fetch(`/api/users/${userId}/approve`, {
                method: 'PUT'
            });
            const data = await response.json();
            if (data.success) {
                showNotification('success', 'User approved successfully');
                loadPendingUsers();
                loadPendingUsersCount();
            } else {
                showNotification('error', 'Error approving user');
            }
        } catch (error) {
            console.error('Error:', error);
            showNotification('error', 'Error approving user');
        }
    }

    // Handle user rejection
    async function handleUserRejection(e) {
        const userId = e.target.closest('button').dataset.userId;
        try {
            const response = await fetch(`/api/users/${userId}/reject`, {
                method: 'PUT'
            });
            const data = await response.json();
            if (data.success) {
                showNotification('success', 'User rejected successfully');
                loadPendingUsers();
                loadPendingUsersCount();
            } else {
                showNotification('error', 'Error rejecting user');
            }
        } catch (error) {
            console.error('Error:', error);
            showNotification('error', 'Error rejecting user');
        }
    }

    // Show notification
    function showNotification(type, message) {
        const toast = document.createElement('div');
        toast.className = `toast toast-${type}`;
        toast.innerHTML = message;
        document.body.appendChild(toast);

        setTimeout(() => {
            toast.remove();
        }, 3000);
    }
});
</script>

</body>

</html>