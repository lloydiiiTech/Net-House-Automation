<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>NetHouseAutomation Dashboard</title>
    <!-- Core CSS -->
    <link href="./assets/vendors/bootstrap/dist/css/bootstrap.min.css" rel="stylesheet" />
    <link href="./assets/vendors/font-awesome/css/font-awesome.min.css" rel="stylesheet" />
    <link href="./assets/vendors/themify-icons/css/themify-icons.css" rel="stylesheet" />
    <link href="assets/css/main.min.css" rel="stylesheet" />
    <!-- Additional CSS -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/weather-icons/2.0.10/css/weather-icons.min.css">
    <style>
        :root {
            --primary-color: #4CAF50;
            --secondary-color: #2196F3;
            --warning-color: #FFC107;
            --danger-color: #F44336;
            --success-color: #4CAF50;
            --text-color: #333;
            --light-bg: #f8f9fa;
            --card-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            --transition: all 0.3s ease;
        }

        body {
            background-color: #f5f7fa;
            color: var(--text-color);
        }

        .dashboard-card {
            background: white;
            border-radius: 15px;
            box-shadow: var(--card-shadow);
            transition: var(--transition);
            margin-bottom: 20px;
            overflow: hidden;
        }

        .dashboard-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 6px 12px rgba(0, 0, 0, 0.15);
        }

        .sensor-value {
            font-size: 2rem;
            font-weight: bold;
            margin: 10px 0;
        }

        .sensor-status {
            font-size: 0.9rem;
            padding: 5px 10px;
            border-radius: 20px;
            display: inline-block;
        }

        .status-normal { background-color: var(--success-color); color: white; }
        .status-warning { background-color: var(--warning-color); color: black; }
        .status-danger { background-color: var(--danger-color); color: white; }

        .crop-info-card {
            background: linear-gradient(135deg, #ffffff 0%, #f8f9fa 100%);
            border-radius: 15px;
            padding: 20px;
            margin-bottom: 20px;
        }

        .crop-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
        }

        .crop-name {
            font-size: 1.5rem;
            font-weight: bold;
            color: var(--primary-color);
        }

        .health-badge {
            padding: 8px 15px;
            border-radius: 20px;
            font-weight: 500;
        }

        .stat-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 15px;
            margin-bottom: 20px;
        }

        .stat-item {
            background: white;
            padding: 15px;
            border-radius: 10px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.05);
        }

        .stat-icon {
            font-size: 1.5rem;
            color: var(--primary-color);
            margin-bottom: 10px;
        }

        .stat-label {
            font-size: 0.9rem;
            color: #666;
        }

        .stat-value {
            font-size: 1.2rem;
            font-weight: bold;
            color: var(--text-color);
        }

        .chart-container {
            background: white;
            border-radius: 15px;
            padding: 20px;
            box-shadow: var(--card-shadow);
            margin-bottom: 20px;
        }

        .weather-card {
            background: linear-gradient(135deg, #4CAF50 0%, #2196F3 100%);
            color: white;
            border-radius: 15px;
            padding: 20px;
            margin-bottom: 20px;
        }

        .weather-icon {
            font-size: 3rem;
            margin-bottom: 10px;
        }

        .weather-temp {
            font-size: 2.5rem;
            font-weight: bold;
            margin-bottom: 10px;
        }

        .weather-details {
            display: flex;
            justify-content: space-between;
            margin-top: 15px;
        }

        .weather-stat {
            text-align: center;
        }

        .weather-stat i {
            font-size: 1.5rem;
            margin-bottom: 5px;
        }

        @media (max-width: 768px) {
            .stat-grid {
                grid-template-columns: 1fr;
            }
            
            .sensor-value {
                font-size: 1.5rem;
            }
        }
    </style>
</head>

<body class="fixed-navbar">
    <div class="page-wrapper">
        <!-- Header -->
        <header class="header">
            <div class="page-brand">
                <a class="link" href="/admin-home">
                    <span class="brand">NetHouse
                        <span class="brand-tip">AUTOMATION</span>
                    </span>
                    <span class="brand-mini">NHA</span>
                </a>
            </div>
            <div class="flexbox flex-1">
                <ul class="nav navbar-toolbar">
                    <li>
                        <a class="nav-link sidebar-toggler js-sidebar-toggler"><i class="ti-menu"></i></a>
                    </li>
                </ul>
                <ul class="nav navbar-toolbar">
                    <li class="dropdown dropdown-user">
                        <a class="nav-link dropdown-toggle link" data-toggle="dropdown">
                            <img src="./assets/img/admin-avatar.png" />
                            <span></span>Admin<i class="fa fa-angle-down m-l-5"></i>
                        </a>
                        <ul class="dropdown-menu dropdown-menu-right">
                            <a class="dropdown-item" href="/admin-profile"><i class="fa fa-user"></i>Profile</a>
                            <li class="dropdown-divider"></li>
                            <a class="dropdown-item" href="/logout"><i class="fa fa-power-off"></i>Logout</a>
                        </ul>
                    </li>
                </ul>
            </div>
        </header>

        <!-- Sidebar -->
        <nav class="page-sidebar" id="sidebar">
            <div id="sidebar-collapse">
                <div class="admin-block d-flex">
                    <div>
                        <img src="./assets/img/admin-avatar.png" width="45px" />
                    </div>
                    <div class="admin-info">
                        <div class="font-strong">Dan Lloyd</div>
                        <small>Administrator</small>
                    </div>
                </div>
                <ul class="side-menu metismenu">
                    <li>
                        <a class="active" href="/admin-home">
                            <i class="sidebar-item-icon fas fa-tachometer-alt"></i>
                            <span class="nav-label">Dashboard</span>
                        </a>
                    </li>
                    <li>
                        <a href="/admin-plant-overview">
                            <i class="sidebar-item-icon fas fa-leaf"></i>
                            <span class="nav-label">Plant Overview</span>
                        </a>
                    </li>
                    <li>
                        <a href="/admin-irrigation-controll">
                            <i class="sidebar-item-icon fas fa-faucet"></i>
                            <span class="nav-label">Irrigation Control</span>
                        </a>
                    </li>
                    <li>
                        <a href="/admin-reports&analytics">
                            <i class="sidebar-item-icon fas fa-chart-bar"></i>
                            <span class="nav-label">Reports & Analytics</span>
                        </a>
                    </li>
                    <li>
                        <a href="/admin-user-management">
                            <i class="sidebar-item-icon fas fa-users-cog"></i>
                            <span class="nav-label">User Management</span>
                        </a>
                    </li>
                </ul>
            </div>
        </nav>

        <!-- Main Content -->
        <div class="content-wrapper">
            <div class="page-content fade-in-up">
                <!-- Sensor Cards -->
                <div class="row">
                    <div class="col-lg-3 col-md-6">
                        <div class="dashboard-card">
                            <div class="card-body text-center">
                                <i class="fas fa-thermometer-half fa-2x text-danger mb-3"></i>
                                <h3 class="sensor-value" id="temperature"><%= sensorData.temperature.value %>Â°C</h3>
                                <span class="sensor-status" id="temperature-status"><%= sensorData.temperature.status %></span>
                            </div>
                        </div>
                    </div>
                    <div class="col-lg-3 col-md-6">
                        <div class="dashboard-card">
                            <div class="card-body text-center">
                                <i class="fas fa-tint fa-2x text-info mb-3"></i>
                                <h3 class="sensor-value" id="humidity"><%= sensorData.humidity.value %>%</h3>
                                <span class="sensor-status" id="humidity-status"><%= sensorData.humidity.status %></span>
                            </div>
                        </div>
                    </div>
                    <div class="col-lg-3 col-md-6">
                        <div class="dashboard-card">
                            <div class="card-body text-center">
                                <i class="fas fa-water fa-2x text-warning mb-3"></i>
                                <h3 class="sensor-value" id="moisture"><%= sensorData.moisture.value %></h3>
                                <span class="sensor-status" id="moisture-status"><%= sensorData.moisture.status %></span>
                            </div>
                        </div>
                    </div>
                    <div class="col-lg-3 col-md-6">
                        <div class="dashboard-card">
                            <div class="card-body text-center">
                                <i class="fas fa-flask fa-2x text-success mb-3"></i>
                                <h3 class="sensor-value" id="ph"><%= sensorData.ph.value %></h3>
                                <span class="sensor-status" id="ph-status"><%= sensorData.ph.status %></span>
                            </div>
                            </div>
                        </div>
                    </div>
    
                <!-- Current Crop Section -->
                <div class="row">
                    <div class="col-lg-12">
                        <div class="crop-info-card">
                            <div class="crop-header">
                                <h2 class="crop-name" id="crop-name"><%= cropData ? cropData.name : 'No Crop Planted' %></h2>
                                <span class="health-badge" id="health-badge">
                                                        <%= cropData ? cropData.healthStatus : 'No Crop' %>
                                                    </span>
                                                </div>
                            <div class="stat-grid">
                                                        <div class="stat-item">
                                    <i class="fas fa-calendar-alt stat-icon"></i>
                                    <div class="stat-label">Planting Date</div>
                                    <div class="stat-value" id="planting-date">
                                        <%= cropData ? new Date(cropData.plantingDate).toLocaleDateString() : '-' %>
                                                            </div>
                                                        </div>
                                                        <div class="stat-item">
                                    <i class="fas fa-clock stat-icon"></i>
                                    <div class="stat-label">Growth Stage</div>
                                    <div class="stat-value" id="growth-stage"><%= cropData ? cropData.growthStage : '-' %></div>
                                                            </div>
                                                        <div class="stat-item">
                                    <i class="fas fa-leaf stat-icon"></i>
                                    <div class="stat-label">Health Status</div>
                                    <div class="stat-value" id="health-status"><%= cropData ? cropData.healthStatus : '-' %></div>
                                                            </div>
                                                        <div class="stat-item">
                                    <i class="fas fa-chart-line stat-icon"></i>
                                    <div class="stat-label">Health Score</div>
                                    <div class="stat-value" id="health-score"><%= cropData ? cropData.score + '%' : '-' %></div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- NPK Chart and Weather -->
                <div class="row">
                    <div class="col-lg-8">
                        <div class="ibox">
                            <div class="ibox-body">
                                <div class="flexbox mb-4">
                                    <div>
                                        <h3 class="m-0">Daily NPK Data</h3>
                                    </div>
                                    <div class="d-inline-flex">
                                        <div class="px-3" style="border-right: 1px solid rgba(0,0,0,.1);">
                                            <div class="text-muted">DAILY AVERAGE</div>
                                            <small id="npk-last-update">Last updated: Loading...</small>
                                        </div>
                                        <div class="px-3" style="border-right: 1px solid rgba(0,0,0,.1);">
                                            <div class="text-muted">NITROGEN (N)</div>
                                            <div>
                                                <span class="h2 m-0"><span id="npk-nitrogen">0.0</span></span>
                                                <span class="text-info ml-2" id="nitrogen-trend"><i class="fa fa-minus"></i> 0%</span>
                                            </div>
                                        </div>
                                        <div class="px-3" style="border-right: 1px solid rgba(0,0,0,.1);">
                                            <div class="text-muted">POTASSIUM (P)</div>
                                            <div>
                                                <span class="h2 m-0"><span id="npk-phosphorus">0.0</span></span>
                                                <span class="text-info ml-2" id="phosphorus-trend"><i class="fa fa-minus"></i> 0%</span>
                                            </div>
                                        </div>
                                        <div class="px-3">
                                            <div class="text-muted">PHOSPHORUS (K)</div>
                                            <div>
                                                <span class="h2 m-0"><span id="npk-potassium">0.0</span></span>
                                                <span class="text-info ml-2" id="potassium-trend"><i class="fa fa-minus"></i> 0%</span>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div>
                                    <script src="/socket.io/socket.io.js"></script>
                                    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

                                    <div style="position: relative; height: 400px; width: 100%; padding: 20px;">
                                        <canvas id="sensorChart"></canvas>
                                    </div>
                                    <script>
                                        document.addEventListener('DOMContentLoaded', function() {
                                            const socket = io(); 
                                        
                                            // Get canvas context
                                            const ctx = document.getElementById('sensorChart');
                                            if (!ctx) {
                                                console.error('Canvas element not found');
                                                return;
                                            }

                                            // Function to update NPK averages display
                                            function updateNPKAverages(data) {
                                                document.getElementById('npk-nitrogen').textContent = data.nitrogen.toFixed(1);
                                                document.getElementById('npk-phosphorus').textContent = data.phosphorus.toFixed(1);
                                                document.getElementById('npk-potassium').textContent = data.potassium.toFixed(1);
                                                document.getElementById('npk-last-update').textContent = `Last updated: ${new Date().toLocaleTimeString()}`;
                                            }
                                        
                                            const sensorChart = new Chart(ctx.getContext('2d'), {
                                                type: 'line',
                                                data: {
                                                    labels: [],
                                                    datasets: [
                                                        { 
                                                            label: 'Nitrogen (N)', 
                                                            data: [], 
                                                            borderColor: '#4BC0C0',
                                                            backgroundColor: 'rgba(75, 192, 192, 0.1)',
                                                            borderWidth: 2,
                                                            pointRadius: 4,
                                                            tension: 0.1
                                                        },
                                                        { 
                                                            label: 'Phosphorus (P)', 
                                                            data: [], 
                                                            borderColor: '#FFCE56',
                                                            backgroundColor: 'rgba(255, 206, 86, 0.1)',
                                                            borderWidth: 2,
                                                            pointRadius: 4,
                                                            tension: 0.1
                                                        },
                                                        { 
                                                            label: 'Potassium (K)', 
                                                            data: [], 
                                                            borderColor: '#FF9F40',
                                                            backgroundColor: 'rgba(255, 159, 64, 0.1)',
                                                            borderWidth: 2,
                                                            pointRadius: 4,
                                                            tension: 0.1
                                                        }
                                                    ]
                                                },
                                                options: {
                                                    responsive: true,
                                                    maintainAspectRatio: false,
                                                    scales: {
                                                        x: {
                                                            title: { display: true, text: 'Time' },
                                                            ticks: {
                                                                callback: function(value) {
                                                                    return value;
                                                                }
                                                            }
                                                        },
                                                        y: {
                                                            title: { display: true, text: 'NPK Values (ppm)' },
                                                            min: 0,
                                                            max: 50
                                                        }
                                                    },
                                                    plugins: {
                                                        legend: {
                                                            position: 'top'
                                                        }
                                                    }
                                                }
                                            });

                                            // Function to fetch NPK data
                                            async function fetchNPKData() {
                                                try {
                                                    const response = await fetch('/npk-data');
                                                    const data = await response.json();
                                                    
                                                    if (data.current) {
                                                        updateNPKAverages(data.current);
                                                        
                                                        // Update trends if we have previous data
                                                        if (data.previous) {
                                                            updateTrend('nitrogen', data.current.nitrogen, data.previous.nitrogen);
                                                            updateTrend('phosphorus', data.current.phosphorus, data.previous.phosphorus);
                                                            updateTrend('potassium', data.current.potassium, data.previous.potassium);
                                                        }
                                                    }
                                                } catch (error) {
                                                    console.error('Error fetching NPK data:', error);
                                                }
                                            }

                                            // Function to update trend indicators
                                            function updateTrend(element, current, previous) {
                                                const trendElement = document.getElementById(`${element}-trend`);
                                                if (!trendElement) return;

                                                const change = ((current - previous) / previous) * 100;
                                                const trendIcon = change > 0 ? 'fa-arrow-up' : change < 0 ? 'fa-arrow-down' : 'fa-minus';
                                                const trendColor = change > 0 ? 'text-success' : change < 0 ? 'text-danger' : 'text-info';
                                                
                                                trendElement.innerHTML = `<i class="fa ${trendIcon}"></i> ${Math.abs(change).toFixed(1)}%`;
                                                trendElement.className = `ml-2 ${trendColor}`;
                                            }
                                        
                                            // Load initial data
                                            fetch('/sensors/history')
                                                .then(res => res.json())
                                                .then(data => {
                                                    data.forEach(reading => {
                                                        updateChart(reading.timestamp, reading);
                                                    });
                                                })
                                                .catch(err => {
                                                    console.error('Error loading initial data:', err);
                                                });
                                        
                                            // Initial NPK data fetch
                                            fetchNPKData();
                                        
                                            // Real-time updates
                                            socket.on('sensor_update', (data) => {
                                                updateChart(data.timestamp, data);
                                            });

                                            // Set up SSE for NPK updates
                                            const npkEventSource = new EventSource('/npk-updates');
                                            npkEventSource.onmessage = function(event) {
                                                const data = JSON.parse(event.data);
                                                updateNPKAverages(data);
                                            };
                                        
                                            function updateChart(timestamp, data) {
                                                const timeLabel = new Date(timestamp).toLocaleTimeString();
                                        
                                                sensorChart.data.labels.push(timeLabel);
                                                sensorChart.data.datasets[0].data.push(data.nitrogen);
                                                sensorChart.data.datasets[1].data.push(data.phosphorus);
                                                sensorChart.data.datasets[2].data.push(data.potassium);
                                        
                                                if (sensorChart.data.labels.length > 100) {
                                                    sensorChart.data.labels.shift();
                                                    sensorChart.data.datasets.forEach(dataset => dataset.data.shift());
                                                }
                                        
                                                sensorChart.update();
                                            }

                                            // Refresh NPK data every 5 minutes
                                            setInterval(fetchNPKData, 300000);
                                        });
                                        </script>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-lg-4">
                                <div class="weather-card">
                            <div class="text-center">
                                <i class="wi wi-day-sunny weather-icon"></i>
                                        <div class="weather-temp" id="weather-temp">--Â°C</div>
                                        <div class="weather-desc" id="weather-desc">Loading weather...</div>
                            </div>
                            <div class="weather-details">
                                            <div class="weather-stat">
                                                <i class="wi wi-humidity"></i>
                                    <div id="weather-humidity">--%</div>
                                            </div>
                                            <div class="weather-stat">
                                                <i class="wi wi-strong-wind"></i>
                                    <div id="weather-wind">-- km/h</div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
            </div>

            <!-- Footer -->
            <footer class="page-footer">
                <div class="font-13">2025 Â© <b>NetHouseAutomation</b> - All rights reserved.</div>
                <div class="to-top"><i class="fa fa-angle-double-up"></i></div>
            </footer>
                        </div>
                    </div>
                    
    <!-- Core Scripts -->
    <script src="./assets/vendors/jquery/dist/jquery.min.js"></script>
    <script src="./assets/vendors/popper.js/dist/umd/popper.min.js"></script>
    <script src="./assets/vendors/bootstrap/dist/js/bootstrap.min.js"></script>
    <script src="./assets/vendors/metisMenu/dist/metisMenu.min.js"></script>
    <script src="./assets/vendors/jquery-slimscroll/jquery.slimscroll.min.js"></script>
    <script src="./assets/vendors/chart.js/dist/Chart.min.js"></script>
    <script src="assets/js/app.min.js"></script>
                    
                    <script>
                    // Calapan City Coordinates
                    const CALAPAN_LAT = 13.4125;
                    const CALAPAN_LON = 121.1803;
                    
        // Weather Functions
                    async function fetchWeather() {
                        try {
                            const response = await fetch(
                                `https://api.open-meteo.com/v1/forecast?latitude=${CALAPAN_LAT}&longitude=${CALAPAN_LON}&current=temperature_2m,relative_humidity_2m,wind_speed_10m,weather_code&timezone=auto`
                            );
                            const data = await response.json();
                            
                            if (data.current) {
                                const weather = getWeatherDetails(data.current.weather_code);
                                
                                document.getElementById('weather-temp').textContent = `${Math.round(data.current.temperature_2m)}Â°C`;
                                document.getElementById('weather-desc').textContent = weather.description;
                    document.querySelector('.weather-icon').className = `wi ${weather.icon} weather-icon`;
                                document.getElementById('weather-humidity').textContent = `${data.current.relative_humidity_2m}%`;
                                document.getElementById('weather-wind').textContent = `${Math.round(data.current.wind_speed_10m)} km/h`;
                                
                                // Update weather card color based on conditions
                                updateWeatherCardStyle(data.current.weather_code);
                            }
                        } catch (error) {
                            console.error("Weather fetch error:", error);
                            document.getElementById('weather-desc').textContent = "Weather data unavailable";
                        }
                    }
                    
                    // Update weather card style based on conditions
                    function updateWeatherCardStyle(weatherCode) {
                        const card = document.querySelector('.weather-card');
            let gradient;
                        
                        if (weatherCode >= 200 && weatherCode < 300) {
                            gradient = 'linear-gradient(135deg, #2c3e50 0%, #4ca1af 100%)';
                        } else if (weatherCode >= 300 && weatherCode < 600) {
                            gradient = 'linear-gradient(135deg, #757f9a 0%, #d7dde8 100%)';
                        } else if (weatherCode >= 600 && weatherCode < 700) {
                            gradient = 'linear-gradient(135deg, #83a4d4 0%, #b6fbff 100%)';
                        } else if (weatherCode === 800) {
                            gradient = 'linear-gradient(135deg, #56ccf2 0%, #2f80ed 100%)';
                        } else {
                gradient = 'linear-gradient(135deg, #4CAF50 0%, #2196F3 100%)';
                        }
                        
                        card.style.background = gradient;
                    }
                    
                    // Weather code mapping (WMO codes)
                    function getWeatherDetails(code) {
                        const weatherMap = {
                            0: { description: "Clear sky", icon: "wi-day-sunny" },
                            1: { description: "Mainly clear", icon: "wi-day-cloudy" },
                            2: { description: "Partly cloudy", icon: "wi-cloud" },
                            3: { description: "Overcast", icon: "wi-cloudy" },
                            45: { description: "Fog", icon: "wi-fog" },
                            48: { description: "Freezing fog", icon: "wi-fog" },
                            51: { description: "Light drizzle", icon: "wi-sprinkle" },
                            53: { description: "Moderate drizzle", icon: "wi-sprinkle" },
                            55: { description: "Heavy drizzle", icon: "wi-sprinkle" },
                            61: { description: "Light rain", icon: "wi-rain" },
                            63: { description: "Moderate rain", icon: "wi-rain" },
                            65: { description: "Heavy rain", icon: "wi-rain" },
                            80: { description: "Light showers", icon: "wi-showers" },
                            81: { description: "Moderate showers", icon: "wi-showers" },
                            82: { description: "Heavy showers", icon: "wi-showers" },
                            95: { description: "Thunderstorm", icon: "wi-thunderstorm" },
                            96: { description: "Thunderstorm with hail", icon: "wi-storm-showers" },
                            99: { description: "Heavy thunderstorm", icon: "wi-storm-showers" }
                        };
                        
                        return weatherMap[code] || { description: "Unknown", icon: "wi-cloud" };
                    }
                    
        // Initialize weather when page loads
                    window.addEventListener('DOMContentLoaded', () => {
                        fetchWeather();
                        // Update weather every 30 minutes
                        setInterval(fetchWeather, 1800000);
                    });

        // Existing sensor data fetch function
        function fetchSensorData() {
            fetch('/sensors_data')
                .then(response => response.json())
                .then(data => {
                    document.getElementById("temperature").innerHTML = `${data.temperature.value}Â°C`;
                    document.getElementById("temperature-status").innerText = data.temperature.status;
    
                    document.getElementById("humidity").innerHTML = `${data.humidity.value}%`;
                    document.getElementById("humidity-status").innerText = data.humidity.status;
    
                    document.getElementById("moisture").innerHTML = data.moisture.value;
                    document.getElementById("moisture-status").innerText = data.moisture.status;
    
                    document.getElementById("ph").innerHTML = data.ph.value;
                    document.getElementById("ph-status").innerText = data.ph.status;
                })
                .catch(error => console.error("Error fetching sensor data:", error));
        }
    
        // Refresh sensor data every 10 seconds
        setInterval(fetchSensorData, 10000);
    
        // Initial data load
        window.onload = fetchSensorData;
    </script>
</body>

</html>