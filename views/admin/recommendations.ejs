<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Crop Recommendations - NetHouseAutomation</title>
    <link href="/assets/vendors/bootstrap/dist/css/bootstrap.min.css" rel="stylesheet" />
    <link href="/assets/vendors/font-awesome/css/font-awesome.min.css" rel="stylesheet" />
    <link href="/assets/vendors/themify-icons/css/themify-icons.css" rel="stylesheet" />
    <link href="/assets/css/main.min.css" rel="stylesheet" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <style>
        .recommendation-section {
            margin-bottom: 2.5rem;
        }
        .recommendation-card {
            background: #fff;
            border-radius: 1rem;
            box-shadow: 0 4px 16px rgba(42,127,98,0.08);
            padding: 1.5rem 1.5rem 1rem 1.5rem;
            margin-bottom: 1.5rem;
            transition: box-shadow 0.3s, transform 0.2s;
            border: 1px solid #e9ecef;
            cursor: pointer;
        }
        .recommendation-card:hover {
            box-shadow: 0 8px 32px rgba(42,127,98,0.15);
            transform: translateY(-2px) scale(1.01);
            border-color: #2a7f62;
        }
        .recommendation-header {
            background: linear-gradient(90deg, #2a7f62 0%, #1a5f4a 100%);
            color: #fff;
            border-radius: 1rem 1rem 0 0;
            padding: 1.25rem 1.5rem;
            margin-bottom: 0;
            box-shadow: 0 2px 8px rgba(42,127,98,0.08);
        }
        .crop-rank {
            width: 48px;
            height: 48px;
            background: #2a7f62;
            color: #fff;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 1.5rem;
            font-weight: bold;
            margin-right: 1.5rem;
            box-shadow: 0 2px 8px rgba(42,127,98,0.10);
        }
        .crop-info {
            flex: 1;
        }
        .crop-name {
            font-size: 1.2rem;
            font-weight: 600;
            color: #2a7f62;
            margin-bottom: 0.25rem;
        }
        .crop-status {
            font-size: 0.9rem;
            margin-left: 0.5rem;
            padding: 2px 12px;
            border-radius: 12px;
            color: #fff;
            font-weight: 500;
            box-shadow: 0 1px 4px rgba(42,127,98,0.08);
        }
        .crop-status.registered {
            background: #28a745;
        }
        .crop-status.new {
            background: #17a2b8;
        }
        .crop-match {
            margin-top: 0.5rem;
            font-size: 1rem;
            display: flex;
            align-items: center;
        }
        .match-bar {
            height: 8px;
            background: #2a7f62;
            border-radius: 4px;
            margin-right: 10px;
            width: 80px;
            display: inline-block;
            box-shadow: 0 1px 4px rgba(42,127,98,0.08);
        }
        .recommendation-grid {
            display: flex;
            flex-direction: column;
            gap: 1.5rem;
        }
        /* Registered Crops Card */
        .registered-crops-card {
            border-radius: 1rem;
            box-shadow: 0 4px 16px rgba(42,127,98,0.08);
            border: 1px solid #e9ecef;
            margin-bottom: 2rem;
        }
        .registered-crops-header {
            background: linear-gradient(90deg, #28a745 0%, #218838 100%);
            color: #fff;
            border-radius: 1rem 1rem 0 0;
            padding: 1.25rem 1.5rem;
            display: flex;
            justify-content: space-between;
            align-items: center;
            font-size: 1.2rem;
            font-weight: 600;
            box-shadow: 0 2px 8px rgba(40,167,69,0.08);
        }
        .registered-crops-table {
            margin-bottom: 0;
            border-radius: 0 0 1rem 1rem;
            overflow: hidden;
        }
        .registered-crops-table th, .registered-crops-table td {
            vertical-align: middle;
        }
        .registered-crops-table tbody tr {
            transition: background 0.2s;
        }
        .registered-crops-table tbody tr:hover {
            background: #f0f7f4;
        }
        .action-btn {
            margin-right: 0.5rem;
            border-radius: 50%;
            width: 36px;
            height: 36px;
            display: inline-flex;
            align-items: center;
            justify-content: center;
            font-size: 1.1rem;
            box-shadow: 0 1px 4px rgba(42,127,98,0.08);
            transition: background 0.2s, color 0.2s;
        }
        .action-btn:last-child { margin-right: 0; }
        .action-btn.edit { background: #fff3cd; color: #856404; border: 1px solid #ffeeba; }
        .action-btn.edit:hover { background: #ffeeba; color: #856404; }
        .action-btn.delete { background: #f8d7da; color: #721c24; border: 1px solid #f5c6cb; }
        .action-btn.delete:hover { background: #f5c6cb; color: #721c24; }
        .floating-btn {
            position: fixed;
            bottom: 32px;
            right: 32px;
            z-index: 1050;
            border-radius: 50%;
            width: 56px;
            height: 56px;
            background: linear-gradient(135deg, #28a745 0%, #218838 100%);
            color: #fff;
            font-size: 2rem;
            box-shadow: 0 4px 16px rgba(40,167,69,0.18);
            display: flex;
            align-items: center;
            justify-content: center;
            border: none;
            transition: background 0.2s, box-shadow 0.2s;
        }
        .floating-btn:hover {
            background: #218838;
            box-shadow: 0 8px 32px rgba(40,167,69,0.25);
        }
        /* Clickable table row styling */
        .crop-row {
            transition: background-color 0.2s ease;
        }
        .crop-row:hover {
            background-color: #f8f9fa !important;
            transform: translateX(2px);
        }
        .crop-row:active {
            background-color: #e9ecef !important;
            transform: translateX(1px);
        }
        /* Prevent action buttons from triggering row click */
        .action-btn {
            position: relative;
            z-index: 10;
        }
        @media (max-width: 600px) {
            .recommendation-grid { flex-direction: column; }
            .floating-btn { right: 16px; bottom: 16px; }
        }
        .modal-header.bg-primary {
            background: linear-gradient(90deg, #2a7f62 0%, #1a5f4a 100%);
            color: #fff;
            border-top-left-radius: .5rem;
            border-top-right-radius: .5rem;
            box-shadow: 0 2px 8px rgba(42,127,98,0.08);
        }
        .modal-title {
            font-weight: 700;
            font-size: 1.5rem;
        }
        .modal-body .section-title {
            font-size: 1.1rem;
            font-weight: 600;
            color: #2a7f62;
            margin-bottom: 0.75rem;
            margin-top: 1.25rem;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }
        .modal-body .section-title i {
            font-size: 1.1rem;
            color: #28a745;
        }
        .modal-body .info-table {
            width: 100%;
            margin-bottom: 1rem;
            background: #f8f9fa;
            border-radius: 8px;
            overflow: hidden;
            box-shadow: 0 1px 4px rgba(42,127,98,0.05);
        }
        .modal-body .info-table td {
            padding: 0.5rem 1rem;
            border-bottom: 1px solid #e9ecef;
            font-size: 1rem;
        }
        .modal-body .info-table tr:last-child td {
            border-bottom: none;
        }
        .modal-body .param-match-bar {
            height: 8px;
            border-radius: 4px;
            background: #e9ecef;
            margin-top: 0.25rem;
            margin-bottom: 0.5rem;
            overflow: hidden;
        }
        .modal-body .param-match-bar-inner {
            height: 100%;
            border-radius: 4px;
            transition: width 0.3s;
        }
        .modal-footer {
            background: #f8f9fa;
            border-bottom-left-radius: .5rem;
            border-bottom-right-radius: .5rem;
            box-shadow: 0 -2px 8px rgba(42,127,98,0.04);
        }
    </style>
</head>
<body class="fixed-navbar">
    <div class="page-wrapper">
        <!-- START HEADER-->
        <header class="header">
            <div class="page-brand">
                <a class="link" href="/dashboard">
                    <span class="brand">NetHouse
                        <span class="brand-tip">Automation</span>
                    </span>
                    <span class="brand-mini">NHA</span>
                </a>
            </div>
            <div class="flexbox flex-1">
                <ul class="nav navbar-toolbar">
                    <li>
                        <a class="nav-link sidebar-toggler js-sidebar-toggler"><i class="ti-menu"></i></a>
                    </li>
                </ul>
                <ul class="nav navbar-toolbar">
                    <li class="dropdown dropdown-user">
                        <a class="nav-link dropdown-toggle link" data-toggle="dropdown">
                            <img src="<%= user.profilePicture %>" />
                            <span></span><%= user.name %><i class="fa fa-angle-down m-l-5"></i></a>
                        <ul class="dropdown-menu dropdown-menu-right">
                            <a class="dropdown-item" href="/profile"><i class="fa fa-user"></i>Profile</a>
                            <li class="dropdown-divider"></li>
                            <a class="dropdown-item" href="/logout"><i class="fa fa-power-off"></i>Logout</a>
                        </ul>
                    </li>
                </ul>
            </div>
        </header>
        <!-- END HEADER-->
        <!-- START SIDEBAR-->
        <nav class="page-sidebar" id="sidebar">
            <div id="sidebar-collapse">
                <div class="admin-block d-flex">
                    <div>
                        <img src="<%= user.profilePicture %>" width="45px" />
                    </div>
                    <div class="admin-info">
                        <div class="font-strong"><%= user.name %></div><small><%= user.role %></small>
                    </div>
                </div>
                <ul class="side-menu metismenu">
                    <li>
                        <a href="/dashboard"><i class="sidebar-item-icon fas fa-tachometer-alt"></i>
                            <span class="nav-label">Dashboard</span>
                        </a>
                    </li>
                    <li>
                        <a href="/plant-overview"><i class="sidebar-item-icon fas fa-leaf"></i>
                            <span class="nav-label">Plant Overview</span>
                        </a>
                    </li>
                    <li>
                        <a href="/irrigation-controll"><i class="sidebar-item-icon fas fa-faucet"></i>
                            <span class="nav-label">Irrigation Control</span>
                        </a>
                    </li>
                    <li>
                        <a href="/reports&analytics"><i class="sidebar-item-icon fas fa-chart-bar"></i>
                            <span class="nav-label">Reports & Analytics</span>
                        </a>
                    </li>
                    <li>
                        <a href="/user-management"><i class="sidebar-item-icon fas fa-users-cog"></i>
                            <span class="nav-label">User Management</span>
                        </a>
                    </li>
                    <li>
                        <a class="active" href="/crop-recommendations"><i class="sidebar-item-icon fas fa-seedling"></i>
                            <span class="nav-label">Crop Recommendations</span>
                        </a>
                    </li>
                </ul>
            </div>
        </nav>
        <!-- END SIDEBAR-->
        <div class="content-wrapper">
            <div class="page-heading">
                <h1 class="page-title">Crop Recommendations</h1>
                <ol class="breadcrumb">
                    <li class="breadcrumb-item">
                        <a href="/dashboard"><i class="fa fa-home font-20"></i></a>
                    </li>
                    <li class="breadcrumb-item">Crop Recommendations</li>
                </ol>
            </div>
            <div class="page-content fade-in-up">
                <div class="container">
                    <!-- Top 5 Recommendations Section -->
                    <div class="recommendation-section">
                        <div class="recommendation-header mb-0">
                            <h3 class="mb-0"><i class="fas fa-seedling mr-2"></i>Top 5 Recommended Crops</h3>
                        </div>
                        <div class="recommendation-grid mt-3">
                            <% if (recommendations.length > 0) { %>
                                <% recommendations.forEach((crop, index) => { %>
                                    <div class="recommendation-card d-flex align-items-center" onclick="showCropDetails(recommendationsData[<%= index %>])" title="View Details">
                                        <div class="crop-rank"><%= index + 1 %></div>
                                        <div class="crop-info">
                                            <div class="crop-name">
                                                <%= crop.name %>
                                                <span class="crop-status <%= crop.isRegistered ? 'registered' : 'new' %>">
                                                    <%= crop.isRegistered ? 'Registered' : 'New' %>
                                                </span>
                                            </div>
                                            <div class="crop-match">
                                                <div class="match-bar" style="width: <%= Number(crop.score || crop.ruleBasedScore) %>%"></div>
                                                <span><%= Math.round(crop.score || crop.ruleBasedScore) %>% Match</span>
                                            </div>
                                        </div>
                                    </div>
                                <% }); %>
                            <% } else { %>
                                <div class="alert alert-info text-center mt-3 w-100">
                                    <i class="fa fa-info-circle mr-2"></i> No crop recommendations available at this time.
                                </div>
                            <% } %>
                        </div>
                    </div>

                    <!-- Registered Crops Section -->
                    <div class="registered-crops-card card mb-5">
                        <div class="registered-crops-header">
                            <span><i class="fas fa-leaf mr-2"></i>All Registered Crops</span>
                            <button class="btn btn-light btn-sm" id="registerCropBtn" data-toggle="tooltip" title="Register New Crop" onclick="openRegisterModal()"><i class="fa fa-plus"></i></button>
                        </div>
                        <div class="card-body p-0">
                            <table class="table table-hover mb-0 registered-crops-table">
                                <thead class="thead-light">
                                    <tr>
                                        <th>Crop Name</th>
                                        <th style="width: 120px;">Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    <% 
                                        // Build a Set of recommended crop names for fast lookup
                                        const recommendedNames = new Set(recommendations.map(c => c.name));
                                        // Filter registered crops to exclude those in recommendations
                                        const filteredRegisteredCrops = registeredCrops.filter(crop => !recommendedNames.has(crop.name));
                                    %>
                                    <% if (filteredRegisteredCrops.length > 0) { %>
                                        <% filteredRegisteredCrops.forEach(crop => { %>
                                            <tr class="crop-row" data-crop-name="<%= crop.name %>" style="cursor: pointer;" title="Click to view details">
                                                <td><%= crop.name %></td>
                                                <td>
                                                    <button class="action-btn edit edit-crop-btn" data-crop-id="<%= crop.id %>" data-crop-name="<%= crop.name %>" data-toggle="tooltip" title="Edit Crop" onclick="openEditModal('<%= encodeURIComponent(crop.name) %>', this)"><i class="fa fa-pencil-alt"></i></button>
                                                    <button class="action-btn delete delete-crop-btn" data-crop-id="<%= crop.id %>" data-crop-name="<%= crop.name %>" data-toggle="tooltip" title="Unregister Crop" onclick="deleteCrop('<%= encodeURIComponent(crop.name) %>')"><i class="fa fa-trash"></i></button>
                                                </td>
                                            </tr>
                                        <% }); %>
                                    <% } else { %>
                                        <tr><td colspan="2" class="text-muted text-center">No registered crops found.</td></tr>
                                    <% } %>
                                </tbody>
                            </table>
                        </div>
                    </div>

                    <!-- Floating Register Crop Button (for mobile/quick access) -->
                    <button class="floating-btn" id="floatingRegisterCropBtn" data-toggle="tooltip" title="Register New Crop" onclick="openRegisterModal()"><i class="fa fa-plus"></i></button>
                </div>

                <!-- Register Crop Modal (copied from report-crops.ejs) -->
                <div class="modal fade" id="registerCropModal" tabindex="-1" role="dialog" aria-labelledby="registerCropModalLabel" aria-hidden="true">
                  <div class="modal-dialog modal-lg" role="document">
                    <div class="modal-content">
                      <div class="modal-header">
                        <h5 class="modal-title" id="registerCropModalLabel">
                          <i class="fa fa-plus me-2"></i>Register New Crop
                        </h5>
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                          <span aria-hidden="true">&times;</span>
                        </button>
                      </div>
                      <form id="registerCropForm" autocomplete="off">
                        <div class="modal-body">
                          <div class="form-group mb-3">
                            <label for="registerCropName">Crop Name *</label>
                            <input type="text" class="form-control" id="registerCropName" name="cropName" required>
                            <small class="form-text text-muted">Enter the name of the crop you want to register</small>
                          </div>
                          <div class="alert alert-info">
                            <i class="fa fa-info-circle me-2"></i>
                            <strong>Optimal Conditions:</strong> You can either fill in the optimal conditions manually or leave them blank to use AI-generated recommendations.
                          </div>
                          <div class="form-row">
                            <div class="form-group col-md-6">
                              <label for="registerOptimalTemperature">Optimal Temperature (°C)</label>
                              <input type="number" step="any" class="form-control" id="registerOptimalTemperature" name="optimal_temperature" placeholder="Leave blank for AI recommendation">
                            </div>
                            <div class="form-group col-md-6">
                              <label for="registerOptimalHumidity">Optimal Humidity (%)</label>
                              <input type="number" step="any" class="form-control" id="registerOptimalHumidity" name="optimal_humidity" placeholder="Leave blank for AI recommendation">
                            </div>
                          </div>
                          <div class="form-row">
                            <div class="form-group col-md-6">
                              <label for="registerOptimalMoisture">Optimal Moisture (%)</label>
                              <input type="number" step="any" class="form-control" id="registerOptimalMoisture" name="optimal_moisture" placeholder="Leave blank for AI recommendation">
                            </div>
                            <div class="form-group col-md-6">
                              <label for="registerOptimalLight">Optimal Light (lux)</label>
                              <input type="number" step="any" class="form-control" id="registerOptimalLight" name="optimal_light" placeholder="Leave blank for AI recommendation">
                            </div>
                          </div>
                          <div class="form-row">
                            <div class="form-group col-md-6">
                              <label for="registerOptimalPH">Optimal pH</label>
                              <input type="number" step="any" class="form-control" id="registerOptimalPH" name="optimal_ph" placeholder="Leave blank for AI recommendation">
                            </div>
                            <div class="form-group col-md-6">
                              <label for="registerOptimalN">Nitrogen (N) (mg/kg)</label>
                              <input type="number" step="any" class="form-control" id="registerOptimalN" name="optimal_n" placeholder="Leave blank for AI recommendation">
                            </div>
                          </div>
                          <div class="form-row">
                            <div class="form-group col-md-6">
                              <label for="registerOptimalP">Phosphorus (P) (mg/kg)</label>
                              <input type="number" step="any" class="form-control" id="registerOptimalP" name="optimal_p" placeholder="Leave blank for AI recommendation">
                            </div>
                            <div class="form-group col-md-6">
                              <label for="registerOptimalK">Potassium (K) (mg/kg)</label>
                              <input type="number" step="any" class="form-control" id="registerOptimalK" name="optimal_k" placeholder="Leave blank for AI recommendation">
                            </div>
                          </div>
                        </div>
                        <div class="modal-footer">
                          <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                          <button type="submit" class="btn btn-primary">
                            <i class="fa fa-plus me-1"></i>Register Crop
                          </button>
                        </div>
                      </form>
                    </div>
                  </div>
                </div>
                <!-- Edit Crop Modal (copied from report-crops.ejs) -->
                <div class="modal fade" id="editCropModal" tabindex="-1" role="dialog" aria-labelledby="editCropModalLabel" aria-hidden="true">
                  <div class="modal-dialog" role="document">
                    <div class="modal-content">
                      <div class="modal-header">
                        <h5 class="modal-title" id="editCropModalLabel">Edit Crop Data</h5>
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                          <span aria-hidden="true">&times;</span>
                        </button>
                      </div>
                      <form id="editCropForm" autocomplete="off">
                        <div class="modal-body">
                          <div class="form-group">
                            <label for="editCropNameInput">Crop Name</label>
                            <input type="text" class="form-control" id="editCropNameInput" name="newCropName" required>
                            <input type="hidden" id="oldCropNameInput" name="oldCropName">
                          </div>
                          <div class="form-row">
                            <div class="form-group col-md-6">
                              <label for="editOptimalTemperature">Optimal Temperature (°C)</label>
                              <input type="number" step="any" class="form-control" id="editOptimalTemperature" name="optimal_temperature">
                            </div>
                            <div class="form-group col-md-6">
                              <label for="editOptimalHumidity">Optimal Humidity (%)</label>
                              <input type="number" step="any" class="form-control" id="editOptimalHumidity" name="optimal_humidity">
                            </div>
                          </div>
                          <div class="form-row">
                            <div class="form-group col-md-6">
                              <label for="editOptimalMoisture">Optimal Moisture (%)</label>
                              <input type="number" step="any" class="form-control" id="editOptimalMoisture" name="optimal_moisture">
                            </div>
                            <div class="form-group col-md-6">
                              <label for="editOptimalLight">Optimal Light (lux)</label>
                              <input type="number" step="any" class="form-control" id="editOptimalLight" name="optimal_light">
                            </div>
                          </div>
                          <div class="form-row">
                            <div class="form-group col-md-6">
                              <label for="editOptimalPH">Optimal pH</label>
                              <input type="number" step="any" class="form-control" id="editOptimalPH" name="optimal_ph">
                            </div>
                            <div class="form-group col-md-6">
                              <label for="editOptimalN">Nitrogen (N) (mg/kg)</label>
                              <input type="number" step="any" class="form-control" id="editOptimalN" name="optimal_n">
                            </div>
                          </div>
                          <div class="form-row">
                            <div class="form-group col-md-6">
                              <label for="editOptimalP">Phosphorus (P) (mg/kg)</label>
                              <input type="number" step="any" class="form-control" id="editOptimalP" name="optimal_p">
                            </div>
                            <div class="form-group col-md-6">
                              <label for="editOptimalK">Potassium (K) (mg/kg)</label>
                              <input type="number" step="any" class="form-control" id="editOptimalK" name="optimal_k">
                            </div>
                          </div>
                        </div>
                        <div class="modal-footer">
                          <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                          <button type="submit" class="btn btn-primary">Save Changes</button>
                        </div>
                      </form>
                    </div>
                  </div>
                </div>
                <!-- Notification Container -->
                <div id="notification-container" style="position: fixed; top: 30px; right: 30px; z-index: 9999; min-width: 300px;"></div>
                <!-- Global Confirmation Modal -->
                <div class="modal fade" id="globalConfirmModal" tabindex="-1" role="dialog" aria-labelledby="globalConfirmModalLabel" aria-hidden="true">
                  <div class="modal-dialog modal-dialog-centered" role="document">
                    <div class="modal-content">
                      <div class="modal-header bg-warning text-dark">
                        <h5 class="modal-title" id="globalConfirmModalLabel"><i class="fa fa-question-circle mr-2"></i>Confirmation</h5>
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                          <span aria-hidden="true">&times;</span>
                        </button>
                      </div>
                      <div class="modal-body" id="globalConfirmModalBody">
                        <!-- Confirmation message will be injected here -->
                      </div>
                      <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                        <button type="button" class="btn btn-danger" id="globalConfirmModalYesBtn">Yes</button>
                      </div>
                    </div>
                  </div>
                </div>
            </div>
        </div>
        <footer class="page-footer">
            <div class="font-13">2025 © <b>NetHouseAutomation</b> - All rights reserved.</div>
            <div class="to-top"><i class="fa fa-angle-double-up"></i></div>
        </footer>
    </div>
    <script src="/assets/vendors/jquery/dist/jquery.min.js"></script>
    <script src="/assets/vendors/popper.js/dist/umd/popper.min.js"></script>
    <script src="/assets/vendors/bootstrap/dist/js/bootstrap.min.js"></script>
    <script src="/assets/vendors/metisMenu/dist/metisMenu.min.js"></script>
    <script src="/assets/vendors/jquery-slimscroll/jquery.slimscroll.min.js"></script>
    <script src="/assets/js/app.min.js"></script>
    <!-- Crop Details Modal -->
    <div class="modal fade" id="cropDetailsModal" tabindex="-1" role="dialog" aria-hidden="true">
        <div class="modal-dialog modal-lg" role="document">
            <div class="modal-content">
                <div class="modal-header bg-primary text-white">
                    <h5 class="modal-title font-weight-bold" id="cropModalTitle"></h5>
                    <button type="button" class="close text-white" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <div class="container-fluid">
                        <div class="row mb-3">
                            <div class="col-md-6 mb-3 mb-md-0">
                                <div class="section-title"><i class="fas fa-info-circle"></i> Crop Information</div>
                                <table class="info-table">
                                    <tr><td>Status:</td><td><span id="cropStatus" class="badge"></span></td></tr>
                                    <tr><td>Overall Match:</td><td><span id="overallMatch" class="font-weight-bold"></span></td></tr>
                                </table>
                            </div>
                            <div class="col-md-6">
                                <div class="section-title"><i class="fas fa-star"></i> Quick Stats</div>
                                <table class="info-table">
                                    <tr><td>Best Match</td><td id="bestMatchParam"></td></tr>
                                    <tr><td>Needs Attention</td><td id="worstMatchParam"></td></tr>
                                </table>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-6 mb-3 mb-md-0">
                                <div class="section-title"><i class="fas fa-bullseye"></i> Optimal Conditions</div>
                                <div id="optimalConditions"></div>
                            </div>
                            <div class="col-md-6">
                                <div class="section-title"><i class="fas fa-tachometer-alt"></i> Parameter Matches</div>
                                <div id="parameterMatches"></div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <% if (!hasActiveCrop) { %>
                        <button type="button" class="btn btn-success" id="plantCropBtn">
                            <i class="fas fa-seedling mr-2"></i>Plant this Crop
                        </button>
                    <% } %>
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Registered Crop Details Modal -->
    <div class="modal fade" id="registeredCropDetailsModal" tabindex="-1" role="dialog" aria-hidden="true">
        <div class="modal-dialog modal-lg" role="document">
            <div class="modal-content">
                <div class="modal-header bg-success text-white">
                    <h5 class="modal-title font-weight-bold" id="registeredCropModalTitle"></h5>
                    <button type="button" class="close text-white" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <div class="container-fluid">
                        <div class="row mb-3">
                            <div class="col-md-6 mb-3 mb-md-0">
                                <div class="section-title"><i class="fas fa-info-circle"></i> Crop Information</div>
                                <table class="info-table">
                                    <tr><td>Status:</td><td><span id="registeredCropStatus" class="badge badge-success">Registered</span></td></tr>
                                    <tr><td>Overall Match:</td><td><span id="registeredOverallMatch" class="font-weight-bold"></span></td></tr>
                                </table>
                            </div>
                            <div class="col-md-6">
                                <div class="section-title"><i class="fas fa-star"></i> Quick Stats</div>
                                <table class="info-table">
                                    <tr><td>Best Match</td><td id="registeredBestMatchParam"></td></tr>
                                    <tr><td>Needs Attention</td><td id="registeredWorstMatchParam"></td></tr>
                                </table>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-6 mb-3 mb-md-0">
                                <div class="section-title"><i class="fas fa-bullseye"></i> Optimal Conditions</div>
                                <div id="registeredOptimalConditions"></div>
                            </div>
                            <div class="col-md-6">
                                <div class="section-title"><i class="fas fa-tachometer-alt"></i> Parameter Matches</div>
                                <div id="registeredParameterMatches"></div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <% if (!hasActiveCrop) { %>
                        <button type="button" class="btn btn-success" id="plantRegisteredCropBtn">
                            <i class="fas fa-seedling mr-2"></i>Plant this Crop
                        </button>
                    <% } %>
                    <button type="button" class="btn btn-primary" id="editOptimalConditionsBtn" style="display: none;">
                        <i class="fas fa-edit mr-2"></i>Edit Optimal Conditions
                    </button>
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </div>

    <script>
    // Make recommendations available in JS
    const recommendationsData = <%- JSON.stringify(recommendations) %>;
    // Helper to get color for match progress
    function getProgressColor(value) {
        if (value >= 80) return '#28a745';
        if (value >= 60) return '#5cb85c';
        if (value >= 40) return '#f0ad4e';
        return '#d9534f';
    }
    // Show crop details modal
    let selectedCropForPlanting = null;
    function showCropDetails(crop) {
        selectedCropForPlanting = crop;
        document.getElementById('cropModalTitle').textContent = crop.name;
        document.getElementById('cropStatus').className = `badge ${crop.isRegistered ? 'badge-success' : 'badge-info'}`;
        document.getElementById('cropStatus').textContent = crop.isRegistered ? 'Registered' : 'New';
        document.getElementById('overallMatch').textContent = `${Math.round(crop.score || crop.ruleBasedScore)}%`;
        // Parameter matches
        const matches = crop.parameterMatches || {};
        const matchEntries = Object.entries(matches);
        const bestMatch = matchEntries.reduce((a, b) => a[1] > b[1] ? a : b, ['', 0]);
        const worstMatch = matchEntries.reduce((a, b) => a[1] < b[1] ? a : b, ['', 100]);
        document.getElementById('bestMatchParam').textContent = bestMatch[0] ? `${bestMatch[0].replace('npk_', '').toUpperCase()} (${Math.round(bestMatch[1])}%)` : '--';
        document.getElementById('worstMatchParam').textContent = worstMatch[0] ? `${worstMatch[0].replace('npk_', '').toUpperCase()} (${Math.round(worstMatch[1])}%)` : '--';
        // Optimal conditions
        const opt = crop.optimalConditions || {};
        document.getElementById('optimalConditions').innerHTML = `
            <table class='info-table'>
                <tr><td>Temperature</td><td>${opt.temperature || 'N/A'}°C</td></tr>
                <tr><td>Humidity</td><td>${opt.humidity || 'N/A'}%</td></tr>
                <tr><td>Soil Moisture</td><td>${opt.moisture || 'N/A'}%</td></tr>
                <tr><td>pH Level</td><td>${opt.ph || 'N/A'}</td></tr>
                <tr><td>Light Intensity</td><td>${opt.light || 'N/A'} lux</td></tr>
                <tr><td>Nitrogen (N)</td><td>${opt.npk_N || 'N/A'} ppm</td></tr>
                <tr><td>Phosphorus (P)</td><td>${opt.npk_P || 'N/A'} ppm</td></tr>
                <tr><td>Potassium (K)</td><td>${opt.npk_K || 'N/A'} ppm</td></tr>
            </table>
        `;
        // Parameter matches
        document.getElementById('parameterMatches').innerHTML =
            Object.entries(matches).map(([key, value]) => {
                const paramName = key.replace('npk_', '').toUpperCase();
                return `
                    <div class='mb-2'>
                        <div class='d-flex justify-content-between'>
                            <span>${paramName}</span>
                            <span>${Math.round(value)}%</span>
                        </div>
                        <div class='param-match-bar'>
                            <div class='param-match-bar-inner' style='width: ${value}%; background: ${getProgressColor(value)};'></div>
                        </div>
                    </div>
                `;
            }).join('') || '<div class="text-muted">No parameter matches data.</div>';
        $('#cropDetailsModal').modal('show');
    }
    // Attach click event to crop cards
    document.addEventListener('DOMContentLoaded', function() {
        document.querySelectorAll('.recommendation-card').forEach((card, idx) => {
            card.addEventListener('click', function() {
                const crop = recommendationsData[idx];
                showCropDetails(crop);
            });
        });
    });

    // Remove old registration/edit JS and add the new logic from report-crops.ejs
    function openRegisterModal() {
        document.getElementById('registerCropForm').reset();
        $('#registerCropModal').modal('show');
    }
    function openEditModal(cropName, btn) {
        const decodedName = decodeURIComponent(cropName);
        document.getElementById('editCropNameInput').value = '';
        document.getElementById('oldCropNameInput').value = decodedName;
        document.getElementById('editOptimalTemperature').value = '';
        document.getElementById('editOptimalHumidity').value = '';
        document.getElementById('editOptimalMoisture').value = '';
        document.getElementById('editOptimalLight').value = '';
        document.getElementById('editOptimalPH').value = '';
        document.getElementById('editOptimalN').value = '';
        document.getElementById('editOptimalP').value = '';
        document.getElementById('editOptimalK').value = '';
        document.getElementById('editCropForm')._rowToUpdate = btn.closest('tr');
        fetch('/get-crop-details', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Accept': 'application/json',
            },
            body: JSON.stringify({ cropName: decodedName })
        })
        .then(res => res.json())
        .then(data => {
            if (data.success) {
                const crop = data.cropDetails;
                document.getElementById('editCropNameInput').value = crop.name || '';
                document.getElementById('editOptimalTemperature').value = crop.optimal_temperature ?? '';
                document.getElementById('editOptimalHumidity').value = crop.optimal_humidity ?? '';
                document.getElementById('editOptimalMoisture').value = crop.optimal_moisture ?? '';
                document.getElementById('editOptimalLight').value = crop.optimal_light ?? '';
                document.getElementById('editOptimalPH').value = crop.optimal_ph ?? '';
                document.getElementById('editOptimalN').value = crop.optimal_n ?? '';
                document.getElementById('editOptimalP').value = crop.optimal_p ?? '';
                document.getElementById('editOptimalK').value = crop.optimal_k ?? '';
                $('#editCropModal').modal('show');
            } else {
                showNotification('Failed to load crop data for editing: ' + (data.message || 'Unknown error'), 'danger');
            }
        })
        .catch(err => {
            showNotification('Error loading crop data: ' + err.message, 'danger');
        });
    }
    document.getElementById('editCropForm').addEventListener('submit', function(e) {
        e.preventDefault();
        const oldCropName = document.getElementById('oldCropNameInput').value;
        const newCropName = document.getElementById('editCropNameInput').value;
        const optimal_temperature = document.getElementById('editOptimalTemperature').value;
        const optimal_humidity = document.getElementById('editOptimalHumidity').value;
        const optimal_moisture = document.getElementById('editOptimalMoisture').value;
        const optimal_light = document.getElementById('editOptimalLight').value;
        const optimal_ph = document.getElementById('editOptimalPH').value;
        const optimal_n = document.getElementById('editOptimalN').value;
        const optimal_p = document.getElementById('editOptimalP').value;
        const optimal_k = document.getElementById('editOptimalK').value;
        fetch('/edit-crop-name', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Accept': 'application/json',
            },
            body: JSON.stringify({
                oldCropName,
                newCropName,
                optimal_temperature,
                optimal_humidity,
                optimal_moisture,
                optimal_light,
                optimal_ph,
                optimal_n,
                optimal_p,
                optimal_k
            })
        })
        .then(res => res.json())
        .then(data => {
            if (data.success) {
                const row = document.getElementById('editCropForm')._rowToUpdate;
                if (row) {
                    row.children[0].textContent = newCropName;
                    row.querySelector('.action-btn.edit').setAttribute('onclick', `openEditModal('${encodeURIComponent(newCropName)}', this)`);
                    row.querySelector('.action-btn.delete').setAttribute('onclick', `deleteCrop('${encodeURIComponent(newCropName)}')`);
                    row.setAttribute('data-optimal-temperature', optimal_temperature);
                    row.setAttribute('data-optimal-humidity', optimal_humidity);
                    row.setAttribute('data-optimal-moisture', optimal_moisture);
                    row.setAttribute('data-optimal-light', optimal_light);
                    row.setAttribute('data-optimal-ph', optimal_ph);
                    row.setAttribute('data-optimal-n', optimal_n);
                    row.setAttribute('data-optimal-p', optimal_p);
                    row.setAttribute('data-optimal-k', optimal_k);
                }
                $('#editCropModal').modal('hide');
                showNotification('Crop data updated successfully.', 'success');
            } else {
                showNotification('Failed to update crop data: ' + (data.message || 'Unknown error'), 'danger');
            }
        })
        .catch(err => {
            showNotification('Error: ' + err.message, 'danger');
        });
    });
    // Enhanced notification (already present, just make sure it's styled)
    function showNotification(message, type = 'success', duration = 3500) {
        const container = document.getElementById('notification-container');
        const alertDiv = document.createElement('div');
        alertDiv.className = `alert alert-${type} alert-dismissible fade show shadow-lg border-0 px-4 py-3 mb-2`;
        alertDiv.role = 'alert';
        alertDiv.innerHTML = `
            <div class="d-flex align-items-center">
                <i class="fa ${type === 'success' ? 'fa-check-circle text-success' : type === 'danger' ? 'fa-times-circle text-danger' : type === 'warning' ? 'fa-exclamation-triangle text-warning' : 'fa-info-circle text-info'} fa-lg mr-2"></i>
                <span class="flex-grow-1">${message}</span>
                <button type="button" class="close ml-3" data-dismiss="alert" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
        `;
        container.appendChild(alertDiv);
        setTimeout(() => {
            if (alertDiv.parentNode) {
                $(alertDiv).alert('close');
            }
        }, duration);
    }

    // Global confirmation modal logic
    function showConfirm(message, yesCallback) {
        document.getElementById('globalConfirmModalBody').innerHTML = message;
        $('#globalConfirmModal').modal('show');
        const yesBtn = document.getElementById('globalConfirmModalYesBtn');
        // Remove previous listeners
        const newYesBtn = yesBtn.cloneNode(true);
        yesBtn.parentNode.replaceChild(newYesBtn, yesBtn);
        newYesBtn.addEventListener('click', function() {
            $('#globalConfirmModal').modal('hide');
            if (typeof yesCallback === 'function') yesCallback();
        });
    }

    // Replace deleteCrop to use confirmation modal
    function deleteCrop(cropName) {
        showConfirm('Are you sure you want to unregister this crop?', function() {
            fetch('/unregister-crop', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Accept': 'application/json',
                },
                body: JSON.stringify({ cropName: decodeURIComponent(cropName) })
            })
            .then(res => res.json())
            .then(data => {
                if (data.success) {
                    const row = document.querySelector(`button[onclick=\"deleteCrop('${cropName}')\"]`).closest('tr');
                    if (row) row.remove();
                    showNotification('Crop unregistered successfully.', 'success');
                } else {
                    showNotification('Failed to unregister crop: ' + (data.message || 'Unknown error'), 'danger');
                }
            })
            .catch(err => {
                showNotification('Error: ' + err.message, 'danger');
            });
        });
    }

    document.getElementById('registerCropForm').addEventListener('submit', function(e) {
        e.preventDefault();
        const formData = new FormData(this);
        const cropData = {
            cropName: formData.get('cropName'),
            optimal_temperature: formData.get('optimal_temperature') || null,
            optimal_humidity: formData.get('optimal_humidity') || null,
            optimal_moisture: formData.get('optimal_moisture') || null,
            optimal_light: formData.get('optimal_light') || null,
            optimal_ph: formData.get('optimal_ph') || null,
            optimal_n: formData.get('optimal_n') || null,
            optimal_p: formData.get('optimal_p') || null,
            optimal_k: formData.get('optimal_k') || null
        };
        const submitBtn = this.querySelector('button[type="submit"]');
        const originalText = submitBtn.innerHTML;
        submitBtn.innerHTML = '<i class="fa fa-spinner fa-spin me-1"></i>Registering...';
        submitBtn.disabled = true;
        fetch('/register-crop-with-ai', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Accept': 'application/json',
            },
            body: JSON.stringify(cropData)
        })
        .then(res => res.json())
        .then(data => {
            if (data.success) {
                showNotification('Crop registered successfully!', 'success');
                $('#registerCropModal').modal('hide');
                setTimeout(() => { location.reload(); }, 1500);
            } else {
                showNotification('Failed to register crop: ' + (data.message || 'Unknown error'), 'danger');
            }
        })
        .catch(err => {
            showNotification('Error: ' + err.message, 'danger');
        })
        .finally(() => {
            submitBtn.innerHTML = originalText;
            submitBtn.disabled = false;
        });
    });

    // Tooltip initialization
    $(function () {
        $('[data-toggle="tooltip"]').tooltip();
    });
    // Floating button opens register modal
    document.getElementById('floatingRegisterCropBtn').addEventListener('click', function() {
        $('#registerCropModal').modal('show');
    });

    // Plant this Crop button handler
    const plantBtn = document.getElementById('plantCropBtn');
    if (plantBtn) {
        plantBtn.addEventListener('click', async function() {
            if (!selectedCropForPlanting) return;

            // If not registered, ask to register
            if (!selectedCropForPlanting.isRegistered) {
                showConfirm('This crop is not registered. Do you want to register it before planting?', async function() {
                    // Register the crop
                    try {
                        const cropId = selectedCropForPlanting.id;
                        if (!cropId) {
                            showNotification('Crop ID not found. Cannot register.', 'danger');
                            return;
                        }
                        const regRes = await fetch(`/api/crops/${cropId}/register`, { method: 'POST' });
                        const regData = await regRes.json();
                        if (!regData.success) {
                            showNotification(regData.message || 'Failed to register crop.', 'danger');
                            return;
                        }
                        // Mark as registered locally so the next step works
                        selectedCropForPlanting.isRegistered = true;
                    } catch (err) {
                        showNotification('Server error while registering crop.', 'danger');
                        return;
                    }
                    // Continue to planting after registration
                    doPlantCrop();
                });
                return;
            }

            doPlantCrop();
            async function doPlantCrop() {
                plantBtn.disabled = true;
                plantBtn.innerHTML = '<span class="spinner-border spinner-border-sm"></span> Planting...';
                try {
                    const res = await fetch('/confirmCropSelection', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ cropData: selectedCropForPlanting })
                    });
                    const data = await res.json();
                    if (data.success) {
                        showNotification(data.message, 'success');
                        $('#cropDetailsModal').modal('hide');
                        setTimeout(() => { window.location.href = '/plant-overview'; }, 1200);
                    } else {
                        showNotification(data.error || data.message || 'Failed to plant crop.', 'danger');
                    }
                } catch (err) {
                    showNotification('Server error. Please try again.', 'danger');
                } finally {
                    plantBtn.disabled = false;
                    plantBtn.innerHTML = '<i class="fas fa-seedling mr-2"></i>Plant this Crop';
                }
            }
        });
    }

    // Plant this Crop button handler for registered crops
    const plantRegisteredBtn = document.getElementById('plantRegisteredCropBtn');
    if (plantRegisteredBtn) {
        plantRegisteredBtn.addEventListener('click', async function() {
            if (!selectedCropForPlanting) return;

            plantRegisteredBtn.disabled = true;
            plantRegisteredBtn.innerHTML = '<span class="spinner-border spinner-border-sm"></span> Planting...';
            try {
                const res = await fetch('/confirmCropSelection', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ cropData: selectedCropForPlanting })
                });
                const data = await res.json();
                if (data.success) {
                    showNotification(data.message, 'success');
                    $('#registeredCropDetailsModal').modal('hide');
                    setTimeout(() => { window.location.href = '/plant-overview'; }, 1200);
                } else {
                    showNotification(data.error || data.message || 'Failed to plant crop.', 'danger');
                }
            } catch (err) {
                showNotification('Server error. Please try again.', 'danger');
            } finally {
                plantRegisteredBtn.disabled = false;
                plantRegisteredBtn.innerHTML = '<i class="fas fa-seedling mr-2"></i>Plant this Crop';
            }
        });
    }

    // Auto-open modal if crop was selected from previous page
    const cropName = sessionStorage.getItem('selectedCrop');
    if (cropName) {
        const crop = recommendationsData.find(c => c.name === cropName);
        if (crop) showCropDetails(crop);
        sessionStorage.removeItem('selectedCrop');
    }

    // Registered crop row click handler
    document.querySelectorAll('.crop-row').forEach(row => {
        row.addEventListener('click', async function(e) {
            // Don't trigger if clicking on action buttons
            if (e.target.closest('.action-btn')) {
                return;
            }
            
            const cropName = this.dataset.cropName;
            if (!cropName) return;
            
            try {
                const response = await fetch(`/api/crops/${encodeURIComponent(cropName)}/details`);
                const data = await response.json();
                
                if (data.success) {
                    showRegisteredCropDetails(data.crop);
                } else {
                    showNotification('Failed to load crop details: ' + data.message, 'danger');
                }
            } catch (error) {
                console.error('Error fetching crop details:', error);
                showNotification('Error loading crop details. Please try again.', 'danger');
            }
        });
    });

    // Function to show registered crop details modal
    function showRegisteredCropDetails(crop) {
        selectedCropForPlanting = crop; // Set the selected crop for planting
        document.getElementById('registeredCropModalTitle').textContent = crop.name;
        
        // Use the calculated overall match from the server
        const overallMatch = crop.overallMatch || 0;
        document.getElementById('registeredOverallMatch').textContent = `${overallMatch}%`;
        
        // Find best and worst matches from analysis
        const analysis = crop.analysis || {};
        const bestMatch = analysis.bestParameter || ['', 0];
        const worstMatch = analysis.worstParameter || ['', 100];
        
        document.getElementById('registeredBestMatchParam').textContent = bestMatch[0] ? 
            `${bestMatch[0].replace('npk_', '').toUpperCase()} (${Math.round(bestMatch[1])}%)` : '--';
        document.getElementById('registeredWorstMatchParam').textContent = worstMatch[0] ? 
            `${worstMatch[0].replace('npk_', '').toUpperCase()} (${Math.round(worstMatch[1])}%)` : '--';
        
        // Optimal conditions
        const opt = crop.optimalConditions || {};
        document.getElementById('registeredOptimalConditions').innerHTML = `
            <table class='info-table'>
                <tr><td>Temperature</td><td>${opt.temperature || 'N/A'}°C</td></tr>
                <tr><td>Humidity</td><td>${opt.humidity || 'N/A'}%</td></tr>
                <tr><td>Soil Moisture</td><td>${opt.moisture || 'N/A'}%</td></tr>
                <tr><td>pH Level</td><td>${opt.ph || 'N/A'}</td></tr>
                <tr><td>Light Intensity</td><td>${opt.light || 'N/A'} lux</td></tr>
                <tr><td>Nitrogen (N)</td><td>${opt.npk_N || 'N/A'} ppm</td></tr>
                <tr><td>Phosphorus (P)</td><td>${opt.npk_P || 'N/A'} ppm</td></tr>
                <tr><td>Potassium (K)</td><td>${opt.npk_K || 'N/A'} ppm</td></tr>
            </table>
        `;
        
        // Enhanced parameter matches with analysis
        const sensorData = crop.sensorData || {};
        const parameterAnalysis = crop.parameterAnalysis || {};
        const criticalIssues = analysis.criticalIssues || [];
        const recommendations = analysis.recommendations || [];
        
        let parameterMatchesHTML = `
            <div class="mb-3">
                <div class="section-title"><i class="fas fa-chart-line"></i> Current Sensor Data</div>
                <table class="info-table">
                    <tr><td>Temperature</td><td>${sensorData.temperature || 'N/A'}°C</td></tr>
                    <tr><td>Humidity</td><td>${sensorData.humidity || 'N/A'}%</td></tr>
                    <tr><td>Soil Moisture</td><td>${sensorData.moisture || 'N/A'}%</td></tr>
                    <tr><td>pH Level</td><td>${sensorData.ph || 'N/A'}</td></tr>
                    <tr><td>Light Intensity</td><td>${sensorData.light || 'N/A'} lux</td></tr>
                    <tr><td>Nitrogen (N)</td><td>${sensorData.nitrogen || 'N/A'} ppm</td></tr>
                    <tr><td>Phosphorus (P)</td><td>${sensorData.phosphorus || 'N/A'} ppm</td></tr>
                    <tr><td>Potassium (K)</td><td>${sensorData.potassium || 'N/A'} ppm</td></tr>
                </table>
            </div>
        `;
        
        // Parameter match percentages with status indicators
        parameterMatchesHTML += `
            <div class="mb-3">
                <div class="section-title"><i class="fas fa-percentage"></i> Parameter Match Analysis</div>
                ${Object.entries(parameterAnalysis).map(([key, analysis]) => {
                    const paramName = key.replace('npk_', '').toUpperCase();
                    const statusClass = getStatusClass(analysis.status);
                    const statusIcon = getStatusIcon(analysis.status);
                    return `
                        <div class='mb-3 p-3 border rounded' style='background: ${getStatusBackground(analysis.status)}'>
                            <div class='d-flex justify-content-between align-items-center mb-2'>
                                <span class='font-weight-bold'>${paramName}</span>
                                <span class='badge ${statusClass}'>${statusIcon} ${analysis.status.toUpperCase()}</span>
                            </div>
                            <div class='d-flex justify-content-between mb-2'>
                                <span>Match: ${Math.round(analysis.match)}%</span>
                                <span>Optimal: ${analysis.optimal || 'N/A'} | Current: ${analysis.current || 'N/A'}</span>
                            </div>
                            <div class='param-match-bar mb-2'>
                                <div class='param-match-bar-inner' style='width: ${analysis.match}%; background: ${getProgressColor(analysis.match)};'></div>
                            </div>
                            <div class='small text-muted'>${analysis.recommendation}</div>
                        </div>
                    `;
                }).join('') || '<div class="text-muted">No parameter analysis data.</div>'}
            </div>
        `;
        
        // Critical issues and recommendations
        if (criticalIssues.length > 0 || recommendations.length > 0) {
            parameterMatchesHTML += `
                <div class="mb-3">
                    <div class="section-title"><i class="fas fa-exclamation-triangle"></i> Issues & Recommendations</div>
                    ${criticalIssues.map(issue => `
                        <div class='alert alert-${issue.severity === 'critical' ? 'danger' : 'warning'} mb-2'>
                            <i class='fas fa-exclamation-circle mr-2'></i>
                            <strong>${issue.parameter.toUpperCase()}:</strong> ${issue.issue}
                        </div>
                    `).join('')}
                    ${recommendations.map(rec => `
                        <div class='alert alert-info mb-2'>
                            <i class='fas fa-info-circle mr-2'></i>${rec}
                        </div>
                    `).join('')}
                </div>
            `;
        }
        
        document.getElementById('registeredParameterMatches').innerHTML = parameterMatchesHTML;
        
        $('#registeredCropDetailsModal').modal('show');
    }
    
    // Helper function to get status class
    function getStatusClass(status) {
        switch (status) {
            case 'excellent': return 'badge-success';
            case 'good': return 'badge-info';
            case 'acceptable': return 'badge-warning';
            case 'poor': return 'badge-warning';
            case 'critical': return 'badge-danger';
            default: return 'badge-secondary';
        }
    }
    
    // Helper function to get status icon
    function getStatusIcon(status) {
        switch (status) {
            case 'excellent': return 'fas fa-star';
            case 'good': return 'fas fa-check-circle';
            case 'acceptable': return 'fas fa-exclamation-triangle';
            case 'poor': return 'fas fa-exclamation-triangle';
            case 'critical': return 'fas fa-times-circle';
            default: return 'fas fa-question-circle';
        }
    }
    
    // Helper function to get status background
    function getStatusBackground(status) {
        switch (status) {
            case 'excellent': return '#d4edda';
            case 'good': return '#d1ecf1';
            case 'acceptable': return '#fff3cd';
            case 'poor': return '#f8d7da';
            case 'critical': return '#f8d7da';
            default: return '#f8f9fa';
        }
    }
    </script>
</body>
</html>
