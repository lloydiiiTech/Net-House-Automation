<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width initial-scale=1.0">
    <title>NetHouseAutomation Dashboard</title>
    <!-- GLOBAL MAINLY STYLES-->
    <link href="./assets/vendors/bootstrap/dist/css/bootstrap.min.css" rel="stylesheet" />
    <link href="./assets/vendors/font-awesome/css/font-awesome.min.css" rel="stylesheet" />
    <link href="./assets/vendors/themify-icons/css/themify-icons.css" rel="stylesheet" />
    <!-- PLUGINS STYLES-->
    <link href="./assets/vendors/jvectormap/jquery-jvectormap-2.0.3.css" rel="stylesheet" />
    <!-- THEME STYLES-->
    <link href="assets/css/main.min.css" rel="stylesheet" />
    <!-- PAGE LEVEL STYLES-->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <link href="./assets/vendors/fullcalendar/dist/fullcalendar.min.css" rel="stylesheet" />
    <link href="./assets/vendors/fullcalendar/dist/fullcalendar.print.min.css" rel="stylesheet" media="print" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/weather-icons/2.0.10/css/weather-icons.min.css">

</head>

<body class="fixed-navbar">
    <div class="page-wrapper">
        <!-- START HEADER-->
        <header class="header">
            <div class="page-brand">
                <a class="link" href="/dashboard">
                    <span class="brand">Demo
                        <span class="brand-tip">FARM</span>
                    </span>
                    <span class="brand-mini">DF</span>
                </a>
            </div>
            <div class="flexbox flex-1">
                <!-- START TOP-LEFT TOOLBAR-->
                <ul class="nav navbar-toolbar">
                    <li>
                        <a class="nav-link sidebar-toggler js-sidebar-toggler"><i class="ti-menu"></i></a>
                    </li>
                    <!--<li>
                        <form class="navbar-search" action="javascript:;">
                            <div class="rel">
                                <span class="search-icon"><i class="ti-search"></i></span>
                                <input class="form-control" placeholder="Search here...">
                            </div>
                        </form>
                    </li>-->
                </ul>
                <!-- END TOP-LEFT TOOLBAR-->
                <!-- START TOP-RIGHT TOOLBAR-->
                <ul class="nav navbar-toolbar">
                    <li>
                        <a class="nav-link" href="#" id="pendingUsersBtn">
                            <i class="fa fa-user-clock"></i>
                            <span class="badge badge-danger" id="pendingUsersCount" style="display: none;">0</span>
                        </a>
                    </li>
                    <li class="dropdown dropdown-user">
                        <a class="nav-link dropdown-toggle link" data-toggle="dropdown">
                            <img src="<%= user.profilePicture %>" />
                            <span></span><%= user.name %><i class="fa fa-angle-down m-l-5"></i>
                        </a>
                        <ul class="dropdown-menu dropdown-menu-right">
                            <a class="dropdown-item" href="/profile"><i class="fa fa-user"></i>Profile</a>
                            <li class="dropdown-divider"></li>
                            <a class="dropdown-item" href="/logout"><i class="fa fa-power-off"></i>Logout</a>
                        </ul>
                    </li>
                </ul>
                <!-- END TOP-RIGHT TOOLBAR-->
            </div>
        </header>
        <!-- END HEADER-->
        <!-- START SIDEBAR-->
        <nav class="page-sidebar" id="sidebar">
            <div id="sidebar-collapse">
                <div class="admin-block d-flex">
                    <div>
                        <img src="<%= user.profilePicture %>" width="45px" />
                    </div>
                    <div class="admin-info">
                        <div class="font-strong"><%= user.name %></div>
                        <small><%= user.role %></small>
                    </div>
                </div>
                <ul class="side-menu metismenu">
                    <li>
                        <a href="/dashboard"><i class="sidebar-item-icon fas fa-tachometer-alt"></i>
                            <span class="nav-label">Dashboard</span>
                        </a>
                    </li>
                    <li>
                        <a href="/plant-overview"><i class="sidebar-item-icon fas fa-leaf"></i>
                            <span class="nav-label">Plant Overview</span>
                        </a>
                    </li>
                    <li>
                        <a href="/irrigation-controll"><i class="sidebar-item-icon fas fa-faucet"></i>
                            <span class="nav-label">Irrigation Control</span>
                        </a>
                    </li>
                    <li>
                        <a href="/reports&analytics"><i class="sidebar-item-icon fas fa-chart-bar"></i>
                            <span class="nav-label">Reports & Analytics</span>
                        </a>
                    </li>
                    <li>
                        <a href="/user-management"><i class="sidebar-item-icon fas fa-users-cog"></i>
                            <span class="nav-label">User Management</span>
                        </a>
                    </li>
                    <li>
                        <a class="active" href="/crop-recommendations"><i class="sidebar-item-icon fas fa-seedling"></i>
                            <span class="nav-label">Crop Recommendations</span>
                        </a>
                    </li>
                </ul>
            </div>
        </nav>
        <div class="content-wrapper">
          <% if (typeof currentCrop !== 'undefined' && currentCrop && currentCrop.name) { %>
            <div class="page-content fade-in-up">
                <!-- Modern Dashboard Header -->
                <div class="row mb-4">
                    <div class="col-12">
                    <div class="card shadow-lg border-0" style="border-radius: 24px; background: linear-gradient(120deg, #e0ffe7 0%, #f8f9fa 100%);">
                      <div class="card-body d-flex flex-column flex-md-row align-items-center justify-content-between p-4">
                        <div class="d-flex align-items-center mb-3 mb-md-0">
                          <div class="dashboard-crop-icon d-flex align-items-center justify-content-center mr-4" style="width: 70px; height: 70px; background: linear-gradient(135deg, #28a745 0%, #1a7f3a 100%); border-radius: 50%;">
                            <i class="fas fa-seedling fa-2x text-white"></i>
                        </div>
                        <div>
                            <h2 class="font-weight-bold mb-1" style="color:#1a7f3a; letter-spacing: 1px;"><%= currentCrop.name %></h2>
                            <div>
                              <span class="badge badge-pill px-3 py-2 mr-2 bg-white text-success" style="font-weight:600; font-size:1rem;">Active</span>
                            <% let gs = (currentCrop.growthStage || 'Seedling').toLowerCase(); %>
                              <span class="badge badge-pill px-3 py-2 mr-2 <%=
                                gs === 'seedling' ? 'bg-secondary' :
                                gs === 'vegetative' ? 'bg-info' :
                                gs === 'flowering' ? 'bg-warning' :
                                gs === 'fruiting' ? 'bg-orange' :
                                gs === 'mature' ? 'bg-success' : 'bg-secondary' %> text-white" style="font-weight:600; font-size:1rem;">
                              <%= currentCrop.growthStage || 'Seedling' %>
                            </span>
                            <% let hs = (currentCrop.healthStatus || 'Unknown').toLowerCase(); %>
                              <span class="badge badge-pill px-3 py-2 <%=
                                hs === 'good' ? 'bg-success' :
                                hs === 'warning' ? 'bg-warning' :
                                hs === 'critical' ? 'bg-danger' : 'bg-secondary' %> text-white" style="font-weight:600; font-size:1rem;">
                              <%= currentCrop.healthStatus || 'Unknown' %>
                            </span>
                          </div>
                        </div>
                      </div>
                        <div class="d-flex flex-wrap align-items-center justify-content-center">
                          <div class="mx-3 text-center">
                            <div class="text-muted small">Health Score</div>
                            <div class="font-weight-bold" style="color:#28a745; font-size:1.5rem;"><%= currentCrop.healthScore %>%</div>
                            <div class="progress mx-auto" style="height: 10px; width: 80px; background:#e9ecef;">
                              <% let safeHealthScore = Math.max(0, Math.min(100, parseInt(currentCrop.healthScore) || 0)); %>
                              <div class="progress-bar <%= hs === 'good' ? 'bg-success' : hs === 'warning' ? 'bg-warning' : hs === 'critical' ? 'bg-danger' : 'bg-secondary' %>" role="progressbar" style="width: <%= safeHealthScore %>%" aria-valuenow="<%= safeHealthScore %>" aria-valuemin="0" aria-valuemax="100"></div>
                            </div>
                          </div>
                          <div class="mx-3 text-center">
                            <div class="text-muted small">Planted By</div>
                            <div class="font-weight-bold"><i class="fa fa-user mr-1"></i> <%= currentCrop.userName %></div>
                          </div>
                          <div class="mx-3 text-center">
                            <div class="text-muted small">Start Date</div>
                            <div class="font-weight-bold"><i class="fa fa-calendar-alt mr-1"></i> <%= currentCrop.startDate && currentCrop.startDate._seconds ? new Date(currentCrop.startDate._seconds * 1000).toLocaleDateString() : '--' %></div>
                          </div>
                          <div class="mx-3 text-center align-self-end">
                            <button class="btn btn-danger btn-sm mr-2" id="cancel-crop-btn"><i class="fa fa-times"></i> Cancel</button>
                            <button class="btn btn-success btn-sm" id="harvest-btn"><i class="fa fa-seedling"></i> Harvest</button>
                          </div>
                        </div>
                            </div>
                          </div>
                            </div>
                          </div>

                <!-- Main Content Layout -->
                <div class="row">
                  <!-- Left Column: Crop Details, Disease, Fertilizer -->
                  <div class="col-lg-6 mb-4">
                    <div class="row">
                      <!-- Optimal Conditions Card -->
                      <div class="col-12 col-md-6 mb-4">
                        <div class="card shadow-sm border-0 h-100" style="border-radius: 18px;">
                          <div class="card-body p-4">
                            <h5 class="font-weight-bold mb-3" style="color:#1a7f3a;"><i class="fa fa-cogs mr-2"></i>Optimal Conditions</h5>
                            <div class="row">
                              <div class="col-12 mb-2"><strong>Temperature:</strong> <%= currentCrop.optimalConditions?.temperature %>°C</div>
                              <div class="col-12 mb-2"><strong>Humidity:</strong> <%= currentCrop.optimalConditions?.humidity %>%</div>
                              <div class="col-12 mb-2"><strong>Moisture:</strong> <%= currentCrop.optimalConditions?.moisture %>%</div>
                              <div class="col-12 mb-2"><strong>Light:</strong> <%= currentCrop.optimalConditions?.light %> lux</div>
                              <div class="col-12 mb-2"><strong>Nitrogen (N):</strong> <%= currentCrop.optimalConditions?.npk_N %> ppm</div>
                              <div class="col-12 mb-2"><strong>Phosphorus (P):</strong> <%= currentCrop.optimalConditions?.npk_P %> ppm</div>
                              <div class="col-12 mb-2"><strong>Potassium (K):</strong> <%= currentCrop.optimalConditions?.npk_K %> ppm</div>
                              <div class="col-12 mb-2"><strong>pH:</strong> <%= currentCrop.optimalConditions?.ph %></div>
                        </div>
                                </div>
                        </div>
                      </div>
                      <!-- Parameter Matches Card -->
                      <div class="col-12 col-md-6 mb-4">
                        <div class="card shadow-sm border-0 h-100" style="border-radius: 18px;">
                          <div class="card-body p-4">
                            <h5 class="font-weight-bold mb-3" style="color:#1a7f3a;"><i class="fa fa-percentage mr-2"></i>Parameter Matches</h5>
                            <div class="row">
                              <div class="col-12 mb-2"><strong>Temperature:</strong> <%= Math.round(currentCrop.parameterMatches?.temperature || 0) %>%</div>
                              <div class="col-12 mb-2"><strong>Humidity:</strong> <%= Math.round(currentCrop.parameterMatches?.humidity || 0) %>%</div>
                              <div class="col-12 mb-2"><strong>Moisture:</strong> <%= Math.round(currentCrop.parameterMatches?.moisture || 0) %>%</div>
                              <div class="col-12 mb-2"><strong>Light:</strong> <%= Math.round(currentCrop.parameterMatches?.light || 0) %>%</div>
                              <div class="col-12 mb-2"><strong>Nitrogen (N):</strong> <%= Math.round(currentCrop.parameterMatches?.npk_N || 0) %>%</div>
                              <div class="col-12 mb-2"><strong>Phosphorus (P):</strong> <%= Math.round(currentCrop.parameterMatches?.npk_P || 0) %>%</div>
                              <div class="col-12 mb-2"><strong>Potassium (K):</strong> <%= Math.round(currentCrop.parameterMatches?.npk_K || 0) %>%</div>
                              <div class="col-12 mb-2"><strong>pH:</strong> <%= Math.round(currentCrop.parameterMatches?.ph || 0) %>%</div>
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>
                    <!-- Disease Card -->
                    <div class="card shadow-sm mb-4 border-0" style="border-radius: 18px; border-left: 8px solid #ffb300;">
                      <div class="card-header bg-white d-flex align-items-center" style="border-radius: 18px 18px 0 0; border-bottom: none;">
                        <i class="fas fa-bug fa-lg text-warning mr-3"></i>
                        <h4 class="mb-0 font-weight-bold" style="color:#ff9800;">Possible Diseases & Prevention</h4>
                      </div>
                      <div class="card-body">
                        <div class="diseases-container">
                          <% if (typeof aiDiseaseAdvice !== 'undefined' && aiDiseaseAdvice && aiDiseaseAdvice.diseases && aiDiseaseAdvice.diseases.length > 0) { %>
                            <% aiDiseaseAdvice.diseases.forEach((disease, index) => { %>
                              <div class="disease-item mb-4 p-3 bg-light rounded d-flex align-items-start shadow-sm" style="border-left: 6px solid #ffb300;">
                                <div class="mr-3"><i class="fas fa-exclamation-triangle text-warning fa-lg"></i></div>
                                <div>
                                  <div class="disease-name mb-1 font-weight-bold" style="font-size:1.1rem;"><%= disease.disease %></div>
                                  <div class="disease-prevention small"><i class="fas fa-shield-alt text-info mr-2"></i><%= disease.prevention %></div>
                                </div>
                              </div>
                            <% }); %>
                              <% } else { %>
                            <div class="empty-state">
                              <div class="empty-state-icon">
                                <i class="fas fa-shield-virus"></i>
                              </div>
                              <h6 class="empty-state-title">No Disease Information</h6>
                              <p class="empty-state-text">Disease information will appear here when a crop is selected and AI analysis is available.</p>
                            </div>
                              <% } %>
                            </div>
                          </div>
                        </div>
                    <!-- Fertilizer Card -->
                    <div class="card shadow-sm border-0" style="border-radius: 18px; border-left: 8px solid #28a745;">
                      <div class="card-header bg-white d-flex align-items-center" style="border-radius: 18px 18px 0 0; border-bottom: none;">
                        <i class="fas fa-flask fa-lg text-success mr-3"></i>
                        <h4 class="mb-0 font-weight-bold" style="color:#28a745;">Suggested Chemical Fertilizers</h4>
                      </div>
                      <div class="card-body">
                        <div class="fertilizers-container">
                          <% if (typeof aiFertilizerAdvice !== 'undefined' && aiFertilizerAdvice && aiFertilizerAdvice.fertilizers && aiFertilizerAdvice.fertilizers.length > 0) { %>
                            <% aiFertilizerAdvice.fertilizers.forEach((fertilizer, index) => { %>
                              <div class="fertilizer-item mb-4 p-3 bg-light rounded d-flex align-items-start shadow-sm" style="border-left: 6px solid #28a745;">
                                <div class="mr-3"><i class="fas fa-flask text-success fa-lg"></i></div>
                                <div>
                                  <div class="fertilizer-name mb-1 font-weight-bold" style="font-size:1.1rem;"><%= fertilizer.name %></div>
                                  <div class="fertilizer-details small">
                                    <div class="fertilizer-reason mb-1"><i class="fas fa-info-circle text-info mr-2"></i><strong>Reason:</strong> <%= fertilizer.reason %></div>
                                    <div class="fertilizer-effect mb-1"><i class="fas fa-leaf text-success mr-2"></i><strong>Effect:</strong> <%= fertilizer.effect %></div>
                                    <div class="fertilizer-application"><i class="fas fa-tools text-warning mr-2"></i><strong>Application:</strong> <%= fertilizer.application %></div>
                                  </div>
                                </div>
                              </div>
                            <% }); %>
                          <% } else { %>
                            <div class="empty-state">
                              <div class="empty-state-icon">
                                <i class="fas fa-seedling"></i>
                              </div>
                              <h6 class="empty-state-title">No Fertilizer Recommendations</h6>
                              <p class="empty-state-text">Fertilizer recommendations will appear here when a crop is selected and AI analysis is available.</p>
                            </div>
                          <% } %>
                      </div>
                    </div>
                  </div>
                </div>

                  <!-- Right Column: Sensor Grid -->
                  <div class="col-lg-6 mb-4">
                    <!-- Live Sensor Data Card (right column) -->
                    <div class="card weather-summary-card mt-4" style="border-radius: 14px; background: linear-gradient(135deg, #56ccf2 0%, #2f80ed 100%); color: white;">
                          <div class="card-body d-flex flex-column flex-md-row align-items-center justify-content-between">
                            <div class="d-flex align-items-center mb-3 mb-md-0">
                              <i class="wi wi-day-sunny weather-icon mr-3" style="font-size:2.5rem;"></i>
                              <div>
                                <div class="weather-temp" id="weather-temp-summary" style="font-size:2rem; font-weight:bold;">--°C</div>
                                <div class="weather-desc" id="weather-desc-summary">Loading weather...</div>
                              </div>
                            </div>
                            <div class="d-flex flex-column flex-md-row align-items-center">
                              <div class="weather-stat mr-md-4 mb-2 mb-md-0">
                                <i class="wi wi-humidity mr-1"></i>
                                <span id="weather-humidity-summary">--%</span> Humidity
                              </div>
                              <div class="weather-stat">
                                <i class="wi wi-strong-wind mr-1"></i>
                                <span id="weather-wind-summary">-- km/h</span> Wind
                              </div>
                            </div>
                          </div>
                        </div>
                    <div class="card shadow-lg border-0 h-100" style="border-radius: 18px;">
                      <div class="card-header bg-white d-flex align-items-center" style="border-radius: 18px 18px 0 0; border-bottom: none;">
                        <i class="fas fa-microchip fa-lg text-primary mr-3"></i>
                        <h4 class="mb-0 font-weight-bold" style="color:#007bff;">Live Sensor Data</h4>
                      </div>
                      <div class="card-body">
                        <div class="sensor-grid mb-4">
                            <div class="sensor-card" data-sensor-id="nitrogen">
                                <div class="sensor-icon bg-success">
                                    <i class="fas fa-atom"></i>
                                </div>
                                <div class="sensor-value">-- ppm</div>
                                <div class="sensor-label">Nitrogen (N)</div>
                                <div class="sensor-status text-muted">
                                    <i class="fa fa-spinner fa-spin"></i> Loading...
                                </div>
                            </div>
                            <div class="sensor-card" data-sensor-id="phosphorus">
                                <div class="sensor-icon bg-info">
                                    <i class="fas fa-fire"></i>
                                </div>
                                <div class="sensor-value">-- ppm</div>
                                <div class="sensor-label">Phosphorus (P)</div>
                                <div class="sensor-status text-muted">
                                    <i class="fa fa-spinner fa-spin"></i> Loading...
                                </div>
                            </div>
                            <div class="sensor-card" data-sensor-id="potassium">
                                <div class="sensor-icon bg-warning">
                                    <i class="fas fa-bolt"></i>
                                </div>
                                <div class="sensor-value">-- ppm</div>
                                <div class="sensor-label">Potassium (K)</div>
                                <div class="sensor-status text-muted">
                                    <i class="fa fa-spinner fa-spin"></i> Loading...
                                </div>
                            </div>
                            <div class="sensor-card" data-sensor-id="humidity">
                                <div class="sensor-icon bg-info">
                                    <i class="fas fa-tint"></i>
                                </div>
                                <div class="sensor-value">--%</div>
                                <div class="sensor-label">Humidity</div>
                                <div class="sensor-status text-muted">
                                    <i class="fa fa-spinner fa-spin"></i> Loading...
                                </div>
                            </div>
                            <div class="sensor-card" data-sensor-id="temperature">
                                <div class="sensor-icon bg-danger">
                                    <i class="fas fa-thermometer-half"></i>
                                </div>
                                <div class="sensor-value">--°C</div>
                                <div class="sensor-label">Temperature</div>
                                <div class="sensor-status text-muted">
                                    <i class="fa fa-spinner fa-spin"></i> Loading...
                                </div>
                            </div>
                            <div class="sensor-card" data-sensor-id="moisture">
                                <div class="sensor-icon bg-primary">
                                    <i class="fas fa-water"></i>
                                </div>
                                <div class="sensor-value">--%</div>
                                <div class="sensor-label">Soil Moisture</div>
                                <div class="sensor-status text-muted">
                                    <i class="fa fa-spinner fa-spin"></i> Loading...
                                </div>
                            </div>
                            <div class="sensor-card" data-sensor-id="ph">
                                <div class="sensor-icon bg-purple">
                                    <i class="fas fa-flask"></i>
                                </div>
                                <div class="sensor-value">--</div>
                                <div class="sensor-label">pH Level</div>
                                <div class="sensor-status text-muted">
                                    <i class="fa fa-spinner fa-spin"></i> Loading...
                                </div>
                            </div>
                            <div class="sensor-card" data-sensor-id="light">
                                <div class="sensor-icon bg-warning">
                                    <i class="fas fa-sun"></i>
                                </div>
                                <div class="sensor-value">-- lux</div>
                                <div class="sensor-label">Light</div>
                                <div class="sensor-status text-muted">
                                    <i class="fa fa-spinner fa-spin"></i> Loading...
                                </div>
                            </div>
                            <!-- Hidden weather card for data binding -->
                            <div class="sensor-card" data-sensor-id="weather" style="display:none;">
                                <div class="weather-card">
                                    <div class="text-center">
                                        <i class="wi wi-day-sunny weather-icon"></i>
                                        <div class="weather-temp" id="weather-temp">--°C</div>
                                        <div class="weather-desc" id="weather-desc">Loading weather...</div>
                                </div>
                                    <div class="weather-details">
                                        <div class="weather-stat">
                                            <i class="wi wi-humidity"></i>
                                            <div id="weather-humidity">--%</div>
                                        </div>
                                        <div class="weather-stat">
                                            <i class="wi wi-strong-wind"></i>
                                            <div id="weather-wind">-- km/h</div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <!-- Weather Container -->
                    
                        <script>
                          // Sync weather summary card with main weather data
                          function updateWeatherSummaryCard() {
                            document.getElementById('weather-temp-summary').textContent = document.getElementById('weather-temp').textContent;
                            document.getElementById('weather-desc-summary').textContent = document.getElementById('weather-desc').textContent;
                            document.getElementById('weather-humidity-summary').textContent = document.getElementById('weather-humidity').textContent;
                            document.getElementById('weather-wind-summary').textContent = document.getElementById('weather-wind').textContent;
                            // Copy icon class
                            var icon = document.querySelector('.weather-icon');
                            var summaryIcon = document.querySelector('.weather-summary-card .weather-icon');
                            if (icon && summaryIcon) summaryIcon.className = icon.className + ' weather-icon mr-3';
                          }
                          // Update on weather fetch
                          window.addEventListener('DOMContentLoaded', function() {
                            setTimeout(updateWeatherSummaryCard, 500);
                          });
                          setInterval(updateWeatherSummaryCard, 2000);
                        </script>
                        <style>
                          .weather-summary-card {
                            box-shadow: 0 4px 16px rgba(44, 123, 229, 0.10);
                            border: none;
                          }
                          .weather-summary-card .weather-icon {
                            font-size: 2.5rem;
                          }
                          .weather-summary-card .weather-temp {
                            font-size: 2rem;
                            font-weight: bold;
                          }
                          .weather-summary-card .weather-desc {
                            font-size: 1rem;
                            margin-bottom: 0.5rem;
                          }
                          .weather-summary-card .weather-stat {
                            font-size: 1rem;
                            margin-right: 1.5rem;
                            display: flex;
                            align-items: center;
                          }
                          @media (max-width: 767.98px) {
                            .weather-summary-card .card-body {
                              flex-direction: column !important;
                              align-items: flex-start !important;
                            }
                            .weather-summary-card .weather-stat {
                              margin-right: 0;
                              margin-bottom: 0.5rem;
                            }
                          }
                        </style>
                        <!-- End Weather Container -->
                    </div>
                                </div>
                    <!-- Optionally add weather, recommendations, or other widgets here -->
                    </div>
                </div>

    <style>
                /* Extra visual polish for dashboard */
                .dashboard-crop-icon {
                  box-shadow: 0 4px 16px rgba(40,167,69,0.12);
                }
                .card-header.bg-white {
                  background: #fff !important;
                  border-bottom: 1px solid #f0f0f0;
                }
                .card.shadow-sm, .card.shadow-lg {
                  transition: box-shadow 0.2s;
                }
                .card.shadow-sm:hover, .card.shadow-lg:hover {
                  box-shadow: 0 8px 32px rgba(40,167,69,0.10), 0 1.5px 6px rgba(0,0,0,0.04);
                }
                .disease-item, .fertilizer-item {
                  background: #f8f9fa !important;
                  border-radius: 10px !important;
                  transition: box-shadow 0.2s, background 0.2s;
                }
                .disease-item:hover {
                  background: #fffbe7 !important;
                  box-shadow: 0 2px 8px rgba(255, 193, 7, 0.10);
                }
                .fertilizer-item:hover {
                  background: #eaffea !important;
                  box-shadow: 0 2px 8px rgba(40, 167, 69, 0.10);
                }
    .empty-state {
        text-align: center;
        padding: 2rem 1rem;
        background: #f8f9fa;
        border-radius: 10px;
        transition: all 0.3s ease;
    }
    .empty-state-icon {
        width: 80px;
        height: 80px;
        margin: 0 auto 1.5rem;
        background: #ffffff;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        box-shadow: 0 4px 15px rgba(0,0,0,0.1);
    }
    .empty-state-icon i {
        font-size: 2rem;
        color: #6c757d;
        animation: float 3s ease-in-out infinite;
    }
    @keyframes float {
                  0% { transform: translateY(0px); }
                  50% { transform: translateY(-10px); }
                  100% { transform: translateY(0px); }
                }
                @media (max-width: 991.98px) {
                  .dashboard-crop-icon { margin-bottom: 1rem; }
                  .card-header.bg-white { flex-direction: column; align-items: flex-start; }
                  .sensor-grid { grid-template-columns: 1fr !important; }
                }
                @media (max-width: 767.98px) {
                  .card-body.p-4 { padding: 1.25rem !important; }
                  .card-header.bg-white { padding: 1rem 1.25rem !important; }
                  .sensor-grid { gap: 10px !important; }
    }
    </style>

                <div id="toastContainer" class="toast-container position-fixed top-0 end-0 p-3"></div>

                
            
            <style>
            /* Sensor Grid Styles */
            .sensor-grid {
                display: grid;
                    grid-template-columns: repeat(auto-fit, minmax(220px, 1fr));
                gap: 15px;
                    width: 100%;
                    max-width: 100%;
            }
            
            .sensor-card {
                background: white;
                border-radius: 10px;
                padding: 20px;
                text-align: center;
                box-shadow: 0 4px 6px rgba(0,0,0,0.1);
                transition: transform 0.3s ease;
                display: flex;
                flex-direction: column;
                justify-content: space-between;
                    width: 100%;
                    max-width: 100%;
                    min-width: 0;
            }
            
            .sensor-card:hover {
                transform: translateY(-5px);
                box-shadow: 0 6px 12px rgba(0,0,0,0.15);
            }
            
            .sensor-icon {
                width: 50px;
                height: 50px;
                margin: 0 auto 10px;
                border-radius: 50%;
                display: flex;
                align-items: center;
                justify-content: center;
                font-size: 20px;
                color: white;
            }
            
            .sensor-value {
                font-size: 24px;
                font-weight: bold;
                margin: 5px 0;
            }
            
            .sensor-label {
                font-size: 14px;
                color: #666;
                margin-bottom: 5px;
            }
            
            .sensor-status {
                font-size: 12px;
                margin-top: auto;
            }
            
            /* Current Crop Styles */
            .current-crop-display {
                background: white;
                padding: 10px 20px;
                border-radius: 8px;
                box-shadow: 0 2px 4px rgba(0,0,0,0.05);
            }
            
            .current-crop-display .label {
                font-weight: 500;
                color: #666;
                margin-right: 8px;
            }
            
            .current-crop-display .value {
                font-weight: 600;
                color: #2a7f62;
            }
            
            .harvest-btn {
                padding: 10px 20px;
                border-radius: 8px;
                font-weight: 500;
            }
            
            /* Recommendation Box Styles */
            .recommendation-box {
                background: white;
                border-radius: 10px;
                overflow: hidden;
                box-shadow: 0 4px 6px rgba(0,0,0,0.1);
            }
            
            .recommendation-header {
                background: #2a7f62;
                color: white;
                padding: 15px 20px;
            }
            
            .recommendation-header h3 {
                margin: 0;
                font-size: 18px;
            }
            
            .recommendation-list {
                padding: 0;
            }
            
            .crop-item {
                display: flex;
                align-items: center;
                padding: 15px 20px;
                border-bottom: 1px solid #eee;
                cursor: pointer;
                transition: background 0.2s;
            }
            
            .crop-item:hover {
                background: #f9f9f9;
            }
            
            .crop-item.active {
                background: #f0f7f4;
            }
            
            .crop-rank {
                width: 30px;
                height: 30px;
                background: #eee;
                border-radius: 50%;
                display: flex;
                align-items: center;
                justify-content: center;
                font-weight: bold;
                margin-right: 15px;
                flex-shrink: 0;
            }
            
            .crop-item.active .crop-rank,
            .crop-item:hover .crop-rank {
                background: #2a7f62;
                color: white;
            }
            
            .crop-info {
                flex-grow: 1;
            }
            
            .crop-name {
                font-weight: 500;
                margin-bottom: 5px;
            }
            
            .crop-match {
                display: flex;
                align-items: center;
            }
            
            .match-bar {
                height: 4px;
                background: #2a7f62;
                border-radius: 2px;
                margin-right: 10px;
                width: 50px;
            }
            
            .crop-select {
                color: #999;
            }
            
            .crop-item:hover .crop-select {
                color: #2a7f62;
            }
            
            /* Color Classes */
            .bg-success { background: #28a745; }
            .bg-info { background: #17a2b8; }
            .bg-warning { background: #ffc107; }
            .bg-danger { background: #dc3545; }
            .bg-primary { background: #007bff; }
            .bg-purple { background: #6f42c1; }
            .bg-teal { background: #20c997; }
            
            .text-success { color: #28a745; }
            .text-warning { color: #ffc107; }
            .text-danger { color: #dc3545; }
            </style>
            
            <script>
            // Make crop items interactive
            document.querySelectorAll('.crop-item').forEach(item => {
                item.addEventListener('click', function() {
                    // Remove active class from all items
                    document.querySelectorAll('.crop-item').forEach(i => {
                        i.classList.remove('active');
                    });
                    
                    // Add active class to clicked item
                    this.classList.add('active');
                    
                    // Update current crop display
                    const cropName = this.getAttribute('data-crop');
                    document.getElementById('current-crop').textContent = cropName;
                });
            });
            
            // Harvest button functionality
            document.getElementById('harvest-btn').addEventListener('click', () => {
                $('#harvestModal').modal('show');
            });
            </script>
                    <style>
                        .visitors-table tbody tr td:last-child {
                            display: flex;
                            align-items: center;
                        }

                        .visitors-table .progress {
                            flex: 1;
                        }

                        .visitors-table .progress-parcent {
                            text-align: right;
                            margin-left: 10px;
                        }
                    </style>
                 
                <footer class="page-footer">
                    <div class="font-13">2025 © <b>NetHouseAutomation</b> - All rights reserved.</div>
                    <div class="to-top"><i class="fa fa-angle-double-up"></i></div>
                </footer>
            </div>
        </div>
        
        <!-- Pending Users Modal -->
    <div class="modal fade" id="pendingUsersModal" tabindex="-1" role="dialog" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Pending Users</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <div id="pendingUsersList">
                        <!-- Pending users will be loaded here -->
                    </div>
                </div>
            </div>
        </div>
    </div>
        <!-- END THEME CONFIG PANEL-->
        <!-- BEGIN PAGA BACKDROPS-->
        <div class="sidenav-backdrop backdrop"></div>
        <div class="preloader-backdrop">
            <div class="page-preloader">Loading</div>
        </div>
        <!-- END PAGA BACKDROPS-->
        <!-- CORE PLUGINS-->
        <script src="./assets/vendors/jquery/dist/jquery.min.js" type="text/javascript"></script>
        <script src="./assets/vendors/popper.js/dist/umd/popper.min.js" type="text/javascript"></script>
        <script src="./assets/vendors/bootstrap/dist/js/bootstrap.min.js" type="text/javascript"></script>
        <script src="./assets/vendors/metisMenu/dist/metisMenu.min.js" type="text/javascript"></script>
        <script src="./assets/vendors/jquery-slimscroll/jquery.slimscroll.min.js" type="text/javascript"></script>
        <!-- PAGE LEVEL PLUGINS-->
        <script src="./assets/vendors/chart.js/dist/Chart.min.js" type="text/javascript"></script>
        <script src="./assets/vendors/jvectormap/jquery-jvectormap-2.0.3.min.js" type="text/javascript"></script>
        <script src="./assets/vendors/jvectormap/jquery-jvectormap-world-mill-en.js" type="text/javascript"></script>
        <script src="./assets/vendors/jvectormap/jquery-jvectormap-us-aea-en.js" type="text/javascript"></script>
        <script src="./assets/vendors/moment/min/moment.min.js" type="text/javascript"></script>
        <script src="./assets/vendors/fullcalendar/dist/fullcalendar.min.js" type="text/javascript"></script>
        <script src="./assets/vendors/jquery-ui/jquery-ui.min.js" type="text/javascript"></script>
        
        <!-- CORE SCRIPTS-->
        <script src="assets/js/app.min.js" type="text/javascript"></script>
        <!-- PAGE LEVEL SCRIPTS-->
        <script src="./assets/js/scripts/dashboard_1_demo.js" type="text/javascript"></script>

        <script src="./assets/js/scripts/calendar-demo.js" type="text/javascript"></script>

        <!-- Add this HTML for the harvest modal -->
        <div class="modal fade" id="harvestModal" tabindex="-1" role="dialog">
            <div class="modal-dialog modal-lg" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Harvest Crop</h5>
                        <button type="button" class="close" data-dismiss="modal">
                            <span>&times;</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        <div class="mb-3 font-weight-bold text-success">Record your harvest details</div>
                        
                        <div class="row">
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label for="harvestQuantity">Harvest Quantity (kg):</label>
                                    <input type="number" class="form-control" id="harvestQuantity" min="0" step="0.1" required>
                                    <small class="form-text text-muted">Enter the total weight harvested in kilograms</small>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label for="harvestSuccessRate">Success Rate (%):</label>
                                    <input type="number" class="form-control" id="harvestSuccessRate" min="0" max="100" required>
                                    <small class="form-text text-muted">Rate the overall success of this planting (0-100)</small>
                                </div>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label for="harvestQuality">Harvest Quality:</label>
                                    <select class="form-control" id="harvestQuality" required>
                                        <option value="">Select quality</option>
                                        <option value="excellent">Excellent</option>
                                        <option value="good">Good</option>
                                        <option value="average">Average</option>
                                        <option value="poor">Poor</option>
                                        <option value="very_poor">Very Poor</option>
                                    </select>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label for="harvestMethod">Harvest Method:</label>
                                    <input type="text" class="form-control" id="harvestMethod" value="Manual" readonly>
                                    <small class="form-text text-muted">Manual harvesting method</small>
                                </div>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label for="harvestDate">Harvest Date:</label>
                                    <input type="date" class="form-control" id="harvestDate" required>
                                    <small class="form-text text-muted">Date when the crop was harvested</small>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label for="harvestTime">Harvest Time:</label>
                                    <input type="time" class="form-control" id="harvestTime" required>
                                    <small class="form-text text-muted">Time when the crop was harvested</small>
                                </div>
                            </div>
                        </div>

                        <div class="form-group">
                            <label for="harvestNotes">Harvest Notes (optional):</label>
                            <textarea class="form-control" id="harvestNotes" rows="3" placeholder="Add any additional notes about the harvest, conditions, observations, etc."></textarea>
                        </div>

                        <div class="form-group">
                            <label for="harvestChallenges">Challenges Faced (optional):</label>
                            <textarea class="form-control" id="harvestChallenges" rows="2" placeholder="Describe any challenges encountered during the growing period"></textarea>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <div id="harvestLoading" style="display:none;" class="w-100 text-center mb-2">
                            <div class="spinner-border text-primary" role="status">
                                <span class="sr-only">Processing...</span>
                            </div>
                            <div class="mt-2 text-primary">Processing harvest...</div>
                        </div>
                        <div id="harvestAlert" style="display:none;" class="alert mt-2" role="alert"></div>
                        <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                        <button type="button" class="btn btn-success" id="confirmHarvest">
                            <span class="spinner-border spinner-border-sm d-none" role="status" aria-hidden="true"></span>
                            Confirm Harvest
                        </button>
                    </div>
                </div>
            </div>
        </div>

        <!-- Cancel Crop Modal (moved to end of body) -->
        <div class="modal fade" id="cancelCropModal" tabindex="-1" role="dialog">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Cancel Crop</h5>
                        <button type="button" class="close" data-dismiss="modal">
                            <span>&times;</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        <div class="mb-3 font-weight-bold text-danger">Are you sure you want to cancel this planting?</div>
                        <div class="form-group">
                            <label class="mb-2">Type of Cancellation:</label><br>
                            <div class="btn-group btn-group-toggle w-100 mb-3" data-toggle="buttons">
                                <label class="btn btn-outline-danger w-50" id="btnTypeFailed">
                                    <input type="radio" name="cancelType" id="typeFailed" value="failed" autocomplete="off"> Failed
                                </label>
                                <label class="btn btn-outline-warning w-50" id="btnTypeCancelled">
                                    <input type="radio" name="cancelType" id="typeCancelled" value="cancelled" autocomplete="off"> User Cancelled
                                </label>
                            </div>
                        </div>
                        <div class="form-group" id="reasonGroup" style="display:none;">
                            <label for="cancelReason">Reason:</label>
                            <select class="form-control" id="cancelReason" required>
                                <!-- Options will be populated dynamically -->
                            </select>
                        </div>
                        <div class="form-group" id="otherReasonGroup" style="display:none;">
                            <label for="otherReason">Please specify:</label>
                            <textarea class="form-control" id="otherReason" rows="2"></textarea>
                        </div>
                        <!-- Add Explanation Textbox to Cancel Crop Modal -->
                        <div class="form-group" id="explanationGroup">
                            <label for="cancelExplanation">Explanation (optional):</label>
                            <textarea class="form-control" id="cancelExplanation" rows="2" placeholder="Add explanation (optional)"></textarea>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <div id="cancelCropLoading" style="display:none;" class="w-100 text-center mb-2">
                            <div class="spinner-border text-primary" role="status">
                                <span class="sr-only">Processing...</span>
                            </div>
                            <div class="mt-2 text-primary">Processing cancellation...</div>
                        </div>
                        <div id="cancelCropAlert" style="display:none;" class="alert mt-2" role="alert"></div>
                        <button type="button" class="btn btn-danger" id="confirmCancelCrop">
                            <span class="spinner-border spinner-border-sm d-none" role="status" aria-hidden="true"></span>
                            Yes, Cancel
                        </button>
                        <button type="button" class="btn btn-secondary" data-dismiss="modal">No, Go Back</button>
                    </div>
                </div>
            </div>
        </div>
        <script>
        // Cancel button functionality with button group and dropdown reasons
        $(function() {
            const failedReasons = [
                { value: '', text: 'Select reason' },
                { value: 'plant_died', text: 'Plant died' },
                { value: 'pest_infestation', text: 'Pest infestation' },
                { value: 'disease', text: 'Disease' },
                { value: 'poor_soil', text: 'Poor soil condition' },
                { value: 'watering_issue', text: 'Watering issue' },
                { value: 'weather_damage', text: 'Weather damage' },
                { value: 'nutrient_deficiency', text: 'Nutrient deficiency' },
                { value: 'equipment_failure', text: 'Equipment failure' },
                { value: 'other', text: 'Other (specify)' }
            ];
            const cancelledReasons = [
                { value: '', text: 'Select reason' },
                { value: 'wrong_selection', text: 'Wrong crop/seed selected' },
                { value: 'changed_mind', text: 'Changed mind' },
                { value: 'scheduling_conflict', text: 'Scheduling conflict' },
                { value: 'resource_unavailable', text: 'Resource unavailable' },
                { value: 'mistaken_entry', text: 'Mistaken entry' },
                { value: 'personal_reason', text: 'Personal reason' },
                { value: 'other', text: 'Other (specify)' }
            ];
            function resetModal() {
                $("input[name='cancelType']").prop('checked', false);
                $('.btn-group-toggle .btn').removeClass('active');
                $('#reasonGroup').hide();
                $('#cancelReason').empty();
                $('#otherReasonGroup').hide();
                $('#otherReason').val('');
            }
            $('#cancel-crop-btn').off('click').on('click', function() {
                resetModal();
                $('#cancelCropModal').modal('show');
            });
            // Button group toggle logic
            $('#btnTypeFailed').on('click', function() {
                $('#btnTypeFailed').addClass('active');
                $('#btnTypeCancelled').removeClass('active');
                $('#typeFailed').prop('checked', true);
                populateReasons('failed');
            });
            $('#btnTypeCancelled').on('click', function() {
                $('#btnTypeCancelled').addClass('active');
                $('#btnTypeFailed').removeClass('active');
                $('#typeCancelled').prop('checked', true);
                populateReasons('cancelled');
            });
            function populateReasons(type) {
                let options = [];
                if (type === 'failed') {
                    options = failedReasons;
                } else if (type === 'cancelled') {
                    options = cancelledReasons;
                }
                $('#cancelReason').empty();
                options.forEach(opt => {
                    $('#cancelReason').append(`<option value="${opt.value}">${opt.text}</option>`);
                });
                $('#reasonGroup').show();
                $('#otherReasonGroup').hide();
                $('#otherReason').val('');
            }
            // Show/hide other reason textarea
            $('#cancelReason').on('change', function() {
                if ($(this).val() === 'other') {
                    $('#otherReasonGroup').show();
                } else {
                    $('#otherReasonGroup').hide();
                    $('#otherReason').val('');
                }
            });
            $('#confirmCancelCrop').off('click').on('click', async function() {
                const type = $("input[name='cancelType']:checked").val();
                const reason = $('#cancelReason').val();
                const other = $('#otherReason').val().trim();
                const explanation = $('#cancelExplanation').val().trim();
                const $btn = $(this);
                const $loading = $('#cancelCropLoading');
                const $alert = $('#cancelCropAlert');
                $alert.hide();
                if (!type) {
                    $alert.removeClass().addClass('alert alert-danger').text('Please select the type of cancellation.').show();
                    return;
                }
                if (!reason) {
                    $alert.removeClass().addClass('alert alert-danger').text('Please select a reason.').show();
                    return;
                }
                if (reason === 'other' && !other) {
                    $alert.removeClass().addClass('alert alert-danger').text('Please specify the reason.').show();
                    return;
                }
                $btn.prop('disabled', true);
                $loading.show();
                try {
                    const response = await fetch('/cancelCrop', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({
                            cancelType: type,
                            cancelReason: reason,
                            otherReason: other,
                            explanation: explanation
                        })
                    });
                    const data = await response.json();
                    if (data.success) {
                        $alert.removeClass().addClass('alert alert-success').text(data.message).show();
                        // Open preview page in new tab
                        if (data.previewUrl) {
                            const newWindow = window.open(data.previewUrl, '_blank');
                            if (newWindow) {
                                newWindow.focus();
                            }
                            // Close the cancel modal after a short delay
                            setTimeout(() => {
                                $('#cancelCropModal').modal('hide');
                                if (typeof getActiveCrop === 'function') getActiveCrop();
                                else window.location.reload();
                            }, 1500);
                        } else {
                            $alert.removeClass().addClass('alert alert-warning').text('Could not open preview - no URL available.').show();
                        }
                    } else {
                        $alert.removeClass().addClass('alert alert-danger').text(data.error || 'Failed to cancel crop').show();
                    }
                } catch (error) {
                    $alert.removeClass().addClass('alert alert-danger').text('Failed to cancel crop').show();
                } finally {
                    $btn.prop('disabled', false);
                    $loading.hide();
                }
            });
        });
        </script>

        <style>
        /* Add these styles to your existing CSS */
        .harvest-btn:disabled {
            opacity: 0.6;
            cursor: not-allowed;
        }

        #harvestModal .modal-content {
            border-radius: 8px;
        }

        #harvestModal .modal-header {
            background-color: #f8f9fa;
            border-bottom: 1px solid #dee2e6;
        }

        #harvestModal .form-control:focus {
            border-color: #2a7f62;
            box-shadow: 0 0 0 0.2rem rgba(42, 127, 98, 0.25);
        }

        #harvestModal .btn-primary {
            background-color: #2a7f62;
            border-color: #2a7f62;
        }

        #harvestModal .btn-primary:hover {
            background-color: #236b53;
            border-color: #236b53;
        }

        .spinner-border {
            margin-right: 5px;
        }
        </style>

        <!-- Add Socket.IO script before closing body tag -->
        <script src="/socket.io/socket.io.js"></script>
        <script>
            // Initialize Socket.IO connection
            const socket = io();

            // Function to update sensor card
            function updateSensorCard(sensorId, value, status) {
                const card = document.querySelector(`[data-sensor-id="${sensorId}"]`);
                if (card) {
                    const valueElement = card.querySelector('.sensor-value');
                    const statusElement = card.querySelector('.sensor-status');
                    
                    if (valueElement) {
                        valueElement.textContent = value;
                    }
                    
                    if (statusElement) {
                        statusElement.className = `sensor-status text-${status.color}`;
                        statusElement.innerHTML = `<i class="fa ${status.icon}"></i> ${status.text}`;
                    }
                }
            }

            // Function to get status for a sensor value
            function getSensorStatus(sensorId, value) {
                switch(sensorId) {
                    case 'nitrogen':
                        return {
                            color: value >= 17 ? 'success' : 'warning',
                            icon: value >= 17 ? 'fa-check-circle' : 'fa-exclamation-circle',
                            text: value >= 17 ? 'Optimal' : 'Low'
                        };
                    case 'phosphorus':
                        return {
                            color: value >= 20 ? 'success' : 'warning',
                            icon: value >= 20 ? 'fa-check-circle' : 'fa-exclamation-circle',
                            text: value >= 20 ? 'Normal' : 'Low'
                        };
                    case 'potassium':
                        return {
                            color: value >= 18 ? 'success' : 'warning',
                            icon: value >= 18 ? 'fa-check-circle' : 'fa-exclamation-circle',
                            text: value >= 18 ? 'Normal' : 'Low'
                        };
                    case 'humidity':
                        return {
                            color: value >= 60 ? 'success' : 'warning',
                            icon: value >= 60 ? 'fa-check-circle' : 'fa-exclamation-circle',
                            text: value >= 60 ? 'Ideal' : 'Low'
                        };
                    case 'temperature':
                        return {
                            color: (value >= 25 && value <= 30) ? 'success' : 'warning',
                            icon: (value >= 25 && value <= 30) ? 'fa-check-circle' : 'fa-exclamation-circle',
                            text: (value >= 25 && value <= 30) ? 'Optimal' : 'Adjust'
                        };
                    case 'moisture':
                        return {
                            color: value >= 50 ? 'success' : 'warning',
                            icon: value >= 50 ? 'fa-check-circle' : 'fa-exclamation-circle',
                            text: value >= 50 ? 'Good' : 'Low'
                        };
                    case 'ph':
                        return {
                            color: (value >= 6 && value <= 7) ? 'success' : 'warning',
                            icon: (value >= 6 && value <= 7) ? 'fa-check-circle' : 'fa-exclamation-circle',
                            text: (value >= 6 && value <= 7) ? 'Ideal' : 'Adjust'
                        };
                    case 'light':
                        return {
                            color: value >= 0 ? 'success' : 'warning',
                            icon: value >= 0 ? 'fa-check-circle' : 'fa-exclamation-circle',
                            text: value >= 0 ? 'Good' : 'No Light'
                        };
                    default:
                        return {
                            color: 'success',
                            icon: 'fa-check-circle',
                            text: 'Normal'
                        };
                }
            }

            // Listen for sensor updates
            socket.on('sensorUpdate', (data) => {
                console.log('Received sensor update:', data); // Debug log
                
                // Update NPK values
                if (data.nitrogen !== undefined) {
                    updateSensorCard('nitrogen', `${data.nitrogen} ppm`, getSensorStatus('nitrogen', data.nitrogen));
                }
                
                if (data.phosphorus !== undefined) {
                    updateSensorCard('phosphorus', `${data.phosphorus} ppm`, getSensorStatus('phosphorus', data.phosphorus));
                }
                
                if (data.potassium !== undefined) {
                    updateSensorCard('potassium', `${data.potassium} ppm`, getSensorStatus('potassium', data.potassium));
                }
                
                // Update environmental sensors
                if (data.humidity !== undefined) {
                    updateSensorCard('humidity', `${data.humidity}%`, getSensorStatus('humidity', data.humidity));
                }
                
                if (data.temperature !== undefined) {
                    const tempValue = typeof data.temperature === 'object' ? data.temperature.value : data.temperature;
                    updateSensorCard('temperature', `${tempValue}°C`, getSensorStatus('temperature', tempValue));
                }
                
                if (data.moisture !== undefined) {
                    const moistureValue = typeof data.moisture === 'object' ? data.moisture.value : data.moisture;
                    updateSensorCard('moisture', `${moistureValue}%`, getSensorStatus('moisture', moistureValue));
                }
                
                if (data.ph !== undefined) {
                    updateSensorCard('ph', data.ph, getSensorStatus('ph', data.ph));
                }
                
                if (data.light !== undefined) {
                    // Handle negative light values
                    const lightValue = data.light < 0 ? 0 : data.light;
                    updateSensorCard('light', `${lightValue} lux`, getSensorStatus('light', lightValue));
                }
            });

            // Function to fetch weather data
            async function fetchWeatherData() {
                try {
                    const response = await fetch('/api/weather');
                    const data = await response.json();
                    
                    if (data.success) {
                        const weatherCard = document.querySelector('[data-sensor-id="weather"]');
                        if (weatherCard) {
                            const valueElement = weatherCard.querySelector('.sensor-value');
                            const statusElement = weatherCard.querySelector('.sensor-status');
                            
                            if (valueElement) {
                                valueElement.textContent = data.weather.main;
                            }
                            
                            if (statusElement) {
                                statusElement.className = 'sensor-status text-success';
                                statusElement.innerHTML = `<i class="fa fa-check-circle"></i> ${data.weather.description}`;
                            }
                        }
                    }
                } catch (error) {
                    console.error('Error fetching weather data:', error);
                    updateSensorCard('weather', 'Error', {
                        color: 'danger',
                        icon: 'fa-exclamation-circle',
                        text: 'Failed to load'
                    });
                }
            }

            // Fetch weather data every 30 minutes
            fetchWeatherData();
            setInterval(fetchWeatherData, 30 * 60 * 1000);
        </script>

        <style>
        /* Add these styles for the weather card */
        .weather-card {
            background: linear-gradient(135deg, #56ccf2 0%, #2f80ed 100%);
            color: white;
            padding: 15px;
            border-radius: 10px;
            text-align: center;
        }

        .weather-icon {
            font-size: 2.5rem;
            margin-bottom: 10px;
        }

        .weather-temp {
            font-size: 1.8rem;
            font-weight: bold;
            margin-bottom: 5px;
        }

        .weather-desc {
            font-size: 0.9rem;
            margin-bottom: 15px;
        }

        .weather-details {
            display: flex;
            justify-content: space-around;
            margin-top: 10px;
        }

        .weather-stat {
            text-align: center;
        }

        .weather-stat i {
            font-size: 1.2rem;
            margin-bottom: 5px;
        }

        .weather-stat div {
            font-size: 0.9rem;
        }
        </style>

        <script>
        const CALAPAN_LAT = 13.4125;
        const CALAPAN_LON = 121.1803;

        // Weather Functions
        async function fetchWeather() {
            try {
                const response = await fetch(
                    `https://api.open-meteo.com/v1/forecast?latitude=${CALAPAN_LAT}&longitude=${CALAPAN_LON}&current=temperature_2m,relative_humidity_2m,wind_speed_10m,weather_code&timezone=auto`
                );
                const data = await response.json();
                
                if (data.current) {
                    const weather = getWeatherDetails(data.current.weather_code);
                    
                    document.getElementById('weather-temp').textContent = `${Math.round(data.current.temperature_2m)}°C`;
                    document.getElementById('weather-desc').textContent = weather.description;
                    document.querySelector('.weather-icon').className = `wi ${weather.icon} weather-icon`;
                    document.getElementById('weather-humidity').textContent = `${data.current.relative_humidity_2m}%`;
                    document.getElementById('weather-wind').textContent = `${Math.round(data.current.wind_speed_10m)} km/h`;
                    
                    // Update weather card color based on conditions
                    updateWeatherCardStyle(data.current.weather_code);
                }
            } catch (error) {
                console.error("Weather fetch error:", error);
                document.getElementById('weather-desc').textContent = "Weather data unavailable";
            }
        }

        // Update weather card style based on conditions
        function updateWeatherCardStyle(weatherCode) {
            const card = document.querySelector('.weather-card');
            let gradient;
            
            if (weatherCode >= 200 && weatherCode < 300) {
                gradient = 'linear-gradient(135deg, #2c3e50 0%, #4ca1af 100%)';
            } else if (weatherCode >= 300 && weatherCode < 600) {
                gradient = 'linear-gradient(135deg, #757f9a 0%, #d7dde8 100%)';
            } else if (weatherCode >= 600 && weatherCode < 700) {
                gradient = 'linear-gradient(135deg, #83a4d4 0%, #b6fbff 100%)';
            } else if (weatherCode === 800) {
                gradient = 'linear-gradient(135deg, #56ccf2 0%, #2f80ed 100%)';
            } else {
                gradient = 'linear-gradient(135deg, #4CAF50 0%, #2196F3 100%)';
            }
            
            card.style.background = gradient;
        }

        // Weather code mapping (WMO codes)
        function getWeatherDetails(code) {
            const weatherMap = {
                0: { description: "Clear sky", icon: "wi-day-sunny" },
                1: { description: "Mainly clear", icon: "wi-day-cloudy" },
                2: { description: "Partly cloudy", icon: "wi-cloud" },
                3: { description: "Overcast", icon: "wi-cloudy" },
                45: { description: "Fog", icon: "wi-fog" },
                48: { description: "Freezing fog", icon: "wi-fog" },
                51: { description: "Light drizzle", icon: "wi-sprinkle" },
                53: { description: "Moderate drizzle", icon: "wi-sprinkle" },
                55: { description: "Heavy drizzle", icon: "wi-sprinkle" },
                61: { description: "Light rain", icon: "wi-rain" },
                63: { description: "Moderate rain", icon: "wi-rain" },
                65: { description: "Heavy rain", icon: "wi-rain" },
                80: { description: "Light showers", icon: "wi-showers" },
                81: { description: "Moderate showers", icon: "wi-showers" },
                82: { description: "Heavy showers", icon: "wi-showers" },
                95: { description: "Thunderstorm", icon: "wi-thunderstorm" },
                96: { description: "Thunderstorm with hail", icon: "wi-storm-showers" },
                99: { description: "Heavy thunderstorm", icon: "wi-storm-showers" }
            };
            
            return weatherMap[code] || { description: "Unknown", icon: "wi-cloud" };
        }

        // Initialize weather when page loads
        window.addEventListener('DOMContentLoaded', () => {
            fetchWeather();
            // Update weather every 30 minutes
            setInterval(fetchWeather, 1800000);
        });
        </script>

        <!-- Add this after the sensor grid section -->
        

        <style>
        /* Add these styles for the crop information section */
        .current-crop-info {
            margin-bottom: 2rem;
        }

        .info-section {
            padding: 1rem;
            background: #f8f9fa;
            border-radius: 8px;
            height: 100%;
        }

        .section-title {
            color: #2a7f62;
            font-weight: 600;
            margin-bottom: 1rem;
            padding-bottom: 0.5rem;
            border-bottom: 2px solid #e9ecef;
        }

        .info-item {
            display: flex;
            justify-content: space-between;
            margin-bottom: 0.75rem;
            padding: 0.5rem;
            background: white;
            border-radius: 4px;
            box-shadow: 0 1px 3px rgba(0,0,0,0.05);
        }

        .info-item .label {
            color: #6c757d;
            font-weight: 500;
        }

        .info-item .value {
            font-weight: 600;
            color: #2a7f62;
        }

        .parameter-matches {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 1rem;
        }

        .parameter-item {
            display: flex;
            align-items: center;
            gap: 1rem;
            padding: 1rem;
            background: white;
            border-radius: 8px;
            box-shadow: 0 1px 3px rgba(0,0,0,0.05);
        }

        .parameter-icon {
            width: 40px;
            height: 40px;
            display: flex;
            align-items: center;
            justify-content: center;
            background: #f8f9fa;
            border-radius: 50%;
            color: #2a7f62;
            font-size: 1.2rem;
        }

        .parameter-info {
            flex: 1;
        }

        .parameter-label {
            display: block;
            color: #6c757d;
            margin-bottom: 0.5rem;
        }

        .progress {
            height: 8px;
            background-color: #e9ecef;
            border-radius: 4px;
            overflow: hidden;
        }

        .card-header {
            background: linear-gradient(135deg, #2a7f62 0%, #1a5f4a 100%);
        }

        .card-header h5 {
            margin: 0;
            font-size: 1.1rem;
        }
        </style>

        <script>
        // Add this to your existing script section
        async function fetchCurrentCrop() {
            try {
                const response = await fetch('/checkActiveCrop');
                const data = await response.json();
                
                if (data.hasActiveCrop && data.currentCrop) {
                    window.currentCropId = data.currentCrop.id;
                    updateCropInfo(data.currentCrop);
                } else {
                    window.currentCropId = null;
                    clearCropInfo();
                }
            } catch (error) {
                console.error('Error fetching current crop:', error);
                window.currentCropId = null;
            }
        }

        function updateCropInfo(crop) {
            // Update basic information
            document.getElementById('current-crop-name').textContent = crop.name || '--';
            document.getElementById('crop-status').textContent = crop.status || '--';
            
            // Format planting date with proper error handling
            let plantingDate = null;
            try {
                if (crop.startDate) {
                    // Handle Firestore Timestamp
                    if (crop.startDate._seconds) {
                        plantingDate = new Date(crop.startDate._seconds * 1000);
                    } else if (crop.startDate.seconds) {
                        plantingDate = new Date(crop.startDate.seconds * 1000);
                    } else if (crop.startDate instanceof Date) {
                        plantingDate = crop.startDate;
                    } else if (typeof crop.startDate === 'string') {
                        plantingDate = new Date(crop.startDate);
                    }
                }
            } catch (error) {
                console.error('Error parsing planting date:', error);
            }
            
            // Update planting date display
            document.getElementById('planting-date').textContent = plantingDate ? 
                plantingDate.toLocaleDateString('en-US', {
                    year: 'numeric',
                    month: 'long',
                    day: 'numeric',
                    hour: '2-digit',
                    minute: '2-digit'
                }) : '--';
            
            // Calculate growth stage based on days since planting
            if (plantingDate) {
                const daysSincePlanting = Math.floor((new Date() - plantingDate) / (1000 * 60 * 60 * 24));
                let growthStage = '--';
                if (daysSincePlanting < 7) growthStage = 'Seedling';
                else if (daysSincePlanting < 14) growthStage = 'Vegetative';
                else if (daysSincePlanting < 21) growthStage = 'Flowering';
                else if (daysSincePlanting < 28) growthStage = 'Fruiting';
                else growthStage = 'Mature';
                document.getElementById('growth-stage').textContent = growthStage;
            } else {
                document.getElementById('growth-stage').textContent = '--';
            }
            
            // Calculate health score based on parameter matches
            if (crop.parameterMatches) {
                const matches = Object.values(crop.parameterMatches);
                const avgMatch = matches.reduce((a, b) => a + b, 0) / matches.length;
                document.getElementById('health-score').textContent = `${Math.round(avgMatch)}%`;
            } else {
                document.getElementById('health-score').textContent = '--';
            }
            
            // Calculate expected harvest date (assuming 45 days growth cycle)
            if (plantingDate) {
                const harvestDate = new Date(plantingDate);
                harvestDate.setDate(harvestDate.getDate() + 45);
                document.getElementById('expected-harvest').textContent = harvestDate.toLocaleDateString('en-US', {
                    year: 'numeric',
                    month: 'long',
                    day: 'numeric'
                });
            } else {
                document.getElementById('expected-harvest').textContent = '--';
            }

            // Update parameter matches
            if (crop.parameterMatches) {
                updateParameterMatch('temp-match', crop.parameterMatches.temperature);
                updateParameterMatch('humidity-match', crop.parameterMatches.humidity);
                updateParameterMatch('moisture-match', crop.parameterMatches.moisture);
                updateParameterMatch('nitrogen-match', crop.parameterMatches.npk_N);
                updateParameterMatch('phosphorus-match', crop.parameterMatches.npk_P);
                updateParameterMatch('potassium-match', crop.parameterMatches.npk_K);
                updateParameterMatch('ph-match', crop.parameterMatches.ph);
            }

            // Update current conditions from sensor data
            if (window.lastSensorData) {
                updateCurrentConditions(window.lastSensorData);
            }
        }

        function updateParameterMatch(elementId, value) {
            const element = document.getElementById(elementId);
            if (element && value !== undefined) {
                element.style.width = `${value}%`;
                element.className = `progress-bar ${getProgressColorClass(value)}`;
            }
        }

        function getProgressColorClass(value) {
            if (value >= 80) return 'bg-success';
            if (value >= 60) return 'bg-warning';
            return 'bg-danger';
        }

        function updateCurrentConditions(sensorData) {
            document.getElementById('crop-temperature').textContent = sensorData.temperature ? `${sensorData.temperature}°C` : '--';
            document.getElementById('crop-humidity').textContent = sensorData.humidity ? `${sensorData.humidity}%` : '--';
            document.getElementById('crop-moisture').textContent = sensorData.moisture ? `${sensorData.moisture}%` : '--';
            document.getElementById('crop-light').textContent = sensorData.light ? `${sensorData.light} lux` : '--';
            document.getElementById('crop-nitrogen').textContent = sensorData.nitrogen ? `${sensorData.nitrogen} ppm` : '--';
            document.getElementById('crop-phosphorus').textContent = sensorData.phosphorus ? `${sensorData.phosphorus} ppm` : '--';
            document.getElementById('crop-potassium').textContent = sensorData.potassium ? `${sensorData.potassium} ppm` : '--';
            document.getElementById('crop-ph').textContent = sensorData.ph || '--';
        }

        function clearCropInfo() {
            const elements = [
                'current-crop-name', 'crop-status', 'planting-date', 'growth-stage',
                'health-score', 'expected-harvest', 'crop-temperature', 'crop-humidity',
                'crop-moisture', 'crop-light', 'crop-nitrogen', 'crop-phosphorus',
                'crop-potassium', 'crop-ph'
            ];
            
            elements.forEach(id => {
                const element = document.getElementById(id);
                if (element) element.textContent = '--';
            });

            const matchElements = [
                'temp-match', 'humidity-match', 'moisture-match',
                'nitrogen-match', 'phosphorus-match', 'potassium-match', 'ph-match'
            ];

            matchElements.forEach(id => {
                const element = document.getElementById(id);
                if (element) {
                    element.style.width = '0%';
                    element.className = 'progress-bar';
                }
            });
        }

        // Update the socket event listener
        socket.on('sensorUpdate', (data) => {
            // Store the latest sensor data
            window.lastSensorData = data;
            
            // Update current conditions if we have an active crop
            if (document.getElementById('current-crop-name').textContent !== '--') {
                updateCurrentConditions(data);
            }
        });

        // Fetch current crop data when page loads
        document.addEventListener('DOMContentLoaded', fetchCurrentCrop);
        </script>
        
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Load pending users count
            loadPendingUsersCount();
        
            // Handle pending users button click
            document.getElementById('pendingUsersBtn').addEventListener('click', function(e) {
                e.preventDefault();
                loadPendingUsers();
                $('#pendingUsersModal').modal('show');
            });
        
            // Function to load pending users count
            async function loadPendingUsersCount() {
                try {
                    const response = await fetch('/api/users/pending/count');
                    const data = await response.json();
                    if (data.success) {
                        const countBadge = document.getElementById('pendingUsersCount');
                        if (data.count > 0) {
                            countBadge.textContent = data.count;
                            countBadge.style.display = 'inline';
                        } else {
                            countBadge.style.display = 'none';
                        }
                    }
                } catch (error) {
                    console.error('Error loading pending users count:', error);
                }
            }
        
            // Function to load pending users
            async function loadPendingUsers() {
                try {
                    const response = await fetch('/api/users/pending');
                    const data = await response.json();
        
                    if (data.success) {
                        const pendingUsersList = document.getElementById('pendingUsersList');
                        pendingUsersList.innerHTML = '';
        
                        if (!data.users || data.users.length === 0) {
                            pendingUsersList.innerHTML = '<div class="alert alert-info">No pending users found.</div>';
                            return;
                        }
        
                        data.users.forEach(user => {
                            const userCard = document.createElement('div');
                            userCard.className = 'card mb-3';
                            userCard.innerHTML = `
                                <div class="card-body">
                                    <div class="row">
                                        <div class="col-md-2">
                                            <img src="${user.profilePicture || '/assets/img/default-avatar.png'}" 
                                                 class="img-fluid rounded-circle" 
                                                 style="width: 80px; height: 80px; object-fit: cover;">
                                        </div>
                                        <div class="col-md-7">
                                            <h5 class="card-title">${user.name}</h5>
                                            <p class="card-text">
                                                <strong>Email:</strong> ${user.email}<br>
                                                <strong>Contact:</strong> ${user.contactNumber || 'N/A'}<br>
                                                <strong>Role:</strong> ${user.role}<br>
                                                <strong>Email Verification:</strong> ${user.isVerified ? 'Verified' : 'Not Verified'}<br>
                                                <strong>Registered:</strong> ${user.createdAt}
                                            </p>
                                        </div>
                                        <div class="col-md-3 text-right">
                                            <button class="btn btn-success btn-sm mb-2 approve-user" 
                                                    data-user-id="${user.id}">
                                                <i class="fa fa-check"></i> Approve
                                            </button>
                                            <button class="btn btn-danger btn-sm reject-user" 
                                                    data-user-id="${user.id}">
                                                <i class="fa fa-times"></i> Reject
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            `;
                            pendingUsersList.appendChild(userCard);
                        });
        
                        // Add event listeners for approve/reject buttons
                        document.querySelectorAll('.approve-user').forEach(button => {
                            button.addEventListener('click', handleUserApproval);
                        });
                        document.querySelectorAll('.reject-user').forEach(button => {
                            button.addEventListener('click', handleUserRejection);
                        });
                    } else {
                        const pendingUsersList = document.getElementById('pendingUsersList');
                        pendingUsersList.innerHTML = `<div class="alert alert-danger">Error: ${data.message}</div>`;
                    }
                } catch (error) {
                    console.error('Error loading pending users:', error);
                    const pendingUsersList = document.getElementById('pendingUsersList');
                    pendingUsersList.innerHTML = `<div class="alert alert-danger">Failed to load pending users: ${error.message}</div>`;
                }
            }
        
            // Handle user approval
            async function handleUserApproval(e) {
                const userId = e.target.closest('button').dataset.userId;
                try {
                    const response = await fetch(`/api/users/${userId}/approve`, {
                        method: 'PUT'
                    });
                    const data = await response.json();
                    if (data.success) {
                        showNotification('success', 'User approved successfully');
                        loadPendingUsers();
                        loadPendingUsersCount();
                    } else {
                        showNotification('error', 'Error approving user');
                    }
                } catch (error) {
                    console.error('Error:', error);
                    showNotification('error', 'Error approving user');
                }
            }
        
            // Handle user rejection
            async function handleUserRejection(e) {
                const userId = e.target.closest('button').dataset.userId;
                try {
                    const response = await fetch(`/api/users/${userId}/reject`, {
                        method: 'PUT'
                    });
                    const data = await response.json();
                    if (data.success) {
                        showNotification('success', 'User rejected successfully');
                        loadPendingUsers();
                        loadPendingUsersCount();
                    } else {
                        showNotification('error', 'Error rejecting user');
                    }
                } catch (error) {
                    console.error('Error:', error);
                    showNotification('error', 'Error rejecting user');
                }
            }
        
            // Show notification
            function showNotification(type, message) {
                const toast = document.createElement('div');
                toast.className = `toast toast-${type}`;
                toast.innerHTML = message;
                document.body.appendChild(toast);
        
                setTimeout(() => {
                    toast.remove();
                }, 3000);
            }
        });
        </script>

        <!-- Enhanced Harvest Functionality -->
        <script>
        $(function() {
            // Set default date and time for harvest
            function setDefaultHarvestDateTime() {
                const now = new Date();
                const dateStr = now.toISOString().split('T')[0];
                const timeStr = now.toTimeString().split(' ')[0];
                
                $('#harvestDate').val(dateStr);
                $('#harvestTime').val(timeStr);
            }

            // Reset harvest modal
            function resetHarvestModal() {
                $('#harvestQuantity').val('');
                $('#harvestSuccessRate').val('');
                $('#harvestQuality').val('');
                $('#harvestMethod').val('Manual');
                $('#harvestNotes').val('');
                $('#harvestChallenges').val('');
                $('#harvestAlert').hide();
            }

            // Harvest button functionality
            $('#harvest-btn').off('click').on('click', function() {
                resetHarvestModal();
                $('#harvestModal').modal('show');
            });

            // Confirm harvest functionality
            $('#confirmHarvest').off('click').on('click', async function() {
                const quantity = parseFloat($('#harvestQuantity').val());
                const successRate = parseInt($('#harvestSuccessRate').val());
                const quality = $('#harvestQuality').val();
                const method = $('#harvestMethod').val();
                const harvestDate = $('#harvestDate').val();
                const harvestTime = $('#harvestTime').val();
                const notes = $('#harvestNotes').val().trim();
                const challenges = $('#harvestChallenges').val().trim();

                const $btn = $(this);
                const $loading = $('#harvestLoading');
                const $alert = $('#harvestAlert');

                $alert.hide();

                // Validation
                if (!quantity || quantity <= 0) {
                    $alert.removeClass().addClass('alert alert-danger').text('Please enter a valid harvest quantity.').show();
                    return;
                }

                if (!successRate || successRate < 0 || successRate > 100) {
                    $alert.removeClass().addClass('alert alert-danger').text('Please enter a valid success rate between 0 and 100.').show();
                    return;
                }

                if (!quality) {
                    $alert.removeClass().addClass('alert alert-danger').text('Please select harvest quality.').show();
                    return;
                }

                if (!harvestDate) {
                    $alert.removeClass().addClass('alert alert-danger').text('Please select harvest date.').show();
                    return;
                }

                if (!harvestTime) {
                    $alert.removeClass().addClass('alert alert-danger').text('Please select harvest time.').show();
                    return;
                }

                $btn.prop('disabled', true);
                $loading.show();

                try {
                    const response = await fetch('/harvestCrop', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({
                            harvestQuantity: quantity,
                            harvestSuccessRate: successRate,
                            harvestQuality: quality,
                            harvestMethod: method,
                            harvestDate: harvestDate,
                            harvestTime: harvestTime,
                            harvestNotes: notes,
                            harvestChallenges: challenges
                        })
                    });

                    const data = await response.json();
                    
                    if (data.success) {
                        $alert.removeClass().addClass('alert alert-success').text(data.message).show();
                        
                        // Open preview page in new tab
                        if (data.previewUrl) {
                            const newWindow = window.open(data.previewUrl, '_blank');
                            if (newWindow) {
                                newWindow.focus();
                            }
                            // Close the harvest modal after a short delay
                            setTimeout(() => {
                                $('#harvestModal').modal('hide');
                                if (typeof getActiveCrop === 'function') getActiveCrop();
                                else window.location.reload();
                            }, 1500);
                        } else {
                            $alert.removeClass().addClass('alert alert-warning').text('Could not open preview - no URL available.').show();
                        }
                    } else {
                        $alert.removeClass().addClass('alert alert-danger').text(data.error || 'Failed to harvest crop').show();
                    }
                } catch (error) {
                    console.error('Harvest error:', error);
                    $alert.removeClass().addClass('alert alert-danger').text('Failed to harvest crop').show();
                } finally {
                    $btn.prop('disabled', false);
                    $loading.hide();
                }
            });

            // Initialize default date/time when modal is shown
            $('#harvestModal').on('shown.bs.modal', function() {
                setDefaultHarvestDateTime();
            });
        });
        </script>

        <% } else { %>
        <div style="min-height: 100vh; background: #fff; display: flex; flex-direction: column; justify-content: center; align-items: center;">
          <i class="fas fa-seedling fa-4x text-muted mb-3"></i>
          <h3 class="mb-3">No Crop Planted</h3>
          <p class="text-muted mb-4">Start your farming journey by planting a new crop</p>
          <a href="/crop-recommendations" class="btn btn-primary btn-lg">
            <i class="fas fa-plus mr-2"></i>Go to Crop Recommendation
          </a>
        </div>
        <% } %>
    </div>
</body>

</html>