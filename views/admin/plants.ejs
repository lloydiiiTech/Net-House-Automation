<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width initial-scale=1.0">
    <title>NetHouseAutomation Dashboard</title>
    <!-- GLOBAL MAINLY STYLES-->
    <link href="./assets/vendors/bootstrap/dist/css/bootstrap.min.css" rel="stylesheet" />
    <link href="./assets/vendors/font-awesome/css/font-awesome.min.css" rel="stylesheet" />
    <link href="./assets/vendors/themify-icons/css/themify-icons.css" rel="stylesheet" />
    <!-- PLUGINS STYLES-->
    <link href="./assets/vendors/jvectormap/jquery-jvectormap-2.0.3.css" rel="stylesheet" />
    <!-- THEME STYLES-->
    <link href="assets/css/main.min.css" rel="stylesheet" />
    <!-- PAGE LEVEL STYLES-->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <link href="./assets/vendors/fullcalendar/dist/fullcalendar.min.css" rel="stylesheet" />
    <link href="./assets/vendors/fullcalendar/dist/fullcalendar.print.min.css" rel="stylesheet" media="print" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/weather-icons/2.0.10/css/weather-icons.min.css">

</head>

<body class="fixed-navbar">
    <div class="page-wrapper">
        <!-- START HEADER-->
        <header class="header">
            <div class="page-brand">
                <a class="link" href="/admin-dashboard">
                    <span class="brand">Demo
                        <span class="brand-tip">FARM</span>
                    </span>
                    <span class="brand-mini">DF</span>
                </a>
            </div>
            <div class="flexbox flex-1">
                <!-- START TOP-LEFT TOOLBAR-->
                <ul class="nav navbar-toolbar">
                    <li>
                        <a class="nav-link sidebar-toggler js-sidebar-toggler"><i class="ti-menu"></i></a>
                    </li>
                    <!--<li>
                        <form class="navbar-search" action="javascript:;">
                            <div class="rel">
                                <span class="search-icon"><i class="ti-search"></i></span>
                                <input class="form-control" placeholder="Search here...">
                            </div>
                        </form>
                    </li>-->
                </ul>
                <!-- END TOP-LEFT TOOLBAR-->
                <!-- START TOP-RIGHT TOOLBAR-->
                <ul class="nav navbar-toolbar">
                    <li>
                        <a class="nav-link" href="#" id="pendingUsersBtn">
                            <i class="fa fa-user-clock"></i>
                            <span class="badge badge-danger" id="pendingUsersCount" style="display: none;">0</span>
                        </a>
                    </li>
                    <li class="dropdown dropdown-user">
                        <a class="nav-link dropdown-toggle link" data-toggle="dropdown">
                            <img src="<%= user.profilePicture %>" />
                            <span></span><%= user.name %><i class="fa fa-angle-down m-l-5"></i>
                        </a>
                        <ul class="dropdown-menu dropdown-menu-right">
                            <a class="dropdown-item" href="/admin-profile"><i class="fa fa-user"></i>Profile</a>
                            <li class="dropdown-divider"></li>
                            <a class="dropdown-item" href="/logout"><i class="fa fa-power-off"></i>Logout</a>
                        </ul>
                    </li>
                </ul>
                <!-- END TOP-RIGHT TOOLBAR-->
            </div>
        </header>
        <!-- END HEADER-->
        <!-- START SIDEBAR-->
        <nav class="page-sidebar" id="sidebar">
            <div id="sidebar-collapse">
                <div class="admin-block d-flex">
                    <div>
                        <img src="<%= user.profilePicture %>" width="45px" />
                    </div>
                    <div class="admin-info">
                        <div class="font-strong"><%= user.name %></div>
                        <small><%= user.role %></small>
                    </div>
                </div>
                <ul class="side-menu metismenu">
                    <li>
                        <a class="active" href="/admin-dashboard"><i class="sidebar-item-icon fas fa-tachometer-alt"></i>
                            <span class="nav-label">Dashboard</span>
                        </a>
                    </li>
                    
                    <li>
                        <a class="active" href="/admin-plant-overview"><i class="sidebar-item-icon fas fa-leaf"></i>
                            <span class="nav-label">Plant Overview</span>
                        </a>
                    </li>
                    <li>
                        <a class="active" href="/admin-irrigation-controll"><i class="sidebar-item-icon fas fa-faucet"></i>
                            <span class="nav-label">Irrigation Controll</span>
                        </a>
                    </li>
                    <li>
                        <a class="active" href="/admin-reports&analytics"><i class="sidebar-item-icon fas fa-chart-bar"></i>
                            <span class="nav-label">Reports & Analytics</span>
                        </a>
                    </li>
                    <li>
                        <a class="active" href="/admin-user-management"><i class="sidebar-item-icon fas fa-users-cog"></i>
                            <span class="nav-label">User Management</span>
                        </a>
                    </li>
                </ul>
            </div>
        </nav>
        <div class="content-wrapper">
            <div class="page-content fade-in-up">
                <!-- Header Section -->
                <div class="row mb-4">
                    <div class="col-12">
                        <div class="page-header">
                            <h1 class="page-title">Plant Overview</h1>
                        </div>
                    </div>
                </div>

                <!-- Current Crop Status Section -->
                <div class="row mb-4">
                    <div class="col-12">
                        <div class="current-crop-container">
                            <div class="crop-status-header">
                                <div class="crop-info">
                                    <div class="crop-label">Current Crop:</div>
                                    <div class="crop-name" id="current-crop-name">None</div>
                                </div>
                                <button class="btn btn-primary harvest-btn" id="harvest-btn" disabled>
                                    <i class="fas fa-sickle"></i> Harvest
                                </button>
                            </div>
                        </div>
                    </div>
                </div>

                <style>
                /* Updated styles for the new layout */
                .page-header {
                    margin-bottom: 1.5rem;
                }

                .page-title {
                    color: #2a7f62;
                    font-size: 1.75rem;
                    font-weight: 600;
                    margin: 0;
                }

                .current-crop-container {
                    background: white;
                    border-radius: 12px;
                    padding: 1.5rem;
                    box-shadow: 0 2px 4px rgba(0,0,0,0.05);
                    border: 1px solid #e9ecef;
                }

                .crop-status-header {
                    display: flex;
                    justify-content: space-between;
                    align-items: center;
                }

                .crop-info {
                    display: flex;
                    align-items: center;
                    gap: 1rem;
                }

                .crop-label {
                    color: #6c757d;
                    font-size: 1.1rem;
                    font-weight: 500;
                }

                .crop-name {
                    font-size: 1.25rem;
                    font-weight: 600;
                    color: #2a7f62;
                    background: #f0f7f4;
                    padding: 0.5rem 1rem;
                    border-radius: 6px;
                    min-width: 120px;
                    text-align: center;
                }

                .harvest-btn {
                    background: #2a7f62;
                    border: none;
                    padding: 0.75rem 1.5rem;
                    border-radius: 8px;
                    font-weight: 500;
                    display: flex;
                    align-items: center;
                    gap: 0.5rem;
                    transition: all 0.3s ease;
                }

                .harvest-btn:hover {
                    background: #236b53;
                    transform: translateY(-2px);
                }

                .harvest-btn:disabled {
                    background: #a8d5c5;
                    cursor: not-allowed;
                    transform: none;
                }

                .harvest-btn i {
                    font-size: 1.1rem;
                }

                /* Toast notification styles */
                .toast-container {
                    position: fixed;
                    top: 20px;
                    right: 20px;
                    z-index: 9999;
                }

                .toast {
                    background: white;
                    border-radius: 8px;
                    box-shadow: 0 4px 12px rgba(0,0,0,0.15);
                    margin-bottom: 1rem;
                    min-width: 300px;
                }

                .toast.bg-success {
                    background: #d4edda;
                    color: #155724;
                }

                .toast.bg-danger {
                    background: #f8d7da;
                    color: #721c24;
                }

                .toast-body {
                    padding: 1rem;
                    display: flex;
                    align-items: center;
                    gap: 0.75rem;
                }

                .toast-body i {
                    font-size: 1.25rem;
                }
                </style>

                <div id="toastContainer" class="toast-container position-fixed top-0 end-0 p-3"></div>

                <div class="row">
                    <!-- Left side - 3x3 sensor grid -->
                    <div class="col-lg-8">
                        <div class="sensor-grid">
                            <!-- Row 1 -->
                            <div class="sensor-card" data-sensor-id="nitrogen">
                                <div class="sensor-icon bg-success">
                                    <i class="fas fa-atom"></i>
                                </div>
                                <div class="sensor-value">-- ppm</div>
                                <div class="sensor-label">Nitrogen (N)</div>
                                <div class="sensor-status text-muted">
                                    <i class="fa fa-spinner fa-spin"></i> Loading...
                                </div>
                            </div>
                            
                            <div class="sensor-card" data-sensor-id="phosphorus">
                                <div class="sensor-icon bg-info">
                                    <i class="fas fa-fire"></i>
                                </div>
                                <div class="sensor-value">-- ppm</div>
                                <div class="sensor-label">Phosphorus (P)</div>
                                <div class="sensor-status text-muted">
                                    <i class="fa fa-spinner fa-spin"></i> Loading...
                                </div>
                            </div>
                            
                            <div class="sensor-card" data-sensor-id="potassium">
                                <div class="sensor-icon bg-warning">
                                    <i class="fas fa-bolt"></i>
                                </div>
                                <div class="sensor-value">-- ppm</div>
                                <div class="sensor-label">Potassium (K)</div>
                                <div class="sensor-status text-muted">
                                    <i class="fa fa-spinner fa-spin"></i> Loading...
                                </div>
                            </div>
                            
                            <!-- Row 2 -->
                            <div class="sensor-card" data-sensor-id="humidity">
                                <div class="sensor-icon bg-info">
                                    <i class="fas fa-tint"></i>
                                </div>
                                <div class="sensor-value">--%</div>
                                <div class="sensor-label">Humidity</div>
                                <div class="sensor-status text-muted">
                                    <i class="fa fa-spinner fa-spin"></i> Loading...
                                </div>
                            </div>
                            
                            <div class="sensor-card" data-sensor-id="temperature">
                                <div class="sensor-icon bg-danger">
                                    <i class="fas fa-thermometer-half"></i>
                                </div>
                                <div class="sensor-value">--°C</div>
                                <div class="sensor-label">Temperature</div>
                                <div class="sensor-status text-muted">
                                    <i class="fa fa-spinner fa-spin"></i> Loading...
                                </div>
                            </div>
                            
                            <div class="sensor-card" data-sensor-id="moisture">
                                <div class="sensor-icon bg-primary">
                                    <i class="fas fa-water"></i>
                                </div>
                                <div class="sensor-value">--%</div>
                                <div class="sensor-label">Soil Moisture</div>
                                <div class="sensor-status text-muted">
                                    <i class="fa fa-spinner fa-spin"></i> Loading...
                                </div>
                            </div>
                            
                            <!-- Row 3 -->
                            <div class="sensor-card" data-sensor-id="ph">
                                <div class="sensor-icon bg-purple">
                                    <i class="fas fa-flask"></i>
                                </div>
                                <div class="sensor-value">--</div>
                                <div class="sensor-label">pH Level</div>
                                <div class="sensor-status text-muted">
                                    <i class="fa fa-spinner fa-spin"></i> Loading...
                                </div>
                            </div>
                            
                            <div class="sensor-card" data-sensor-id="light">
                                <div class="sensor-icon bg-warning">
                                    <i class="fas fa-sun"></i>
                                </div>
                                <div class="sensor-value">-- lux</div>
                                <div class="sensor-label">Light</div>
                                <div class="sensor-status text-muted">
                                    <i class="fa fa-spinner fa-spin"></i> Loading...
                                </div>
                            </div>
                            
                            <div class="sensor-card" data-sensor-id="weather">
                                <div class="weather-card">
                                    <div class="text-center">
                                        <i class="wi wi-day-sunny weather-icon"></i>
                                        <div class="weather-temp" id="weather-temp">--°C</div>
                                        <div class="weather-desc" id="weather-desc">Loading weather...</div>
                                </div>
                                    <div class="weather-details">
                                        <div class="weather-stat">
                                            <i class="wi wi-humidity"></i>
                                            <div id="weather-humidity">--%</div>
                                        </div>
                                        <div class="weather-stat">
                                            <i class="wi wi-strong-wind"></i>
                                            <div id="weather-wind">-- km/h</div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <!-- Right side - Top 5 crops prediction -->
                    <div class="col-lg-4">
                        <div class="recommendation-box">
                          <div class="recommendation-header">
                            <h3><i class="fas fa-seedling"></i> Top 5 Recommended Crops</h3>
                          </div>
                          <div class="recommendation-list" id="recommended-crops-list">
                            <% if (recommendations.length > 0) { %>
                              <% recommendations.forEach((crop, index) => { %>
                                <div class="crop-item" 
                                     onclick="showCropDetails(<%= JSON.stringify(crop) %>, <%= JSON.stringify(sensorData) %>)">
                                  <div class="crop-rank"><%= index + 1 %></div>
                                  <div class="crop-info">
                                    <div class="crop-name">
                                      <%= crop.name %>
                                      <span class="crop-status <%= crop.isRegistered ? 'registered' : 'new' %>">
                                        <%= crop.isRegistered ? 'Registered' : 'New' %>
                                      </span>
                                    </div>
                                    <div class="crop-match">
                                      <div class="match-bar" style="width: <%= crop.score || crop.ruleBasedScore %>%"></div>
                                      <span><%= Math.round(crop.score || crop.ruleBasedScore) %>% Match</span>
                                    </div>
                                  </div>
                                  <div class="crop-select">
                                    <i class="fas fa-chevron-right"></i>
                                  </div>
                                </div>
                              <% }); %>
                            <% } else { %>
                              <div class="text-center py-3">No crop recommendations available</div>
                            <% } %>
                          </div>
                        </div>
                      </div>
                      
                      
                      <!-- Modal -->
<div class="modal fade" id="cropDetailsModal" tabindex="-1" role="dialog" aria-hidden="true">
    <div class="modal-dialog modal-lg" role="document">
      <div class="modal-content">
        <!-- Modal Header -->
        <div class="modal-header bg-primary text-white">
          <h5 class="modal-title font-weight-bold" id="cropModalTitle"></h5>
          <button type="button" class="close text-white" data-dismiss="modal" aria-label="Close">
            <span aria-hidden="true">&times;</span>
          </button>
        </div>
        
        <!-- Modal Body -->
        <div class="modal-body">
          <div class="container-fluid">
            <!-- First Row: Basic Info -->
            <div class="row mb-4">
              <div class="col-md-6">
                <div class="d-flex align-items-center mb-2">
                  <i class="fas fa-info-circle text-primary mr-2"></i>
                  <h6 class="mb-0 font-weight-bold">Crop Information</h6>
                </div>
                <div class="card shadow-sm">
                  <div class="card-body">
                    <div class="d-flex justify-content-between mb-2">
                      <span class="text-muted">Status:</span>
                      <span id="cropStatus" class="badge"></span>
                    </div>
                    <div class="d-flex justify-content-between mb-2">
                      <span class="text-muted">Overall Match:</span>
                      <span id="overallMatch" class="font-weight-bold"></span>
                    </div>
                    <div class="d-flex justify-content-between">
                      <span class="text-muted">Last Updated:</span>
                      <span id="lastUpdated"></span>
                    </div>
                  </div>
                </div>
              </div>
              <div class="col-md-6">
                <div class="d-flex align-items-center mb-2">
                  <i class="fas fa-star text-warning mr-2"></i>
                  <h6 class="mb-0 font-weight-bold">Quick Stats</h6>
                </div>
                <div class="card shadow-sm">
                  <div class="card-body">
                    <div class="row text-center">
                      <div class="col-4 border-right">
                        <div class="text-muted small">Best Match</div>
                        <div id="bestMatchParam" class="font-weight-bold"></div>
                      </div>
                      <div class="col-4 border-right">
                        <div class="text-muted small">Needs Attention</div>
                        <div id="worstMatchParam" class="font-weight-bold"></div>
                      </div>
                      
                    </div>
                  </div>
                </div>
              </div>
            </div>
            
            <!-- Second Row: Comparison Data -->
            <div class="row">
              <div class="col-md-6">
                <div class="d-flex align-items-center mb-2">
                  <i class="fas fa-bullseye text-success mr-2"></i>
                  <h6 class="mb-0 font-weight-bold">Optimal Conditions</h6>
                </div>
                <div class="card shadow-sm h-100">
                  <div class="card-body" id="optimalConditions"></div>
                </div>
              </div>
              <div class="col-md-6">
                <div class="d-flex align-items-center mb-2">
                  <i class="fas fa-tachometer-alt text-info mr-2"></i>
                  <h6 class="mb-0 font-weight-bold">Environment Data</h6>
                </div>
                <div class="card shadow-sm h-100">
                  <div class="card-body" id="currentSensorData"></div>
                </div>
              </div>
            </div>
            
            <!-- Third Row: Parameter Matches -->
            <div class="row mt-4">
              <div class="col-12">
                <div class="d-flex align-items-center mb-2">
                  <i class="fas fa-percentage text-danger mr-2"></i>
                  <h6 class="mb-0 font-weight-bold">Parameter Matching Analysis</h6>
                </div>
                <div class="card shadow-sm">
                  <div class="card-body" id="parameterMatches"></div>
                </div>
              </div>
            </div>
          </div>
        </div>
        
        <!-- Modal Footer -->
        <div class="modal-footer">
         
          <button type="button" class="btn btn-primary" id="confirmCropBtn">
            <i class="fas fa-check mr-2"></i>Confirm Selection
          </button>
        </div>
      </div>
    </div>
  </div>
  
  <style>
    .toast {
    transition: opacity 0.3s ease;
  }
  
  /* Modal loading state */
  .btn-loading {
    position: relative;
  }
  
  .btn-loading .spinner-border {
    position: relative;
    top: -1px;
  }
  
  /* Current crop highlight */
  #current-crop {
    font-weight: 600;
    color: #2a7f62;
    background-color: #f0f7f4;
    padding: 2px 8px;
    border-radius: 4px;
  }
  /* Modal Enhancements */
  #cropDetailsModal .modal-header {
    border-bottom: 2px solid rgba(255,255,255,0.1);
  }
  
  #cropDetailsModal .modal-content {
    border: none;
    border-radius: 0.5rem;
    overflow: hidden;
  }
  
  #cropDetailsModal .card {
    border: none;
    border-radius: 0.5rem;
  }
  
  .param-card {
    transition: all 0.3s ease;
    border-left: 4px solid transparent;
  }
  
  .param-card:hover {
    transform: translateY(-2px);
    box-shadow: 0 5px 15px rgba(0,0,0,0.1);
  }
  
  .match-indicator {
    height: 8px;
    border-radius: 4px;
    background: linear-gradient(90deg, #f8f9fa 0%, #f8f9fa 100%);
    position: relative;
    overflow: hidden;
  }
  
  .match-progress {
    position: absolute;
    left: 0;
    top: 0;
    bottom: 0;
    border-radius: 4px;
  }
  
  /* Status Badges */
  .badge-registered {
    background-color: #28a745;
    color: white;
  }
  
  .badge-new {
    background-color: #17a2b8;
    color: white;
  }
  
  /* Parameter Quality Colors */
  .excellent-match { border-left-color: #28a745; }
  .good-match { border-left-color: #5cb85c; }
  .fair-match { border-left-color: #f0ad4e; }
  .poor-match { border-left-color: #d9534f; }
  



  /* Alert positioning */
.fixed-top {
  position: fixed;
  top: 20px;
  left: 0;
  right: 0;
}

/* Modal transition */
.modal.fade .modal-dialog {
  transition: transform 0.3s ease-out, opacity 0.3s ease;
}

/* Button loading state */
.btn-loading {
  position: relative;
}

.btn-loading .spinner-border {
  position: absolute;
  left: 50%;
  top: 50%;
  transform: translate(-50%, -50%);
}
  </style>
  
  <script>
    
  function showCropDetails(crop, sensorData) {
    // Set modal title and basic info
    document.getElementById('cropModalTitle').textContent = crop.name;
    document.getElementById('cropStatus').className = `badge ${crop.isRegistered ? 'badge-registered' : 'badge-new'}`;
    document.getElementById('cropStatus').textContent = crop.isRegistered ? 'Registered Crop' : 'New Crop';
    document.getElementById('overallMatch').textContent = `${Math.round(crop.score || crop.ruleBasedScore)}%`;
    document.getElementById('lastUpdated').textContent = crop.lastUpdated ? 
      new Date(crop.lastUpdated.seconds * 1000).toLocaleString() : 'N/A';
  
    // Find best and worst matches
    const matches = crop.parameterMatches || {};
    const matchEntries = Object.entries(matches);
    const bestMatch = matchEntries.reduce((a, b) => a[1] > b[1] ? a : b, ['', 0]);
    const worstMatch = matchEntries.reduce((a, b) => a[1] < b[1] ? a : b, ['', 100]);
    
    document.getElementById('bestMatchParam').textContent = `${bestMatch[0].replace('npk_', '').toUpperCase()} (${Math.round(bestMatch[1])}%)`;
    document.getElementById('worstMatchParam').textContent = `${worstMatch[0].replace('npk_', '').toUpperCase()} (${Math.round(worstMatch[1])}%)`;
  
    // Display optimal conditions
    const optimalHtml = `
      <table class="table table-sm table-borderless">
        <tbody>
          <tr>
            <td class="text-muted" width="40%">Temperature</td>
            <td class="font-weight-bold">${crop.optimalConditions?.temperature || 'N/A'}°C</td>
          </tr>
          <tr>
            <td class="text-muted">Humidity</td>
            <td class="font-weight-bold">${crop.optimalConditions?.humidity || 'N/A'}%</td>
          </tr>
          <tr>
            <td class="text-muted">Soil Moisture</td>
            <td class="font-weight-bold">${crop.optimalConditions?.moisture || 'N/A'}%</td>
          </tr>
          <tr>
            <td class="text-muted">pH Level</td>
            <td class="font-weight-bold">${crop.optimalConditions?.ph || 'N/A'}</td>
          </tr>
          <tr>
            <td class="text-muted">Light Intensity</td>
            <td class="font-weight-bold">${crop.optimalConditions?.light || 'N/A'} lux</td>
          </tr>
          <tr>
            <td class="text-muted">Nitrogen (N)</td>
            <td class="font-weight-bold">${crop.optimalConditions?.npk_N || 'N/A'} ppm</td>
          </tr>
          <tr>
            <td class="text-muted">Phosphorus (P)</td>
            <td class="font-weight-bold">${crop.optimalConditions?.npk_P || 'N/A'} ppm</td>
          </tr>
          <tr>
            <td class="text-muted">Potassium (K)</td>
            <td class="font-weight-bold">${crop.optimalConditions?.npk_K || 'N/A'} ppm</td>
          </tr>
        </tbody>
      </table>
    `;
    document.getElementById('optimalConditions').innerHTML = optimalHtml;
  
    // Display current sensor data
    const sensorHtml = `
      <table class="table table-sm table-borderless">
        <tbody>
          <tr>
            <td class="text-muted" width="40%">Temperature</td>
            <td class="font-weight-bold">${sensorData.temperature || 'N/A'}°C</td>
          </tr>
          <tr>
            <td class="text-muted">Humidity</td>
            <td class="font-weight-bold">${sensorData.humidity || 'N/A'}%</td>
          </tr>
          <tr>
            <td class="text-muted">Soil Moisture</td>
            <td class="font-weight-bold">${sensorData.moisture || 'N/A'}%</td>
          </tr>
          <tr>
            <td class="text-muted">pH Level</td>
            <td class="font-weight-bold">${sensorData.ph || 'N/A'}</td>
          </tr>
          <tr>
            <td class="text-muted">Light Intensity</td>
            <td class="font-weight-bold">${sensorData.light || 'N/A'} lux</td>
          </tr>
          <tr>
            <td class="text-muted">Nitrogen (N)</td>
            <td class="font-weight-bold">${sensorData.npk_N || sensorData.nitrogen || 'N/A'} ppm</td>
          </tr>
          <tr>
            <td class="text-muted">Phosphorus (P)</td>
            <td class="font-weight-bold">${sensorData.npk_P || sensorData.phosphorus || 'N/A'} ppm</td>
          </tr>
          <tr>
            <td class="text-muted">Potassium (K)</td>
            <td class="font-weight-bold">${sensorData.npk_K || sensorData.potassium || 'N/A'} ppm</td>
          </tr>
        </tbody>
      </table>
    `;
    document.getElementById('currentSensorData').innerHTML = sensorHtml;
  
    // Display parameter matches with quality indicators
    const matchesHtml = Object.entries(matches).map(([key, value]) => {
      const paramName = key.replace('npk_', '').toUpperCase();
      const matchClass = value >= 80 ? 'excellent-match' : 
                        value >= 60 ? 'good-match' :
                        value >= 40 ? 'fair-match' : 'poor-match';
      
      return `
        <div class="param-card ${matchClass} p-3 mb-2">
          <div class="d-flex justify-content-between align-items-center mb-1">
            <span class="font-weight-bold">${paramName}</span>
            <span class="badge badge-light">${Math.round(value)}%</span>
          </div>
          <div class="match-indicator">
            <div class="match-progress" style="width: ${value}%; background-color: ${getProgressColor(value)};"></div>
          </div>
          <div class="d-flex justify-content-between mt-1">
            <small class="text-muted">Optimal: ${crop.optimalConditions?.[key] || 'N/A'}</small>
            <small class="text-muted">Current: ${sensorData[key] || sensorData[key.toLowerCase()] || 'N/A'}</small>
          </div>
        </div>
      `;
    }).join('');
    document.getElementById('parameterMatches').innerHTML = matchesHtml;
  
    // Show modal
    $('#cropDetailsModal').modal('show');
    
    // Store selected crop for confirmation
    window.selectedCrop = crop;
  }
  
  function getProgressColor(value) {
    if (value >= 80) return '#28a745';
    if (value >= 60) return '#5cb85c';
    if (value >= 40) return '#f0ad4e';
    return '#d9534f';
  }
  
  document.getElementById('confirmCropBtn').addEventListener('click', function() {
    if (window.selectedCrop) {
      // Here you would typically send this to your server
      console.log('Confirmed crop:', window.selectedCrop);
      // Update current crop display
      document.getElementById('current-crop').textContent = window.selectedCrop.name;
      // Close modal
      $('#cropDetailsModal').modal('hide');
    }
  });
  </script>

  <script>
    document.getElementById('confirmCropBtn').addEventListener('click', async function() {
  if (window.selectedCrop) {
    try {
      // Show loading state
      const confirmBtn = document.getElementById('confirmCropBtn');
      const originalText = confirmBtn.innerHTML;
      confirmBtn.disabled = true;
      confirmBtn.innerHTML = `
        <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
        Planting...
      `;
      
      // Prepare crop data for saving
      const cropData = {
        ...window.selectedCrop,
        // Include only necessary data
        name: window.selectedCrop.name,
        isRegistered: window.selectedCrop.isRegistered,
        optimalConditions: window.selectedCrop.optimalConditions,
        parameterMatches: window.selectedCrop.parameterMatches,
        score: window.selectedCrop.score || window.selectedCrop.ruleBasedScore
      };

      // Save to Firestore
      const response = await fetch('/confirmCropSelection', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ cropData }),
        credentials: 'include' // Important for session cookies
      });

      const result = await response.json();

      if (!response.ok) {
        throw new Error(result.error || 'Failed to save crop');
      }

      // Update UI
      document.getElementById('current-crop').textContent = window.selectedCrop.name;
      
      // Show success toast
      showToast('success', result.message || 'Crop planted successfully!');
      
      // Close modal after delay
      setTimeout(() => {
        $('#cropDetailsModal').modal('hide');
      }, 1500);
      
    } catch (error) {
      console.error('Error confirming crop:', error);
      showToast('danger', error.message || 'Failed to plant crop');
    } finally {
      // Reset button state
      const confirmBtn = document.getElementById('confirmCropBtn');
      confirmBtn.disabled = false;
      confirmBtn.innerHTML = originalText;
    }
  }
});

// Toast notification function
function showToast(type, message) {
  const toastContainer = document.getElementById('toastContainer');
  if (!toastContainer) {
    console.error('Toast container not found');
    return;
  }
  
  const toastId = `toast-${Date.now()}`;
  const toast = document.createElement('div');
  toast.id = toastId;
  toast.className = `toast show align-items-center text-white bg-${type} border-0`;
  toast.role = 'alert';
  toast.setAttribute('aria-live', 'assertive');
  toast.setAttribute('aria-atomic', 'true');
  toast.style.position = 'fixed';
  toast.style.top = '20px';
  toast.style.right = '20px';
  toast.style.zIndex = '9999';
  toast.style.minWidth = '250px';
  
  toast.innerHTML = `
    <div class="d-flex">
      <div class="toast-body">
        <i class="fas ${type === 'success' ? 'fa-check-circle' : 'fa-exclamation-circle'} me-2"></i>
        ${message}
      </div>
      <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
    </div>
  `;
  
  toastContainer.appendChild(toast);
  
  // Auto-remove toast after 5 seconds
  setTimeout(() => {
    const bootstrapToast = bootstrap.Toast.getOrCreateInstance(toast);
    bootstrapToast.hide();
    toast.addEventListener('hidden.bs.toast', () => {
      toast.remove();
    });
  }, 5000);
}
  </script>
                </div>
            </div>
            <div class="row mt-4">
                        <div class="col-12">
                            <div class="current-crop-info">
                                <div class="card">
                                    <div class="card-header bg-primary text-white">
                                        <h5 class="mb-0">
                                            <i class="fas fa-seedling me-2"></i>
                                            Current Crop Information
                                        </h5>
                                    </div>
                                    <div class="card-body">
                                        <div class="row">
                                            <!-- Basic Information -->
                                            <div class="col-md-4">
                                                <div class="info-section">
                                                    <h6 class="section-title">Basic Information</h6>
                                                    <div class="info-item">
                                                        <span class="label">Crop Name:</span>
                                                        <span class="value" id="current-crop-name">--</span>
                                                    </div>
                                            <div class="info-item">
                                                <span class="label">Status:</span>
                                                <span class="value" id="crop-status">--</span>
                                            </div>
                                            <div class="info-item">
                                                <span class="label">Planting Date:</span>
                                                <span class="value" id="planting-date">--</span>
                                            </div>
                                            <div class="info-item">
                                                <span class="label">Growth Stage:</span>
                                                <span class="value" id="growth-stage">--</span>
                                            </div>
                                            <div class="info-item">
                                                <span class="label">Health Score:</span>
                                                <span class="value" id="health-score">--</span>
                                            </div>
                                            <div class="info-item">
                                                <span class="label">Expected Harvest:</span>
                                                <span class="value" id="expected-harvest">--</span>
                                            </div>
                                        </div>
                                    </div>
                
                                    <!-- Current Conditions -->
                                    <div class="col-md-8">
                                        
                                    
                                        <div class="info-section">
                                            <h6 class="section-title">Parameter Matches</h6>
                                            <div class="parameter-matches">
                                                <div class="parameter-item">
                                                    <div class="parameter-icon">
                                                        <i class="fas fa-thermometer-half"></i>
                                                    </div>
                                                    <div class="parameter-info">
                                                        <span class="parameter-label">Temperature</span>
                                                        <div class="progress">
                                                            <div class="progress-bar" id="temp-match" role="progressbar" style="width: 0%"></div>
                                                        </div>
                                                    </div>
                                                </div>
                                                <div class="parameter-item">
                                                    <div class="parameter-icon">
                                                        <i class="fas fa-tint"></i>
                                                    </div>
                                                    <div class="parameter-info">
                                                        <span class="parameter-label">Humidity</span>
                                                        <div class="progress">
                                                            <div class="progress-bar" id="humidity-match" role="progressbar" style="width: 0%"></div>
                                                        </div>
                                                    </div>
                                                </div>
                                                <div class="parameter-item">
                                                    <div class="parameter-icon">
                                                        <i class="fas fa-water"></i>
                                                    </div>
                                                    <div class="parameter-info">
                                                        <span class="parameter-label">Moisture</span>
                                                        <div class="progress">
                                                            <div class="progress-bar" id="moisture-match" role="progressbar" style="width: 0%"></div>
                                                        </div>
                                                    </div>
                                                </div>
                                                <div class="parameter-item">
                                                    <div class="parameter-icon">
                                                        <i class="fas fa-atom"></i>
                                                    </div>
                                                    <div class="parameter-info">
                                                        <span class="parameter-label">Nitrogen</span>
                                                        <div class="progress">
                                                            <div class="progress-bar" id="nitrogen-match" role="progressbar" style="width: 0%"></div>
                                                        </div>
                                                    </div>
                                                </div>
                                                <div class="parameter-item">
                                                    <div class="parameter-icon">
                                                        <i class="fas fa-fire"></i>
                                                    </div>
                                                    <div class="parameter-info">
                                                        <span class="parameter-label">Phosphorus</span>
                                                        <div class="progress">
                                                            <div class="progress-bar" id="phosphorus-match" role="progressbar" style="width: 0%"></div>
                                                        </div>
                                                    </div>
                                                </div>
                                                <div class="parameter-item">
                                                    <div class="parameter-icon">
                                                        <i class="fas fa-bolt"></i>
                                                    </div>
                                                    <div class="parameter-info">
                                                        <span class="parameter-label">Potassium</span>
                                                        <div class="progress">
                                                            <div class="progress-bar" id="potassium-match" role="progressbar" style="width: 0%"></div>
                                                        </div>
                                                    </div>
                                                </div>
                                                <div class="parameter-item">
                                                    <div class="parameter-icon">
                                                        <i class="fas fa-flask"></i>
                                                    </div>
                                                    <div class="parameter-info">
                                                        <span class="parameter-label">pH Level</span>
                                                        <div class="progress">
                                                            <div class="progress-bar" id="ph-match" role="progressbar" style="width: 0%"></div>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                <!-- Crop Diseases and Prevention Section -->
                <div class="row mt-4">
                    <div class="col-md-6">
                        <div class="card disease-card h-100">
                            <div class="card-header bg-gradient-warning text-white">
                                <div class="d-flex align-items-center">
                                    <i class="fas fa-bug me-3 fa-lg"></i>
                                    <h5 class="mb-0">Possible Diseases & Prevention</h5>
                                </div>
                            </div>
                            <div class="card-body">
                                <div class="diseases-container">
                                    <div class="empty-state">
                                        <div class="empty-state-icon">
                                            <i class="fas fa-shield-virus"></i>
                                        </div>
                                        <h6 class="empty-state-title">No Disease Information</h6>
                                        <p class="empty-state-text">Disease information will appear here when a crop is selected.</p>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Suggested Chemical Fertilizers Section -->
                    <div class="col-md-6">
                        <div class="card fertilizer-card h-100">
                            <div class="card-header bg-gradient-success text-white">
                                <div class="d-flex align-items-center">
                                    <i class="fas fa-flask me-3 fa-lg"></i>
                                    <h5 class="mb-0">Suggested Chemical Fertilizers</h5>
                                </div>
                            </div>
                            <div class="card-body">
                                <div class="fertilizers-container">
                                    <div class="empty-state">
                                        <div class="empty-state-icon">
                                            <i class="fas fa-seedling"></i>
                                        </div>
                                        <h6 class="empty-state-title">No Fertilizer Recommendations</h6>
                                        <p class="empty-state-text">Fertilizer recommendations will appear here when a crop is selected.</p>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

<style>
/* Enhanced styles for the new sections */
.disease-card, .fertilizer-card {
    border: none;
    border-radius: 20px;
    border-radius: 15px;
    box-shadow: 0 4px 20px rgba(0,0,0,0.08);
    transition: all 0.3s ease;
    overflow: hidden;
    background: #ffffff;
}

.disease-card:hover, .fertilizer-card:hover {
    transform: translateY(-5px);
    box-shadow: 0 8px 25px rgba(0,0,0,0.12);
}

.card-header {
    padding: 1.25rem;
    border-bottom: none;
    position: relative;
    overflow: hidden;
}

.bg-gradient-warning {
    background: linear-gradient(135deg, #ff9f43 0%, #ff7f00 100%);
}

.bg-gradient-success {
    background: linear-gradient(135deg, #28a745 0%, #1a7f3a 100%);
}

.card-header h5 {
    font-size: 1.1rem;
    font-weight: 600;
    margin: 0;
    text-shadow: 0 1px 2px rgba(0,0,0,0.1);
}

.card-body {
    padding: 1.5rem;
    background: #ffffff;
}

.empty-state {
    text-align: center;
    padding: 2rem 1rem;
    background: #f8f9fa;
    border-radius: 10px;
    transition: all 0.3s ease;
}

.empty-state:hover {
    background: #f0f2f5;
}

.empty-state-icon {
    width: 80px;
    height: 80px;
    margin: 0 auto 1.5rem;
    background: #ffffff;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    box-shadow: 0 4px 15px rgba(0,0,0,0.1);
}

.empty-state-icon i {
    font-size: 2rem;
    color: #6c757d;
}

.empty-state-title {
    color: #495057;
    font-weight: 600;
    margin-bottom: 0.5rem;
}

.empty-state-text {
    color: #6c757d;
    font-size: 0.9rem;
    margin: 0;
}

/* Animation for icons */
.empty-state-icon i {
    animation: float 3s ease-in-out infinite;
}

@keyframes float {
    0% {
        transform: translateY(0px);
    }
    50% {
        transform: translateY(-10px);
    }
    100% {
        transform: translateY(0px);
    }
}

/* Responsive adjustments */
@media (max-width: 768px) {
    .disease-card, .fertilizer-card {
        margin-bottom: 1.5rem;
    }
    
    .empty-state {
        padding: 1.5rem 1rem;
    }
    
    .empty-state-icon {
        width: 60px;
        height: 60px;
    }
    
    .empty-state-icon i {
        font-size: 1.5rem;
    }
}
</style>

<script>
// Enhanced functions for the new sections
function updateDiseaseInfo(crop) {
    const diseasesContainer = document.querySelector('.diseases-container');
    if (!crop || !crop.diseases) {
        diseasesContainer.innerHTML = `
            <div class="empty-state">
                <div class="empty-state-icon">
                    <i class="fas fa-shield-virus"></i>
                </div>
                <h6 class="empty-state-title">No Disease Information</h6>
                <p class="empty-state-text">Disease information will appear here when a crop is selected.</p>
            </div>
        `;
        return;
    }
    
    // This will be implemented later when we have disease data
    diseasesContainer.innerHTML = `
        <div class="empty-state">
            <div class="empty-state-icon">
                <i class="fas fa-shield-virus"></i>
            </div>
            <h6 class="empty-state-title">Disease Information</h6>
            <p class="empty-state-text">Disease information will be displayed here.</p>
        </div>
    `;
}

function updateFertilizerInfo(crop) {
    const fertilizersContainer = document.querySelector('.fertilizers-container');
    if (!crop || !crop.fertilizers) {
        fertilizersContainer.innerHTML = `
            <div class="empty-state">
                <div class="empty-state-icon">
                    <i class="fas fa-seedling"></i>
                </div>
                <h6 class="empty-state-title">No Fertilizer Recommendations</h6>
                <p class="empty-state-text">Fertilizer recommendations will appear here when a crop is selected.</p>
            </div>
        `;
        return;
    }
    
    // This will be implemented later when we have fertilizer data
    fertilizersContainer.innerHTML = `
        <div class="empty-state">
            <div class="empty-state-icon">
                <i class="fas fa-seedling"></i>
            </div>
            <h6 class="empty-state-title">Fertilizer Recommendations</h6>
            <p class="empty-state-text">Fertilizer recommendations will be displayed here.</p>
        </div>
    `;
}

// Update the existing updateCropInfo function to include the new sections
const originalUpdateCropInfo = updateCropInfo;
updateCropInfo = function(crop) {
    originalUpdateCropInfo(crop);
    updateDiseaseInfo(crop);
    updateFertilizerInfo(crop);
};
</script>

        </div>
        
        <style>
        /* Sensor Grid Styles */
        .sensor-grid {
            display: grid;
            grid-template-columns: repeat(3, 1fr);
            gap: 15px;
        }
        
        .sensor-card {
            background: white;
            border-radius: 10px;
            padding: 20px;
            text-align: center;
            box-shadow: 0 4px 6px rgba(0,0,0,0.1);
            transition: transform 0.3s ease;
            aspect-ratio: 1/1;
            display: flex;
            flex-direction: column;
            justify-content: space-between;
        }
        
        .sensor-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 6px 12px rgba(0,0,0,0.15);
        }
        
        .sensor-icon {
            width: 50px;
            height: 50px;
            margin: 0 auto 10px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 20px;
            color: white;
        }
        
        .sensor-value {
            font-size: 24px;
            font-weight: bold;
            margin: 5px 0;
        }
        
        .sensor-label {
            font-size: 14px;
            color: #666;
            margin-bottom: 5px;
        }
        
        .sensor-status {
            font-size: 12px;
            margin-top: auto;
        }
        
        /* Current Crop Styles */
        .current-crop-display {
            background: white;
            padding: 10px 20px;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.05);
        }
        
        .current-crop-display .label {
            font-weight: 500;
            color: #666;
            margin-right: 8px;
        }
        
        .current-crop-display .value {
            font-weight: 600;
            color: #2a7f62;
        }
        
        .harvest-btn {
            padding: 10px 20px;
            border-radius: 8px;
            font-weight: 500;
        }
        
        /* Recommendation Box Styles */
        .recommendation-box {
            background: white;
            border-radius: 10px;
            overflow: hidden;
            box-shadow: 0 4px 6px rgba(0,0,0,0.1);
        }
        
        .recommendation-header {
            background: #2a7f62;
            color: white;
            padding: 15px 20px;
        }
        
        .recommendation-header h3 {
            margin: 0;
            font-size: 18px;
        }
        
        .recommendation-list {
            padding: 0;
        }
        
        .crop-item {
            display: flex;
            align-items: center;
            padding: 15px 20px;
            border-bottom: 1px solid #eee;
            cursor: pointer;
            transition: background 0.2s;
        }
        
        .crop-item:hover {
            background: #f9f9f9;
        }
        
        .crop-item.active {
            background: #f0f7f4;
        }
        
        .crop-rank {
            width: 30px;
            height: 30px;
            background: #eee;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: bold;
            margin-right: 15px;
            flex-shrink: 0;
        }
        
        .crop-item.active .crop-rank,
        .crop-item:hover .crop-rank {
            background: #2a7f62;
            color: white;
        }
        
        .crop-info {
            flex-grow: 1;
        }
        
        .crop-name {
            font-weight: 500;
            margin-bottom: 5px;
        }
        
        .crop-match {
            display: flex;
            align-items: center;
        }
        
        .match-bar {
            height: 4px;
            background: #2a7f62;
            border-radius: 2px;
            margin-right: 10px;
            width: 50px;
        }
        
        .crop-select {
            color: #999;
        }
        
        .crop-item:hover .crop-select {
            color: #2a7f62;
        }
        
        /* Color Classes */
        .bg-success { background: #28a745; }
        .bg-info { background: #17a2b8; }
        .bg-warning { background: #ffc107; }
        .bg-danger { background: #dc3545; }
        .bg-primary { background: #007bff; }
        .bg-purple { background: #6f42c1; }
        .bg-teal { background: #20c997; }
        
        .text-success { color: #28a745; }
        .text-warning { color: #ffc107; }
        .text-danger { color: #dc3545; }
        </style>
        
        <script>
        // Make crop items interactive
        document.querySelectorAll('.crop-item').forEach(item => {
            item.addEventListener('click', function() {
                // Remove active class from all items
                document.querySelectorAll('.crop-item').forEach(i => {
                    i.classList.remove('active');
                });
                
                // Add active class to clicked item
                this.classList.add('active');
                
                // Update current crop display
                const cropName = this.getAttribute('data-crop');
                document.getElementById('current-crop').textContent = cropName;
            });
        });
        
        // Harvest button functionality
        document.getElementById('harvest-btn').addEventListener('click', () => {
            $('#harvestModal').modal('show');
        });
        </script>
                <style>
                    .visitors-table tbody tr td:last-child {
                        display: flex;
                        align-items: center;
                    }

                    .visitors-table .progress {
                        flex: 1;
                    }

                    .visitors-table .progress-parcent {
                        text-align: right;
                        margin-left: 10px;
                    }
                </style>
             
            <footer class="page-footer">
                <div class="font-13">2025 © <b>NetHouseAutomation</b> - All rights reserved.</div>
                <div class="to-top"><i class="fa fa-angle-double-up"></i></div>
            </footer>
        </div>
    </div>
    <!-- BEGIN THEME CONFIG PANEL-->
    <div class="theme-config">
        <div class="theme-config-toggle"><i class="fa fa-cog theme-config-show"></i><i class="ti-close theme-config-close"></i></div>
        <div class="theme-config-box">
            <div class="text-center font-18 m-b-20">SETTINGS</div>
            <div class="font-strong">LAYOUT OPTIONS</div>
            <div class="check-list m-b-20 m-t-10">
                <label class="ui-checkbox ui-checkbox-gray">
                    <input id="_fixedNavbar" type="checkbox" checked>
                    <span class="input-span"></span>Fixed navbar</label>
                <label class="ui-checkbox ui-checkbox-gray">
                    <input id="_fixedlayout" type="checkbox">
                    <span class="input-span"></span>Fixed layout</label>
                <label class="ui-checkbox ui-checkbox-gray">
                    <input class="js-sidebar-toggler" type="checkbox">
                    <span class="input-span"></span>Collapse sidebar</label>
            </div>
            <div class="font-strong">LAYOUT STYLE</div>
            <div class="m-t-10">
                <label class="ui-radio ui-radio-gray m-r-10">
                    <input type="radio" name="layout-style" value="" checked="">
                    <span class="input-span"></span>Fluid</label>
                <label class="ui-radio ui-radio-gray">
                    <input type="radio" name="layout-style" value="1">
                    <span class="input-span"></span>Boxed</label>
            </div>
            <div class="m-t-10 m-b-10 font-strong">THEME COLORS</div>
            <div class="d-flex m-b-20">
                <div class="color-skin-box" data-toggle="tooltip" data-original-title="Default">
                    <label>
                        <input type="radio" name="setting-theme" value="default" checked="">
                        <span class="color-check-icon"><i class="fa fa-check"></i></span>
                        <div class="color bg-white"></div>
                        <div class="color-small bg-ebony"></div>
                    </label>
                </div>
                <div class="color-skin-box" data-toggle="tooltip" data-original-title="Blue">
                    <label>
                        <input type="radio" name="setting-theme" value="blue">
                        <span class="color-check-icon"><i class="fa fa-check"></i></span>
                        <div class="color bg-blue"></div>
                        <div class="color-small bg-ebony"></div>
                    </label>
                </div>
                <div class="color-skin-box" data-toggle="tooltip" data-original-title="Green">
                    <label>
                        <input type="radio" name="setting-theme" value="green">
                        <span class="color-check-icon"><i class="fa fa-check"></i></span>
                        <div class="color bg-green"></div>
                        <div class="color-small bg-ebony"></div>
                    </label>
                </div>
                <div class="color-skin-box" data-toggle="tooltip" data-original-title="Purple">
                    <label>
                        <input type="radio" name="setting-theme" value="purple">
                        <span class="color-check-icon"><i class="fa fa-check"></i></span>
                        <div class="color bg-purple"></div>
                        <div class="color-small bg-ebony"></div>
                    </label>
                </div>
                <div class="color-skin-box" data-toggle="tooltip" data-original-title="Orange">
                    <label>
                        <input type="radio" name="setting-theme" value="orange">
                        <span class="color-check-icon"><i class="fa fa-check"></i></span>
                        <div class="color bg-orange"></div>
                        <div class="color-small bg-ebony"></div>
                    </label>
                </div>
                <div class="color-skin-box" data-toggle="tooltip" data-original-title="Pink">
                    <label>
                        <input type="radio" name="setting-theme" value="pink">
                        <span class="color-check-icon"><i class="fa fa-check"></i></span>
                        <div class="color bg-pink"></div>
                        <div class="color-small bg-ebony"></div>
                    </label>
                </div>
            </div>
            <div class="d-flex">
                <div class="color-skin-box" data-toggle="tooltip" data-original-title="White">
                    <label>
                        <input type="radio" name="setting-theme" value="white">
                        <span class="color-check-icon"><i class="fa fa-check"></i></span>
                        <div class="color"></div>
                        <div class="color-small bg-silver-100"></div>
                    </label>
                </div>
                <div class="color-skin-box" data-toggle="tooltip" data-original-title="Blue light">
                    <label>
                        <input type="radio" name="setting-theme" value="blue-light">
                        <span class="color-check-icon"><i class="fa fa-check"></i></span>
                        <div class="color bg-blue"></div>
                        <div class="color-small bg-silver-100"></div>
                    </label>
                </div>
                <div class="color-skin-box" data-toggle="tooltip" data-original-title="Green light">
                    <label>
                        <input type="radio" name="setting-theme" value="green-light">
                        <span class="color-check-icon"><i class="fa fa-check"></i></span>
                        <div class="color bg-green"></div>
                        <div class="color-small bg-silver-100"></div>
                    </label>
                </div>
                <div class="color-skin-box" data-toggle="tooltip" data-original-title="Purple light">
                    <label>
                        <input type="radio" name="setting-theme" value="purple-light">
                        <span class="color-check-icon"><i class="fa fa-check"></i></span>
                        <div class="color bg-purple"></div>
                        <div class="color-small bg-silver-100"></div>
                    </label>
                </div>
                <div class="color-skin-box" data-toggle="tooltip" data-original-title="Orange light">
                    <label>
                        <input type="radio" name="setting-theme" value="orange-light">
                        <span class="color-check-icon"><i class="fa fa-check"></i></span>
                        <div class="color bg-orange"></div>
                        <div class="color-small bg-silver-100"></div>
                    </label>
                </div>
                <div class="color-skin-box" data-toggle="tooltip" data-original-title="Pink light">
                    <label>
                        <input type="radio" name="setting-theme" value="pink-light">
                        <span class="color-check-icon"><i class="fa fa-check"></i></span>
                        <div class="color bg-pink"></div>
                        <div class="color-small bg-silver-100"></div>
                    </label>
                </div>
            </div>
        </div>
    </div>
    <!-- Pending Users Modal -->
<div class="modal fade" id="pendingUsersModal" tabindex="-1" role="dialog" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Pending Users</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div id="pendingUsersList">
                    <!-- Pending users will be loaded here -->
                </div>
            </div>
        </div>
    </div>
</div>
    <!-- END THEME CONFIG PANEL-->
    <!-- BEGIN PAGA BACKDROPS-->
    <div class="sidenav-backdrop backdrop"></div>
    <div class="preloader-backdrop">
        <div class="page-preloader">Loading</div>
    </div>
    <!-- END PAGA BACKDROPS-->
    <!-- CORE PLUGINS-->
    <script src="./assets/vendors/jquery/dist/jquery.min.js" type="text/javascript"></script>
    <script src="./assets/vendors/popper.js/dist/umd/popper.min.js" type="text/javascript"></script>
    <script src="./assets/vendors/bootstrap/dist/js/bootstrap.min.js" type="text/javascript"></script>
    <script src="./assets/vendors/metisMenu/dist/metisMenu.min.js" type="text/javascript"></script>
    <script src="./assets/vendors/jquery-slimscroll/jquery.slimscroll.min.js" type="text/javascript"></script>
    <!-- PAGE LEVEL PLUGINS-->
    <script src="./assets/vendors/chart.js/dist/Chart.min.js" type="text/javascript"></script>
    <script src="./assets/vendors/jvectormap/jquery-jvectormap-2.0.3.min.js" type="text/javascript"></script>
    <script src="./assets/vendors/jvectormap/jquery-jvectormap-world-mill-en.js" type="text/javascript"></script>
    <script src="./assets/vendors/jvectormap/jquery-jvectormap-us-aea-en.js" type="text/javascript"></script>
    <script src="./assets/vendors/moment/min/moment.min.js" type="text/javascript"></script>
    <script src="./assets/vendors/fullcalendar/dist/fullcalendar.min.js" type="text/javascript"></script>
    <script src="./assets/vendors/jquery-ui/jquery-ui.min.js" type="text/javascript"></script>
    
    <!-- CORE SCRIPTS-->
    <script src="assets/js/app.min.js" type="text/javascript"></script>
    <!-- PAGE LEVEL SCRIPTS-->
    <script src="./assets/js/scripts/dashboard_1_demo.js" type="text/javascript"></script>

    <script src="./assets/js/scripts/calendar-demo.js" type="text/javascript"></script>

    <!-- Add this HTML for the harvest modal -->
    <div class="modal fade" id="harvestModal" tabindex="-1" role="dialog">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Harvest Crop</h5>
                    <button type="button" class="close" data-dismiss="modal">
                        <span>&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <div class="form-group">
                        <label for="successRate">Rate the crop success (0-100):</label>
                        <input type="number" class="form-control" id="successRate" min="0" max="100" required>
                        <small class="form-text text-muted">Enter a value between 0 and 100 to rate the crop's success</small>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-primary" id="confirmHarvest">
                        <span class="spinner-border spinner-border-sm d-none" role="status" aria-hidden="true"></span>
                        Harvest
                    </button>
                </div>
            </div>
        </div>
    </div>

    <script>
    let currentCropId = null;

    // Function to get active crop
    async function getActiveCrop() {
        try {
            const response = await fetch('/checkActiveCrop');
            const data = await response.json();
            console.log('Active crop data:', data); // Debug log
            
            if (data.hasActiveCrop && data.currentCrop) {
                // Update both the crop name display and the harvest button
                const cropNameElements = document.querySelectorAll('#current-crop-name');
                cropNameElements.forEach(element => {
                    element.textContent = data.currentCrop.name;
                });
                document.getElementById('harvest-btn').disabled = false;
                
                // Update the crop information section
                updateCropInfo(data.currentCrop);
            } else {
                const cropNameElements = document.querySelectorAll('#current-crop-name');
                cropNameElements.forEach(element => {
                    element.textContent = 'None';
                });
                document.getElementById('harvest-btn').disabled = true;
                clearCropInfo();
            }
        } catch (error) {
            console.error('Error getting active crop:', error);
            const cropNameElements = document.querySelectorAll('#current-crop-name');
            cropNameElements.forEach(element => {
                element.textContent = 'None';
            });
            document.getElementById('harvest-btn').disabled = true;
        }
    }

    // Update the updateCropInfo function
    function updateCropInfo(crop) {
        if (!crop) {
            console.log('No crop data provided to updateCropInfo'); // Debug log
            return;
        }
        
        console.log('Updating crop info with:', crop); // Debug log
        
        // Update all instances of the crop name
        const cropNameElements = document.querySelectorAll('#current-crop-name');
        cropNameElements.forEach(element => {
            element.textContent = crop.name || 'None';
        });
        
        // Update other crop information
        document.getElementById('crop-status').textContent = crop.status || '--';
        
        // Format planting date with proper error handling
        let plantingDate = null;
        try {
            if (crop.startDate) {
                // Handle Firestore Timestamp
                if (crop.startDate._seconds) {
                    plantingDate = new Date(crop.startDate._seconds * 1000);
                } else if (crop.startDate.seconds) {
                    plantingDate = new Date(crop.startDate.seconds * 1000);
                } else if (crop.startDate instanceof Date) {
                    plantingDate = crop.startDate;
                } else if (typeof crop.startDate === 'string') {
                    plantingDate = new Date(crop.startDate);
                }
            }
        } catch (error) {
            console.error('Error parsing planting date:', error);
        }
        
        // Update planting date display
        document.getElementById('planting-date').textContent = plantingDate ? 
            plantingDate.toLocaleDateString('en-US', {
                year: 'numeric',
                month: 'long',
                day: 'numeric',
                hour: '2-digit',
                minute: '2-digit'
            }) : '--';
        
        // Calculate growth stage based on days since planting
        if (plantingDate) {
            const daysSincePlanting = Math.floor((new Date() - plantingDate) / (1000 * 60 * 60 * 24));
            let growthStage = '--';
            if (daysSincePlanting < 7) growthStage = 'Seedling';
            else if (daysSincePlanting < 14) growthStage = 'Vegetative';
            else if (daysSincePlanting < 21) growthStage = 'Flowering';
            else if (daysSincePlanting < 28) growthStage = 'Fruiting';
            else growthStage = 'Mature';
            document.getElementById('growth-stage').textContent = growthStage;
        } else {
            document.getElementById('growth-stage').textContent = '--';
        }
        
        // Calculate health score based on parameter matches
        if (crop.parameterMatches) {
            const matches = Object.values(crop.parameterMatches);
            const avgMatch = matches.reduce((a, b) => a + b, 0) / matches.length;
            document.getElementById('health-score').textContent = `${Math.round(avgMatch)}%`;
        } else {
            document.getElementById('health-score').textContent = '--';
        }
        
        // Calculate expected harvest date (assuming 45 days growth cycle)
        if (plantingDate) {
            const harvestDate = new Date(plantingDate);
            harvestDate.setDate(harvestDate.getDate() + 45);
            document.getElementById('expected-harvest').textContent = harvestDate.toLocaleDateString('en-US', {
                year: 'numeric',
                month: 'long',
                day: 'numeric'
            });
        } else {
            document.getElementById('expected-harvest').textContent = '--';
        }

        // Update parameter matches
        if (crop.parameterMatches) {
            updateParameterMatch('temp-match', crop.parameterMatches.temperature);
            updateParameterMatch('humidity-match', crop.parameterMatches.humidity);
            updateParameterMatch('moisture-match', crop.parameterMatches.moisture);
            updateParameterMatch('nitrogen-match', crop.parameterMatches.npk_N);
            updateParameterMatch('phosphorus-match', crop.parameterMatches.npk_P);
            updateParameterMatch('potassium-match', crop.parameterMatches.npk_K);
            updateParameterMatch('ph-match', crop.parameterMatches.ph);
        }

        // Update current conditions from sensor data
        if (window.lastSensorData) {
            updateCurrentConditions(window.lastSensorData);
        }
    }

    // Add event listener for when the DOM is fully loaded
    document.addEventListener('DOMContentLoaded', () => {
        console.log('DOM loaded, fetching active crop...'); // Debug log
        getActiveCrop();
    });

    // Add event listener for when the page is shown
    document.addEventListener('visibilitychange', () => {
        if (document.visibilityState === 'visible') {
            console.log('Page visible, refreshing crop data...'); // Debug log
            getActiveCrop();
        }
    });

    // Update the harvest modal and functionality
    document.getElementById('confirmHarvest').addEventListener('click', async () => {
        const successRate = document.getElementById('successRate').value;
        
        if (!successRate || successRate < 0 || successRate > 100) {
            alert('Please enter a valid success rate between 0 and 100');
            return;
        }

        if (!currentCropId) {
            alert('No active crop to harvest');
            return;
        }

        try {
            const response = await fetch('/harvestCrop', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    cropId: currentCropId,
                    successRate: parseInt(successRate)
                })
            });

            const data = await response.json();

            if (data.success) {
                // Close modal
                $('#harvestModal').modal('hide');
                
                // Show success message
                alert(data.message);
                
                // Reset form
                document.getElementById('successRate').value = '';
                
                // Update UI
                await getActiveCrop();
            } else {
                alert(data.error || 'Failed to harvest crop');
            }
        } catch (error) {
            console.error('Error:', error);
            alert('Failed to harvest crop');
        }
    });

    // Add loading state to harvest button
    document.getElementById('harvest-btn').addEventListener('click', () => {
        if (!currentCropId) {
            alert('No active crop to harvest');
            return;
        }
        $('#harvestModal').modal('show');
    });
    </script>

    <style>
    /* Add these styles to your existing CSS */
    .harvest-btn:disabled {
        opacity: 0.6;
        cursor: not-allowed;
    }

    #harvestModal .modal-content {
        border-radius: 8px;
    }

    #harvestModal .modal-header {
        background-color: #f8f9fa;
        border-bottom: 1px solid #dee2e6;
    }

    #harvestModal .form-control:focus {
        border-color: #2a7f62;
        box-shadow: 0 0 0 0.2rem rgba(42, 127, 98, 0.25);
    }

    #harvestModal .btn-primary {
        background-color: #2a7f62;
        border-color: #2a7f62;
    }

    #harvestModal .btn-primary:hover {
        background-color: #236b53;
        border-color: #236b53;
    }

    .spinner-border {
        margin-right: 5px;
    }
    </style>

    <!-- Add Socket.IO script before closing body tag -->
    <script src="/socket.io/socket.io.js"></script>
    <script>
        // Initialize Socket.IO connection
        const socket = io();

        // Function to update sensor card
        function updateSensorCard(sensorId, value, status) {
            const card = document.querySelector(`[data-sensor-id="${sensorId}"]`);
            if (card) {
                const valueElement = card.querySelector('.sensor-value');
                const statusElement = card.querySelector('.sensor-status');
                
                if (valueElement) {
                    valueElement.textContent = value;
                }
                
                if (statusElement) {
                    statusElement.className = `sensor-status text-${status.color}`;
                    statusElement.innerHTML = `<i class="fa ${status.icon}"></i> ${status.text}`;
                }
            }
        }

        // Function to get status for a sensor value
        function getSensorStatus(sensorId, value) {
            switch(sensorId) {
                case 'nitrogen':
                    return {
                        color: value >= 17 ? 'success' : 'warning',
                        icon: value >= 17 ? 'fa-check-circle' : 'fa-exclamation-circle',
                        text: value >= 17 ? 'Optimal' : 'Low'
                    };
                case 'phosphorus':
                    return {
                        color: value >= 20 ? 'success' : 'warning',
                        icon: value >= 20 ? 'fa-check-circle' : 'fa-exclamation-circle',
                        text: value >= 20 ? 'Normal' : 'Low'
                    };
                case 'potassium':
                    return {
                        color: value >= 18 ? 'success' : 'warning',
                        icon: value >= 18 ? 'fa-check-circle' : 'fa-exclamation-circle',
                        text: value >= 18 ? 'Normal' : 'Low'
                    };
                case 'humidity':
                    return {
                        color: value >= 60 ? 'success' : 'warning',
                        icon: value >= 60 ? 'fa-check-circle' : 'fa-exclamation-circle',
                        text: value >= 60 ? 'Ideal' : 'Low'
                    };
                case 'temperature':
                    return {
                        color: (value >= 25 && value <= 30) ? 'success' : 'warning',
                        icon: (value >= 25 && value <= 30) ? 'fa-check-circle' : 'fa-exclamation-circle',
                        text: (value >= 25 && value <= 30) ? 'Optimal' : 'Adjust'
                    };
                case 'moisture':
                    return {
                        color: value >= 50 ? 'success' : 'warning',
                        icon: value >= 50 ? 'fa-check-circle' : 'fa-exclamation-circle',
                        text: value >= 50 ? 'Good' : 'Low'
                    };
                case 'ph':
                    return {
                        color: (value >= 6 && value <= 7) ? 'success' : 'warning',
                        icon: (value >= 6 && value <= 7) ? 'fa-check-circle' : 'fa-exclamation-circle',
                        text: (value >= 6 && value <= 7) ? 'Ideal' : 'Adjust'
                    };
                case 'light':
                    return {
                        color: value >= 0 ? 'success' : 'warning',
                        icon: value >= 0 ? 'fa-check-circle' : 'fa-exclamation-circle',
                        text: value >= 0 ? 'Good' : 'No Light'
                    };
                default:
                    return {
                        color: 'success',
                        icon: 'fa-check-circle',
                        text: 'Normal'
                    };
            }
        }

        // Listen for sensor updates
        socket.on('sensorUpdate', (data) => {
            console.log('Received sensor update:', data); // Debug log
            
            // Update NPK values
            if (data.nitrogen !== undefined) {
                updateSensorCard('nitrogen', `${data.nitrogen} ppm`, getSensorStatus('nitrogen', data.nitrogen));
            }
            
            if (data.phosphorus !== undefined) {
                updateSensorCard('phosphorus', `${data.phosphorus} ppm`, getSensorStatus('phosphorus', data.phosphorus));
            }
            
            if (data.potassium !== undefined) {
                updateSensorCard('potassium', `${data.potassium} ppm`, getSensorStatus('potassium', data.potassium));
            }
            
            // Update environmental sensors
            if (data.humidity !== undefined) {
                updateSensorCard('humidity', `${data.humidity}%`, getSensorStatus('humidity', data.humidity));
            }
            
            if (data.temperature !== undefined) {
                const tempValue = typeof data.temperature === 'object' ? data.temperature.value : data.temperature;
                updateSensorCard('temperature', `${tempValue}°C`, getSensorStatus('temperature', tempValue));
            }
            
            if (data.moisture !== undefined) {
                const moistureValue = typeof data.moisture === 'object' ? data.moisture.value : data.moisture;
                updateSensorCard('moisture', `${moistureValue}%`, getSensorStatus('moisture', moistureValue));
            }
            
            if (data.ph !== undefined) {
                updateSensorCard('ph', data.ph, getSensorStatus('ph', data.ph));
            }
            
            if (data.light !== undefined) {
                // Handle negative light values
                const lightValue = data.light < 0 ? 0 : data.light;
                updateSensorCard('light', `${lightValue} lux`, getSensorStatus('light', lightValue));
            }
        });

        // Function to fetch weather data
        async function fetchWeatherData() {
            try {
                const response = await fetch('/api/weather');
                const data = await response.json();
                
                if (data.success) {
                    const weatherCard = document.querySelector('[data-sensor-id="weather"]');
                    if (weatherCard) {
                        const valueElement = weatherCard.querySelector('.sensor-value');
                        const statusElement = weatherCard.querySelector('.sensor-status');
                        
                        if (valueElement) {
                            valueElement.textContent = data.weather.main;
                        }
                        
                        if (statusElement) {
                            statusElement.className = 'sensor-status text-success';
                            statusElement.innerHTML = `<i class="fa fa-check-circle"></i> ${data.weather.description}`;
                        }
                    }
                }
            } catch (error) {
                console.error('Error fetching weather data:', error);
                updateSensorCard('weather', 'Error', {
                    color: 'danger',
                    icon: 'fa-exclamation-circle',
                    text: 'Failed to load'
                });
            }
        }

        // Fetch weather data every 30 minutes
        fetchWeatherData();
        setInterval(fetchWeatherData, 30 * 60 * 1000);
    </script>

    <style>
    /* Add these styles for the weather card */
    .weather-card {
        background: linear-gradient(135deg, #56ccf2 0%, #2f80ed 100%);
        color: white;
        padding: 15px;
        border-radius: 10px;
        text-align: center;
    }

    .weather-icon {
        font-size: 2.5rem;
        margin-bottom: 10px;
    }

    .weather-temp {
        font-size: 1.8rem;
        font-weight: bold;
        margin-bottom: 5px;
    }

    .weather-desc {
        font-size: 0.9rem;
        margin-bottom: 15px;
    }

    .weather-details {
        display: flex;
        justify-content: space-around;
        margin-top: 10px;
    }

    .weather-stat {
        text-align: center;
    }

    .weather-stat i {
        font-size: 1.2rem;
        margin-bottom: 5px;
    }

    .weather-stat div {
        font-size: 0.9rem;
    }
    </style>

    <script>
    const CALAPAN_LAT = 13.4125;
    const CALAPAN_LON = 121.1803;

    // Weather Functions
    async function fetchWeather() {
        try {
            const response = await fetch(
                `https://api.open-meteo.com/v1/forecast?latitude=${CALAPAN_LAT}&longitude=${CALAPAN_LON}&current=temperature_2m,relative_humidity_2m,wind_speed_10m,weather_code&timezone=auto`
            );
            const data = await response.json();
            
            if (data.current) {
                const weather = getWeatherDetails(data.current.weather_code);
                
                document.getElementById('weather-temp').textContent = `${Math.round(data.current.temperature_2m)}°C`;
                document.getElementById('weather-desc').textContent = weather.description;
                document.querySelector('.weather-icon').className = `wi ${weather.icon} weather-icon`;
                document.getElementById('weather-humidity').textContent = `${data.current.relative_humidity_2m}%`;
                document.getElementById('weather-wind').textContent = `${Math.round(data.current.wind_speed_10m)} km/h`;
                
                // Update weather card color based on conditions
                updateWeatherCardStyle(data.current.weather_code);
            }
        } catch (error) {
            console.error("Weather fetch error:", error);
            document.getElementById('weather-desc').textContent = "Weather data unavailable";
        }
    }

    // Update weather card style based on conditions
    function updateWeatherCardStyle(weatherCode) {
        const card = document.querySelector('.weather-card');
        let gradient;
        
        if (weatherCode >= 200 && weatherCode < 300) {
            gradient = 'linear-gradient(135deg, #2c3e50 0%, #4ca1af 100%)';
        } else if (weatherCode >= 300 && weatherCode < 600) {
            gradient = 'linear-gradient(135deg, #757f9a 0%, #d7dde8 100%)';
        } else if (weatherCode >= 600 && weatherCode < 700) {
            gradient = 'linear-gradient(135deg, #83a4d4 0%, #b6fbff 100%)';
        } else if (weatherCode === 800) {
            gradient = 'linear-gradient(135deg, #56ccf2 0%, #2f80ed 100%)';
        } else {
            gradient = 'linear-gradient(135deg, #4CAF50 0%, #2196F3 100%)';
        }
        
        card.style.background = gradient;
    }

    // Weather code mapping (WMO codes)
    function getWeatherDetails(code) {
        const weatherMap = {
            0: { description: "Clear sky", icon: "wi-day-sunny" },
            1: { description: "Mainly clear", icon: "wi-day-cloudy" },
            2: { description: "Partly cloudy", icon: "wi-cloud" },
            3: { description: "Overcast", icon: "wi-cloudy" },
            45: { description: "Fog", icon: "wi-fog" },
            48: { description: "Freezing fog", icon: "wi-fog" },
            51: { description: "Light drizzle", icon: "wi-sprinkle" },
            53: { description: "Moderate drizzle", icon: "wi-sprinkle" },
            55: { description: "Heavy drizzle", icon: "wi-sprinkle" },
            61: { description: "Light rain", icon: "wi-rain" },
            63: { description: "Moderate rain", icon: "wi-rain" },
            65: { description: "Heavy rain", icon: "wi-rain" },
            80: { description: "Light showers", icon: "wi-showers" },
            81: { description: "Moderate showers", icon: "wi-showers" },
            82: { description: "Heavy showers", icon: "wi-showers" },
            95: { description: "Thunderstorm", icon: "wi-thunderstorm" },
            96: { description: "Thunderstorm with hail", icon: "wi-storm-showers" },
            99: { description: "Heavy thunderstorm", icon: "wi-storm-showers" }
        };
        
        return weatherMap[code] || { description: "Unknown", icon: "wi-cloud" };
    }

    // Initialize weather when page loads
    window.addEventListener('DOMContentLoaded', () => {
        fetchWeather();
        // Update weather every 30 minutes
        setInterval(fetchWeather, 1800000);
    });
    </script>

    <!-- Add this after the sensor grid section -->
    

    <style>
    /* Add these styles for the crop information section */
    .current-crop-info {
        margin-bottom: 2rem;
    }

    .info-section {
        padding: 1rem;
        background: #f8f9fa;
        border-radius: 8px;
        height: 100%;
    }

    .section-title {
        color: #2a7f62;
        font-weight: 600;
        margin-bottom: 1rem;
        padding-bottom: 0.5rem;
        border-bottom: 2px solid #e9ecef;
    }

    .info-item {
        display: flex;
        justify-content: space-between;
        margin-bottom: 0.75rem;
        padding: 0.5rem;
        background: white;
        border-radius: 4px;
        box-shadow: 0 1px 3px rgba(0,0,0,0.05);
    }

    .info-item .label {
        color: #6c757d;
        font-weight: 500;
    }

    .info-item .value {
        font-weight: 600;
        color: #2a7f62;
    }

    .parameter-matches {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
        gap: 1rem;
    }

    .parameter-item {
        display: flex;
        align-items: center;
        gap: 1rem;
        padding: 1rem;
        background: white;
        border-radius: 8px;
        box-shadow: 0 1px 3px rgba(0,0,0,0.05);
    }

    .parameter-icon {
        width: 40px;
        height: 40px;
        display: flex;
        align-items: center;
        justify-content: center;
        background: #f8f9fa;
        border-radius: 50%;
        color: #2a7f62;
        font-size: 1.2rem;
    }

    .parameter-info {
        flex: 1;
    }

    .parameter-label {
        display: block;
        color: #6c757d;
        margin-bottom: 0.5rem;
    }

    .progress {
        height: 8px;
        background-color: #e9ecef;
        border-radius: 4px;
        overflow: hidden;
    }

    .card-header {
        background: linear-gradient(135deg, #2a7f62 0%, #1a5f4a 100%);
    }

    .card-header h5 {
        margin: 0;
        font-size: 1.1rem;
    }
    </style>

    <script>
    // Add this to your existing script section
    async function fetchCurrentCrop() {
        try {
            const response = await fetch('/checkActiveCrop');
            const data = await response.json();
            
            if (data.hasActiveCrop && data.currentCrop) {
                updateCropInfo(data.currentCrop);
            } else {
                clearCropInfo();
            }
        } catch (error) {
            console.error('Error fetching current crop:', error);
        }
    }

    function updateCropInfo(crop) {
        // Update basic information
        document.getElementById('current-crop-name').textContent = crop.name || '--';
        document.getElementById('crop-status').textContent = crop.status || '--';
        
        // Format planting date with proper error handling
        let plantingDate = null;
        try {
            if (crop.startDate) {
                // Handle Firestore Timestamp
                if (crop.startDate._seconds) {
                    plantingDate = new Date(crop.startDate._seconds * 1000);
                } else if (crop.startDate.seconds) {
                    plantingDate = new Date(crop.startDate.seconds * 1000);
                } else if (crop.startDate instanceof Date) {
                    plantingDate = crop.startDate;
                } else if (typeof crop.startDate === 'string') {
                    plantingDate = new Date(crop.startDate);
                }
            }
        } catch (error) {
            console.error('Error parsing planting date:', error);
        }
        
        // Update planting date display
        document.getElementById('planting-date').textContent = plantingDate ? 
            plantingDate.toLocaleDateString('en-US', {
                year: 'numeric',
                month: 'long',
                day: 'numeric',
                hour: '2-digit',
                minute: '2-digit'
            }) : '--';
        
        // Calculate growth stage based on days since planting
        if (plantingDate) {
            const daysSincePlanting = Math.floor((new Date() - plantingDate) / (1000 * 60 * 60 * 24));
            let growthStage = '--';
            if (daysSincePlanting < 7) growthStage = 'Seedling';
            else if (daysSincePlanting < 14) growthStage = 'Vegetative';
            else if (daysSincePlanting < 21) growthStage = 'Flowering';
            else if (daysSincePlanting < 28) growthStage = 'Fruiting';
            else growthStage = 'Mature';
            document.getElementById('growth-stage').textContent = growthStage;
        } else {
            document.getElementById('growth-stage').textContent = '--';
        }
        
        // Calculate health score based on parameter matches
        if (crop.parameterMatches) {
            const matches = Object.values(crop.parameterMatches);
            const avgMatch = matches.reduce((a, b) => a + b, 0) / matches.length;
            document.getElementById('health-score').textContent = `${Math.round(avgMatch)}%`;
        } else {
            document.getElementById('health-score').textContent = '--';
        }
        
        // Calculate expected harvest date (assuming 45 days growth cycle)
        if (plantingDate) {
            const harvestDate = new Date(plantingDate);
            harvestDate.setDate(harvestDate.getDate() + 45);
            document.getElementById('expected-harvest').textContent = harvestDate.toLocaleDateString('en-US', {
                year: 'numeric',
                month: 'long',
                day: 'numeric'
            });
        } else {
            document.getElementById('expected-harvest').textContent = '--';
        }

        // Update parameter matches
        if (crop.parameterMatches) {
            updateParameterMatch('temp-match', crop.parameterMatches.temperature);
            updateParameterMatch('humidity-match', crop.parameterMatches.humidity);
            updateParameterMatch('moisture-match', crop.parameterMatches.moisture);
            updateParameterMatch('nitrogen-match', crop.parameterMatches.npk_N);
            updateParameterMatch('phosphorus-match', crop.parameterMatches.npk_P);
            updateParameterMatch('potassium-match', crop.parameterMatches.npk_K);
            updateParameterMatch('ph-match', crop.parameterMatches.ph);
        }

        // Update current conditions from sensor data
        if (window.lastSensorData) {
            updateCurrentConditions(window.lastSensorData);
        }
    }

    function updateParameterMatch(elementId, value) {
        const element = document.getElementById(elementId);
        if (element && value !== undefined) {
            element.style.width = `${value}%`;
            element.className = `progress-bar ${getProgressColorClass(value)}`;
        }
    }

    function getProgressColorClass(value) {
        if (value >= 80) return 'bg-success';
        if (value >= 60) return 'bg-warning';
        return 'bg-danger';
    }

    function updateCurrentConditions(sensorData) {
        document.getElementById('crop-temperature').textContent = sensorData.temperature ? `${sensorData.temperature}°C` : '--';
        document.getElementById('crop-humidity').textContent = sensorData.humidity ? `${sensorData.humidity}%` : '--';
        document.getElementById('crop-moisture').textContent = sensorData.moisture ? `${sensorData.moisture}%` : '--';
        document.getElementById('crop-light').textContent = sensorData.light ? `${sensorData.light} lux` : '--';
        document.getElementById('crop-nitrogen').textContent = sensorData.nitrogen ? `${sensorData.nitrogen} ppm` : '--';
        document.getElementById('crop-phosphorus').textContent = sensorData.phosphorus ? `${sensorData.phosphorus} ppm` : '--';
        document.getElementById('crop-potassium').textContent = sensorData.potassium ? `${sensorData.potassium} ppm` : '--';
        document.getElementById('crop-ph').textContent = sensorData.ph || '--';
    }

    function clearCropInfo() {
        const elements = [
            'current-crop-name', 'crop-status', 'planting-date', 'growth-stage',
            'health-score', 'expected-harvest', 'crop-temperature', 'crop-humidity',
            'crop-moisture', 'crop-light', 'crop-nitrogen', 'crop-phosphorus',
            'crop-potassium', 'crop-ph'
        ];
        
        elements.forEach(id => {
            const element = document.getElementById(id);
            if (element) element.textContent = '--';
        });

        const matchElements = [
            'temp-match', 'humidity-match', 'moisture-match',
            'nitrogen-match', 'phosphorus-match', 'potassium-match', 'ph-match'
        ];

        matchElements.forEach(id => {
            const element = document.getElementById(id);
            if (element) {
                element.style.width = '0%';
                element.className = 'progress-bar';
            }
        });
    }

    // Update the socket event listener
    socket.on('sensorUpdate', (data) => {
        // Store the latest sensor data
        window.lastSensorData = data;
        
        // Update current conditions if we have an active crop
        if (document.getElementById('current-crop-name').textContent !== '--') {
            updateCurrentConditions(data);
        }
    });

    // Fetch current crop data when page loads
    document.addEventListener('DOMContentLoaded', fetchCurrentCrop);
    </script>
    
<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Load pending users count
        loadPendingUsersCount();
    
        // Handle pending users button click
        document.getElementById('pendingUsersBtn').addEventListener('click', function(e) {
            e.preventDefault();
            loadPendingUsers();
            $('#pendingUsersModal').modal('show');
        });
    
        // Function to load pending users count
        async function loadPendingUsersCount() {
            try {
                const response = await fetch('/api/users/pending/count');
                const data = await response.json();
                if (data.success) {
                    const countBadge = document.getElementById('pendingUsersCount');
                    if (data.count > 0) {
                        countBadge.textContent = data.count;
                        countBadge.style.display = 'inline';
                    } else {
                        countBadge.style.display = 'none';
                    }
                }
            } catch (error) {
                console.error('Error loading pending users count:', error);
            }
        }
    
        // Function to load pending users
        async function loadPendingUsers() {
            try {
                const response = await fetch('/api/users/pending');
                const data = await response.json();
    
                if (data.success) {
                    const pendingUsersList = document.getElementById('pendingUsersList');
                    pendingUsersList.innerHTML = '';
    
                    if (!data.users || data.users.length === 0) {
                        pendingUsersList.innerHTML = '<div class="alert alert-info">No pending users found.</div>';
                        return;
                    }
    
                    data.users.forEach(user => {
                        const userCard = document.createElement('div');
                        userCard.className = 'card mb-3';
                        userCard.innerHTML = `
                            <div class="card-body">
                                <div class="row">
                                    <div class="col-md-2">
                                        <img src="${user.profilePicture || '/assets/img/default-avatar.png'}" 
                                             class="img-fluid rounded-circle" 
                                             style="width: 80px; height: 80px; object-fit: cover;">
                                    </div>
                                    <div class="col-md-7">
                                        <h5 class="card-title">${user.name}</h5>
                                        <p class="card-text">
                                            <strong>Email:</strong> ${user.email}<br>
                                            <strong>Contact:</strong> ${user.contactNumber || 'N/A'}<br>
                                            <strong>Role:</strong> ${user.role}<br>
                                            <strong>Email Verification:</strong> ${user.isVerified ? 'Verified' : 'Not Verified'}<br>
                                            <strong>Registered:</strong> ${user.createdAt}
                                        </p>
                                    </div>
                                    <div class="col-md-3 text-right">
                                        <button class="btn btn-success btn-sm mb-2 approve-user" 
                                                data-user-id="${user.id}">
                                            <i class="fa fa-check"></i> Approve
                                        </button>
                                        <button class="btn btn-danger btn-sm reject-user" 
                                                data-user-id="${user.id}">
                                            <i class="fa fa-times"></i> Reject
                                        </button>
                                    </div>
                                </div>
                            </div>
                        `;
                        pendingUsersList.appendChild(userCard);
                    });
    
                    // Add event listeners for approve/reject buttons
                    document.querySelectorAll('.approve-user').forEach(button => {
                        button.addEventListener('click', handleUserApproval);
                    });
                    document.querySelectorAll('.reject-user').forEach(button => {
                        button.addEventListener('click', handleUserRejection);
                    });
                } else {
                    const pendingUsersList = document.getElementById('pendingUsersList');
                    pendingUsersList.innerHTML = `<div class="alert alert-danger">Error: ${data.message}</div>`;
                }
            } catch (error) {
                console.error('Error loading pending users:', error);
                const pendingUsersList = document.getElementById('pendingUsersList');
                pendingUsersList.innerHTML = `<div class="alert alert-danger">Failed to load pending users: ${error.message}</div>`;
            }
        }
    
        // Handle user approval
        async function handleUserApproval(e) {
            const userId = e.target.closest('button').dataset.userId;
            try {
                const response = await fetch(`/api/users/${userId}/approve`, {
                    method: 'PUT'
                });
                const data = await response.json();
                if (data.success) {
                    showNotification('success', 'User approved successfully');
                    loadPendingUsers();
                    loadPendingUsersCount();
                } else {
                    showNotification('error', 'Error approving user');
                }
            } catch (error) {
                console.error('Error:', error);
                showNotification('error', 'Error approving user');
            }
        }
    
        // Handle user rejection
        async function handleUserRejection(e) {
            const userId = e.target.closest('button').dataset.userId;
            try {
                const response = await fetch(`/api/users/${userId}/reject`, {
                    method: 'PUT'
                });
                const data = await response.json();
                if (data.success) {
                    showNotification('success', 'User rejected successfully');
                    loadPendingUsers();
                    loadPendingUsersCount();
                } else {
                    showNotification('error', 'Error rejecting user');
                }
            } catch (error) {
                console.error('Error:', error);
                showNotification('error', 'Error rejecting user');
            }
        }
    
        // Show notification
        function showNotification(type, message) {
            const toast = document.createElement('div');
            toast.className = `toast toast-${type}`;
            toast.innerHTML = message;
            document.body.appendChild(toast);
    
            setTimeout(() => {
                toast.remove();
            }, 3000);
        }
    });
    </script>

</body>

</html>