<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width initial-scale=1.0">
    <title>NetHouseAutomation Reports & Analytics</title>
    <!-- GLOBAL MAINLY STYLES-->
    <link href="./assets/vendors/bootstrap/dist/css/bootstrap.min.css" rel="stylesheet" />
    <link href="./assets/vendors/font-awesome/css/font-awesome.min.css" rel="stylesheet" />
    <link href="./assets/vendors/themify-icons/css/themify-icons.css" rel="stylesheet" />
    <!-- PLUGINS STYLES-->
    <link href="./assets/vendors/datatables/datatables.min.css" rel="stylesheet" />
    <link href="./assets/vendors/jvectormap/jquery-jvectormap-2.0.3.css" rel="stylesheet" />
    <!-- THEME STYLES-->
    <link href="assets/css/main.min.css" rel="stylesheet" />
    <!-- PAGE LEVEL STYLES-->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <link href="./assets/vendors/fullcalendar/dist/fullcalendar.min.css" rel="stylesheet" />
    <link href="./assets/vendors/fullcalendar/dist/fullcalendar.print.min.css" rel="stylesheet" media="print" />
    <style>
        .report-section {
            margin-bottom: 30px;
            background: white;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            padding: 20px;
        }
        .export-buttons {
            margin-bottom: 15px;
        }
        .search-box {
            margin-bottom: 15px;
        }
        .chart-container {
            height: 300px;
            margin-bottom: 20px;
        }
        .table-responsive {
            margin-top: 15px;
        }
        .status-indicator {
            width: 10px;
            height: 10px;
            border-radius: 50%;
            display: inline-block;
            margin-right: 5px;
        }
        .status-normal { background-color: #28a745; }
        .status-warning { background-color: #ffc107; }
        .status-danger { background-color: #dc3545; }
        .table-hover tbody tr {
            cursor: pointer;
        }
        .report-section {
            margin-bottom: 20px;
            padding: 15px;
            border: 1px solid #ddd;
            border-radius: 5px;
        }
        .report-header {
            border-bottom: 2px solid #333;
            padding-bottom: 10px;
            margin-bottom: 20px;
        }
        .report-footer {
            border-top: 1px solid #ddd;
            padding-top: 10px;
            margin-top: 20px;
        }
        .parameter-grid {
            display: grid;
            grid-template-columns: repeat(2, 1fr);
            gap: 10px;
        }
        .parameter-item {
            padding: 10px;
            background: #f8f9fa;
            border-radius: 4px;
        }
        .status-badge {
            padding: 5px 10px;
            border-radius: 15px;
            font-size: 0.9em;
        }
        .status-successful { background-color: #d4edda; color: #155724; }
        .status-active { background-color: #fff3cd; color: #856404; }
        .status-failed { background-color: #f8d7da; color: #721c24; }
        .text-muted {
            color: #6c757d;
            font-size: 0.85em;
        }
        .d-block {
            display: block;
        }
        .section-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
            padding-bottom: 10px;
            border-bottom: 1px solid #eee;
        }
        .section-actions {
            display: flex;
            gap: 10px;
        }
        .pagination-info {
            display: flex;
            align-items: center;
            gap: 15px;
            margin-top: 15px;
        }
        .page-size-selector {
            display: flex;
            align-items: center;
            gap: 10px;
        }
        .download-options {
            display: flex;
            gap: 10px;
            margin-top: 10px;
        }
        .table-container {
            position: relative;
            margin-top: 20px;
        }
        .table-loading {
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(255, 255, 255, 0.8);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 1000;
        }
        .status-badge {
            padding: 5px 10px;
            border-radius: 15px;
            font-size: 0.85em;
            display: inline-block;
        }
        .status-normal { background-color: #d4edda; color: #155724; }
        .status-warning { background-color: #fff3cd; color: #856404; }
        .status-danger { background-color: #f8d7da; color: #721c24; }
    </style>
</head>

<body class="fixed-navbar">
    <div class="page-wrapper">
        <!-- START HEADER-->
        <header class="header">
            <div class="page-brand">
                <a class="link" href="/admin-dashboard">
                    <span class="brand">Demo
                        <span class="brand-tip">FARM</span>
                    </span>
                    <span class="brand-mini">DF</span>
                </a>
            </div>
            <div class="flexbox flex-1">
                <!-- START TOP-LEFT TOOLBAR-->
                <ul class="nav navbar-toolbar">
                    <li>
                        <a class="nav-link sidebar-toggler js-sidebar-toggler"><i class="ti-menu"></i></a>
                    </li>
                </ul>
                <!-- END TOP-LEFT TOOLBAR-->
                <!-- START TOP-RIGHT TOOLBAR-->
                <ul class="nav navbar-toolbar">
                    <li class="dropdown dropdown-user">
                        <a class="nav-link dropdown-toggle link" data-toggle="dropdown">
                            <img src="./assets/img/admin-avatar.png" />
                            <span></span>Admin<i class="fa fa-angle-down m-l-5"></i></a>
                        <ul class="dropdown-menu dropdown-menu-right">
                            <a class="dropdown-item" href="/admin-profile"><i class="fa fa-user"></i>Profile</a>
                            <li class="dropdown-divider"></li>
                            <a class="dropdown-item" href="/logout"><i class="fa fa-power-off"></i>Logout</a>
                        </ul>
                    </li>
                </ul>
                <!-- END TOP-RIGHT TOOLBAR-->
            </div>
        </header>
        <!-- END HEADER-->
        <!-- START SIDEBAR-->
        <nav class="page-sidebar" id="sidebar">
            <div id="sidebar-collapse">
                <div class="admin-block d-flex">
                    <div>
                        <img src="./assets/img/admin-avatar.png" width="45px" />
                    </div>
                    <div class="admin-info">
                        <div class="font-strong">Dan Lloyd</div><small>User</small></div>
                </div>
                <ul class="side-menu metismenu">
                    <li>
                        <a class="active" href="/admin-dashboard"><i class="sidebar-item-icon fas fa-tachometer-alt"></i>
                            <span class="nav-label">Dashboard</span>
                        </a>
                    </li>
                    <li>
                        <a class="active" href="/admin-plant-overview"><i class="sidebar-item-icon fas fa-leaf"></i>
                            <span class="nav-label">Plant Overview</span>
                        </a>
                    </li>
                    <li>
                        <a class="active" href="/admin-irrigation-controll"><i class="sidebar-item-icon fas fa-faucet"></i>
                            <span class="nav-label">Irrigation Control</span>
                        </a>
                    </li>
                    <li>
                        <a class="active" href="/admin-reports&analytics"><i class="sidebar-item-icon fas fa-chart-bar"></i>
                            <span class="nav-label">Reports & Analytics</span>
                        </a>
                    </li>
                    <li>
                        <a class="active" href="/admin-user-management"><i class="sidebar-item-icon fas fa-users-cog"></i>
                            <span class="nav-label">User Management</span>
                        </a>
                            </li>
                </ul>
            </div>
        </nav>
        <div class="content-wrapper">
            <div class="page-content fade-in-up">
                <div class="row">
                    <div class="col-12">
                        <h1 class="page-title">Reports & Analytics</h1>
                        
                        <!-- Export Controls -->
                        <div class="export-buttons">
                            <button class="btn btn-primary" onclick="exportToPDF()">
                                <i class="fa fa-file-pdf-o"></i> Export to PDF
                            </button>
                            <button class="btn btn-success" onclick="exportToExcel()">
                                <i class="fa fa-file-excel-o"></i> Export to Excel
                            </button>
                            <button class="btn btn-info" onclick="exportToWord()">
                                <i class="fa fa-file-word-o"></i> Export to Word
                            </button>
                            </div>

                        <!-- Daily Sensor Summary Section -->
                        <div class="report-section">
                            <div class="section-header">
                                <h3>Daily Sensor Summary</h3>
                                <div class="section-actions">
                                    <button class="btn btn-outline-primary" onclick="printSensorData()">
                                        <i class="fa fa-print"></i> Print
                                    </button>
                                    <button class="btn btn-outline-success" onclick="showDownloadModal('sensor')">
                                        <i class="fa fa-download"></i> Download
                                    </button>
                                </div>
                            </div>
                            
                            <div class="search-box mb-3">
                                <div class="input-group">
                                    <input type="text" class="form-control" id="sensorSearch" placeholder="Search sensor data...">
                                    <div class="input-group-append">
                                        <button class="btn btn-outline-secondary" type="button" onclick="clearSensorSearch()">
                                            <i class="fa fa-times"></i>
                                        </button>
                                    </div>
                                </div>
                            </div>

                            <div class="chart-container mb-4">
                                <canvas id="sensorChart"></canvas>
                            </div>

                            <div class="table-container">
                                <div class="table-responsive">
                                    <table class="table table-striped" id="sensorTable">
                                        <thead>
                                            <tr>
                                                <th>Date</th>
                                                <th>Temperature (°C)</th>
                                                <th>Humidity (%)</th>
                                                <th>Soil Moisture (%)</th>
                                                <th>Light (lux)</th>
                                                <th>pH Level</th>
                                                <th>NPK Values</th>
                                                <th>Status</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            <!-- Data will be populated dynamically -->
                                        </tbody>
                                    </table>
                                </div>

                                <div class="pagination-info">
                                    <div class="page-size-selector">
                                        <label for="pageSize">Show:</label>
                                        <select class="form-control form-control-sm" id="pageSize" onchange="changePageSize()">
                                            <option value="10">10</option>
                                            <option value="25">25</option>
                                            <option value="50">50</option>
                                            <option value="100">100</option>
                                        </select>
                                        <span>entries</span>
                                    </div>
                                    
                                    <div class="text-muted">
                                        Showing <span id="startEntry">1</span> to <span id="endEntry">10</span> of <span id="totalEntries">0</span> entries
                                    </div>

                                    <div class="pagination-controls">
                                        <button class="btn btn-outline-primary btn-sm" onclick="loadFirstPage()" id="firstPageBtn">
                                            <i class="fa fa-angle-double-left"></i>
                                        </button>
                                        <button class="btn btn-outline-primary btn-sm" onclick="loadPreviousPage()" id="prevPageBtn" disabled>
                                            <i class="fa fa-angle-left"></i>
                                        </button>
                                        <span class="mx-2">Page <span id="currentPage">1</span> of <span id="totalPages">1</span></span>
                                        <button class="btn btn-outline-primary btn-sm" onclick="loadNextPage()" id="nextPageBtn">
                                            <i class="fa fa-angle-right"></i>
                                        </button>
                                        <button class="btn btn-outline-primary btn-sm" onclick="loadLastPage()" id="lastPageBtn">
                                            <i class="fa fa-angle-double-right"></i>
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Planted Crops Section -->
                        <div class="report-section">
                            <div class="section-header">
                                <h3>Planted Crops History</h3>
                                <div class="section-actions">
                                    <button class="btn btn-outline-primary" onclick="printPlantedCrops()">
                                        <i class="fa fa-print"></i> Print
                                    </button>
                                </div>
                            </div>
                            <div class="search-box">
                                <input type="text" class="form-control" id="plantedCropSearch" placeholder="Search planted crops...">
                            </div>
                            <div class="table-responsive">
                                <table class="table table-striped table-hover" id="plantedCropsTable">
                                    <thead>
                                        <tr>
                                            <th>Crop Name</th>
                                            <th>Start Date</th>
                                            <th>End Date</th>
                                            <th>Status</th>
                                            <th>Success Rate</th>
                                            <th>Score</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        <!-- Data will be populated dynamically -->
                                    </tbody>
                                </table>
                        </div>
                    </div>

                        <!-- Registered Crops Section -->
                        <div class="report-section">
                            <div class="section-header">
                                <h3>Registered Crops</h3>
                                <div class="section-actions">
                                    <button class="btn btn-outline-primary" onclick="printRegisteredCrops()">
                                        <i class="fa fa-print"></i> Print
                                    </button>
                                </div>
                            </div>
                            <div class="search-box">
                                <input type="text" class="form-control" id="registeredCropSearch" placeholder="Search registered crops...">
                            </div>
                            <div class="table-responsive">
                                <table class="table table-striped" id="registeredCropsTable">
                                    <thead>
                                        <tr>
                                            <th>Crop Name</th>
                                            <th>Optimal Temperature</th>
                                            <th>Optimal Humidity</th>
                                            <th>Optimal Moisture</th>
                                            <th>Optimal Light</th>
                                            <th>Optimal pH</th>
                                            <th>Optimal NPK</th>
                                            <th>Priority</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        <!-- Data will be populated dynamically -->
                                    </tbody>
                                </table>
                    </div>
                </div>

                        <!-- Disease Monitoring Section -->
                        <div class="report-section">
                            <div class="section-header">
                                <h3>Disease Monitoring</h3>
                                <div class="section-actions">
                                    <button class="btn btn-outline-primary" onclick="printDiseaseData()">
                                        <i class="fa fa-print"></i> Print
                                    </button>
                                </div>
                            </div>
                            <div class="search-box">
                                <input type="text" class="form-control" id="diseaseSearch" placeholder="Search disease records...">
                            </div>
                            <div class="table-responsive">
                                <table class="table table-striped" id="diseaseTable">
                                    <thead>
                                        <tr>
                                            <th>Disease Name</th>
                                            <th>Affected Crop</th>
                                            <th>Detection Date</th>
                                            <th>Severity</th>
                                            <th>Treatment Status</th>
                                            <th>Actions</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        <!-- Data will be populated dynamically -->
                                    </tbody>
                                </table>
                                            </div>
                                        </div>

                        <!-- Nutrient Analysis Section -->
                        <div class="report-section">
                            <div class="section-header">
                                <h3>Nutrient Analysis</h3>
                                <div class="section-actions">
                                    <button class="btn btn-outline-primary" onclick="printNutrientData()">
                                        <i class="fa fa-print"></i> Print
                                    </button>
                                </div>
                            </div>
                            <div class="chart-container">
                                <canvas id="nutrientChart"></canvas>
                            </div>
                            <div class="table-responsive">
                                <table class="table table-striped" id="nutrientTable">
                                    <thead>
                                        <tr>
                                            <th>Date</th>
                                            <th>Nitrogen (N)</th>
                                            <th>Phosphorus (P)</th>
                                            <th>Potassium (K)</th>
                                            <th>Status</th>
                                            <th>Recommendations</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        <!-- Data will be populated dynamically -->
                                    </tbody>
                                </table>
                            </div>
                        </div>

                        <!-- Irrigation Schedule Section -->
                        <div class="report-section">
                            <div class="section-header">
                                <h3>Irrigation Schedule</h3>
                                <div class="section-actions">
                                    <button class="btn btn-outline-primary" onclick="printIrrigationData()">
                                        <i class="fa fa-print"></i> Print
                                    </button>
                                </div>
                            </div>
                            <div class="search-box">
                                <input type="text" class="form-control" id="irrigationSearch" placeholder="Search irrigation records...">
                            </div>
                            <div class="table-responsive">
                                <table class="table table-striped" id="irrigationTable">
                                    <thead>
                                        <tr>
                                            <th>Schedule ID</th>
                                            <th>Crop</th>
                                            <th>Start Time</th>
                                            <th>Duration</th>
                                            <th>Water Amount</th>
                                            <th>Status</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        <!-- Data will be populated dynamically -->
                                    </tbody>
                                </table>
                            </div>
                        </div>

                        <!-- Current Crop Analysis Section -->
                        <div class="report-section" id="currentCropSection" style="display: none;">
                            <div class="section-header">
                                <h3>Current Crop Analysis</h3>
                                <div class="section-actions">
                                    <button class="btn btn-outline-primary" onclick="printCurrentCropAnalysis()">
                                        <i class="fa fa-print"></i> Print
                                    </button>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-6">
                                    <div class="parameter-grid">
                                        <div class="parameter-item">
                                            <h5>Current Conditions</h5>
                                            <div id="currentConditions"></div>
                                        </div>
                                        <div class="parameter-item">
                                            <h5>Optimal Conditions</h5>
                                            <div id="optimalConditions"></div>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="parameter-grid">
                                        <div class="parameter-item">
                                            <h5>Parameter Matching</h5>
                                            <div id="parameterMatching"></div>
                                        </div>
                                        <div class="parameter-item">
                                            <h5>Health Analysis</h5>
                                            <div id="healthAnalysis"></div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="row mt-4">
                                <div class="col-12">
                                    <div class="chart-container">
                                        <canvas id="parameterMatchChart"></canvas>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <footer class="page-footer">
                <div class="font-13">2025 © <b>NetHouseAutomation</b> - All rights reserved.</div>
                <div class="to-top"><i class="fa fa-angle-double-up"></i></div>
            </footer>
        </div>
    </div>

    <!-- Add this modal HTML just before the closing body tag -->
    <div class="modal fade" id="cropDetailsModal" tabindex="-1" role="dialog" aria-labelledby="cropDetailsModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="cropDetailsModalLabel">Crop Details Report</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <div class="report-header text-center mb-4">
                        <h4>NetHouseAutomation</h4>
                        <p>Crop Performance Report</p>
                    </div>
                    <div class="report-content">
                        <div class="report-section">
                            <h5>Basic Information</h5>
                            <div id="cropBasicInfo"></div>
                        </div>
                        <div class="report-section">
                            <h5>Performance Metrics</h5>
                            <div id="cropPerformance"></div>
                        </div>
                        <div class="report-section">
                            <h5>Parameter Analysis</h5>
                            <div id="cropParameters"></div>
                        </div>
                        <div class="report-section">
                            <h5>Optimal Conditions</h5>
                            <div id="cropOptimalConditions"></div>
                        </div>
                    </div>
                    <div class="report-footer text-center mt-4">
                        <p>Generated on: <span id="reportDate"></span></p>
                        <p>© 2025 NetHouseAutomation - All rights reserved</p>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                    <button type="button" class="btn btn-primary" onclick="printReport()">Print Report</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Download Modal -->
    <div class="modal fade" id="downloadModal" tabindex="-1" role="dialog" aria-labelledby="downloadModalLabel" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="downloadModalLabel">Download Data</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <form id="downloadForm">
                        <div class="form-group">
                            <label for="startDate">Start Date</label>
                            <input type="date" class="form-control" id="startDate" required>
                        </div>
                        <div class="form-group">
                            <label for="endDate">End Date</label>
                            <input type="date" class="form-control" id="endDate" required>
                        </div>
                        <div class="form-group">
                            <label for="downloadFormat">Format</label>
                            <select class="form-control" id="downloadFormat">
                                <option value="csv">CSV</option>
                                <option value="json">JSON</option>
                                <option value="excel">Excel</option>
                                <option value="pdf">PDF</option>
                            </select>
                        </div>
                        <div class="form-group">
                            <label for="downloadType">Data Type</label>
                            <select class="form-control" id="downloadType">
                                <option value="sensor">Sensor Data</option>
                                <option value="crops">Crop Data</option>
                                <option value="all">All Data</option>
                            </select>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                    <button type="button" class="btn btn-primary" onclick="downloadData()">Download</button>
                </div>
            </div>
        </div>
    </div>

    <!-- CORE PLUGINS-->
    <script src="./assets/vendors/jquery/dist/jquery.min.js" type="text/javascript"></script>
    <script src="./assets/vendors/popper.js/dist/umd/popper.min.js" type="text/javascript"></script>
    <script src="./assets/vendors/bootstrap/dist/js/bootstrap.min.js" type="text/javascript"></script>
    <script src="./assets/vendors/metisMenu/dist/metisMenu.min.js" type="text/javascript"></script>
    <script src="./assets/vendors/jquery-slimscroll/jquery.slimscroll.min.js" type="text/javascript"></script>
    <!-- PAGE LEVEL PLUGINS-->
    <script src="./assets/vendors/chart.js/dist/Chart.min.js" type="text/javascript"></script>
    <script src="./assets/vendors/datatables/datatables.min.js" type="text/javascript"></script>
    <script src="./assets/vendors/jspdf/jspdf.min.js" type="text/javascript"></script>
    <script src="./assets/vendors/jspdf-autotable/jspdf.plugin.autotable.js" type="text/javascript"></script>
    <script src="./assets/vendors/xlsx/xlsx.full.min.js" type="text/javascript"></script>
    <script src="./assets/vendors/docx/docx.min.js" type="text/javascript"></script>
    
    <!-- CORE SCRIPTS-->
    <script src="assets/js/app.min.js" type="text/javascript"></script>
    
    <script>
        // Add these variables at the top of your script section
        let currentPage = 1;
        let pageSize = 10;
        let lastDoc = null;
        let hasMore = false;
        let totalEntries = 0;
        let currentSection = 'sensor';

        function initializeSensorChart() {
            console.log('Initializing sensor chart...');
            const ctx = document.getElementById('sensorChart').getContext('2d');
            window.sensorChart = new Chart(ctx, {
                type: 'line',
                data: {
                    labels: [],
                    datasets: [{
                        label: 'Temperature (°C)',
                        data: [],
                        borderColor: 'rgb(255, 99, 132)',
                        tension: 0.1,
                        fill: false
                    }, {
                        label: 'Humidity (%)',
                        data: [],
                        borderColor: 'rgb(54, 162, 235)',
                        tension: 0.1,
                        fill: false
                    }, {
                        label: 'Soil Moisture (%)',
                        data: [],
                        borderColor: 'rgb(75, 192, 192)',
                        tension: 0.1,
                        fill: false
                    }, {
                        label: 'Light (lux)',
                        data: [],
                        borderColor: 'rgb(255, 206, 86)',
                        tension: 0.1,
                        fill: false
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    scales: {
                        y: {
                            beginAtZero: true
                        }
                    },
                    plugins: {
                        legend: {
                            position: 'top',
                        },
                        title: {
                            display: true,
                            text: 'Sensor Data Over Time'
                        }
                    }
                }
            });
            console.log('Sensor chart initialized');
        }

        function initializeNutrientChart() {
            console.log('Initializing nutrient chart...');
            const ctx = document.getElementById('nutrientChart').getContext('2d');
            window.nutrientChart = new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: [],
                    datasets: [{
                        label: 'Nitrogen (N)',
                        data: [],
                        backgroundColor: 'rgba(255, 99, 132, 0.5)'
                    }, {
                        label: 'Phosphorus (P)',
                        data: [],
                        backgroundColor: 'rgba(54, 162, 235, 0.5)'
                    }, {
                        label: 'Potassium (K)',
                        data: [],
                        backgroundColor: 'rgba(75, 192, 192, 0.5)'
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    scales: {
                        y: {
                            beginAtZero: true
                        }
                    },
                    plugins: {
                        legend: {
                            position: 'top',
                        },
                        title: {
                            display: true,
                            text: 'Nutrient Levels'
                        }
                    }
                }
            });
            console.log('Nutrient chart initialized');
        }

        function loadSensorData(page = 1) {
            console.log('Loading sensor data for page:', page);
            const tbody = document.querySelector('#sensorTable tbody');
            tbody.innerHTML = '<tr><td colspan="8" class="text-center"><div class="spinner-border text-primary" role="status"></div></td></tr>';

            let url = `/api/sensor-data?pageSize=${pageSize}`;
            if (page > 1 && lastDoc) {
                url += `&lastDoc=${encodeURIComponent(JSON.stringify(lastDoc))}`;
            }

            fetch(url)
                .then(response => {
                    console.log('Sensor data response status:', response.status);
                    if (!response.ok) {
                        throw new Error(`HTTP error! status: ${response.status}`);
                    }
                    return response.json();
                })
                .then(data => {
                    console.log('Raw sensor data received:', data);
                    if (data && data.daily_sensor_summaries && data.daily_sensor_summaries.length > 0) {
                        console.log('Processing sensor data:', data.daily_sensor_summaries);
                        const sensorData = data.daily_sensor_summaries;
                        
                        // Update pagination state
                        currentPage = page;
                        lastDoc = data.lastDoc;
                        hasMore = data.hasMore;
                        totalEntries = data.totalEntries || sensorData.length;
                        
                        // Update pagination controls
                        document.getElementById('currentPage').textContent = currentPage;
                        document.getElementById('totalPages').textContent = Math.ceil(totalEntries / pageSize);
                        document.getElementById('totalEntries').textContent = totalEntries;
                        document.getElementById('startEntry').textContent = ((currentPage - 1) * pageSize) + 1;
                        document.getElementById('endEntry').textContent = Math.min(currentPage * pageSize, totalEntries);
                        
                        document.getElementById('firstPageBtn').disabled = currentPage === 1;
                        document.getElementById('prevPageBtn').disabled = currentPage === 1;
                        document.getElementById('nextPageBtn').disabled = !hasMore;
                        document.getElementById('lastPageBtn').disabled = !hasMore;
                        
                        // Update the table
                        tbody.innerHTML = sensorData.map(item => createTableRow(item)).join('');

                        // Update the charts
                        updateSensorChart(sensorData);
                        updateNutrientChart(sensorData);
                    } else {
                        console.log('No sensor data found in response');
                        tbody.innerHTML = `
                            <tr>
                                <td colspan="8" class="text-center">
                                    <div class="alert alert-info">
                                        <i class="fa fa-info-circle"></i> No sensor data available
                            </div>
                                </td>
                            </tr>`;
                    }
                })
                .catch(error => {
                    console.error('Error loading sensor data:', error);
                    tbody.innerHTML = `
                        <tr>
                            <td colspan="8" class="text-center">
                                <div class="alert alert-danger">
                                    <i class="fa fa-exclamation-circle"></i> Error loading sensor data: ${error.message}
                        </div>
                            </td>
                        </tr>`;
                });
        }

        function loadCropData() {
            fetch('/api/crop-data')
                .then(response => response.json())
                .then(data => {
                    if (data && data.crops) {
                        updateRegisteredCropsTable(data.crops);
                    }
                })
                .catch(error => console.error('Error loading crop data:', error));
        }

        function loadPlantedCrops() {
            console.log('Loading planted crops...');
            const tbody = document.querySelector('#plantedCropsTable tbody');
            tbody.innerHTML = '<tr><td colspan="6" class="text-center">Loading planted crops data...</td></tr>';

            fetch('/api/planted-crops')
                .then(response => {
                    console.log('Response status:', response.status);
                    if (!response.ok) {
                        throw new Error(`HTTP error! status: ${response.status}`);
                    }
                    return response.json();
                })
                .then(data => {
                    console.log('Received planted crops data:', data);
                    if (data && data.planted_crops && data.planted_crops.length > 0) {
                        console.log('Number of planted crops:', data.planted_crops.length);
                        updatePlantedCropsTable(data.planted_crops);
                    } else {
                        console.log('No planted crops data found');
                        tbody.innerHTML = `
                            <tr>
                                <td colspan="6" class="text-center">
                                    <div class="alert alert-info">
                                        <i class="fa fa-info-circle"></i> No planted crops data available
                            </div>
                                </td>
                            </tr>`;
                    }
                })
                .catch(error => {
                    console.error('Error loading planted crops:', error);
                    tbody.innerHTML = `
                        <tr>
                            <td colspan="6" class="text-center">
                                <div class="alert alert-danger">
                                    <i class="fa fa-exclamation-circle"></i> Error loading planted crops data: ${error.message}
                                        </div>
                            </td>
                        </tr>`;
                });
        }

        function updateSensorChart(data) {
            console.log('Updating sensor chart with data:', data);
            if (!data || !Array.isArray(data)) {
                console.error('Invalid data provided for sensor chart update');
                return;
            }

            const labels = data.map(d => new Date(d.period_start).toLocaleDateString());
            const temperatureData = data.map(d => d.temperature?.average || 0);
            const humidityData = data.map(d => d.humidity?.average || 0);
            const moistureData = data.map(d => d.moistureAve?.average || 0);
            const lightData = data.map(d => d.light?.average || 0);
            
            window.sensorChart.data.labels = labels;
            window.sensorChart.data.datasets[0].data = temperatureData;
            window.sensorChart.data.datasets[1].data = humidityData;
            window.sensorChart.data.datasets[2].data = moistureData;
            window.sensorChart.data.datasets[3].data = lightData;
            
            window.sensorChart.update();
        }

        function updateNutrientChart(data) {
            if (!data || !Array.isArray(data)) {
                console.error('Invalid data provided for nutrient chart update');
                return;
            }

            const labels = data.map(d => new Date(d.period_start).toLocaleDateString());
            const nitrogenData = data.map(d => d.nitrogen?.average || 0);
            const phosphorusData = data.map(d => d.phosphorus?.average || 0);
            const potassiumData = data.map(d => d.potassium?.average || 0);
            
            window.nutrientChart.data.labels = labels;
            window.nutrientChart.data.datasets[0].data = nitrogenData;
            window.nutrientChart.data.datasets[1].data = phosphorusData;
            window.nutrientChart.data.datasets[2].data = potassiumData;
            
            window.nutrientChart.update();
        }

        function updateNutrientTable(data) {
            const tbody = document.querySelector('#nutrientTable tbody');
            tbody.innerHTML = `
                <tr>
                    <td>${new Date(data.period_start).toLocaleDateString()}</td>
                    <td>
                        ${data.nitrogen.average.toFixed(1)}
                        <small class="text-muted d-block">
                            Min: ${data.nitrogen.min.toFixed(1)} | Max: ${data.nitrogen.max.toFixed(1)}
                        </small>
                    </td>
                    <td>
                        ${data.phosphorus.average.toFixed(1)}
                        <small class="text-muted d-block">
                            Min: ${data.phosphorus.min.toFixed(1)} | Max: ${data.phosphorus.max.toFixed(1)}
                        </small>
                    </td>
                    <td>
                        ${data.potassium.average.toFixed(1)}
                        <small class="text-muted d-block">
                            Min: ${data.potassium.min.toFixed(1)} | Max: ${data.potassium.max.toFixed(1)}
                        </small>
                    </td>
                    <td>
                        <span class="status-indicator ${getNutrientStatusClass(data)}"></span>
                        ${getNutrientStatusText(data)}
                    </td>
                    <td>${getNutrientRecommendations(data)}</td>
                </tr>
            `;
        }

        function updateRegisteredCropsTable(crops) {
            const tbody = document.querySelector('#registeredCropsTable tbody');
            tbody.innerHTML = crops.map(crop => `
                <tr>
                    <td>${crop.name}</td>
                    <td>${crop.optimal_temperature}°C</td>
                    <td>${crop.optimal_humidity}%</td>
                    <td>${crop.optimal_moisture}%</td>
                    <td>${crop.optimal_light} lux</td>
                    <td>${crop.optimal_ph}</td>
                    <td>N:${crop.optimal_n} P:${crop.optimal_p} K:${crop.optimal_k}</td>
                    <td>${crop.priority}</td>
                </tr>
            `).join('');
        }

        function updatePlantedCropsTable(crops) {
            const tbody = document.querySelector('#plantedCropsTable tbody');
            
            if (!crops || crops.length === 0) {
                tbody.innerHTML = '<tr><td colspan="6" class="text-center">No planted crops data available</td></tr>';
                return;
            }
            
            tbody.innerHTML = crops.map(crop => `
                <tr data-crop='${JSON.stringify(crop)}' onclick="showCropDetails(this)">
                    <td>${crop.name || 'Unknown'}</td>
                    <td>${crop.startDate ? new Date(crop.startDate).toLocaleDateString() : 'N/A'}</td>
                    <td>${crop.endDate ? new Date(crop.endDate).toLocaleDateString() : 'Active'}</td>
                    <td><span class="status-badge status-${crop.status.toLowerCase()}">${crop.status}</span></td>
                    <td>${crop.successRate || 0}%</td>
                    <td>${crop.score || 0}%</td>
                </tr>
            `).join('');
        }

        function showCropDetails(row) {
            const crop = JSON.parse(row.getAttribute('data-crop'));
            
            // Update modal content
            document.getElementById('cropBasicInfo').innerHTML = `
                <div class="parameter-grid">
                    <div class="parameter-item">
                        <strong>Crop Name:</strong> ${crop.name}
                    </div>
                    <div class="parameter-item">
                        <strong>Status:</strong> <span class="status-badge status-${crop.status.toLowerCase()}">${crop.status}</span>
                    </div>
                    <div class="parameter-item">
                        <strong>Start Date:</strong> ${new Date(crop.startDate).toLocaleDateString()}
                    </div>
                    <div class="parameter-item">
                        <strong>End Date:</strong> ${crop.endDate ? new Date(crop.endDate).toLocaleDateString() : 'Active'}
                    </div>
                    <div class="parameter-item">
                        <strong>User:</strong> ${crop.userName} (${crop.userEmail})
                    </div>
                    <div class="parameter-item">
                        <strong>Last Updated:</strong> ${crop.lastUpdated ? new Date(crop.lastUpdated._seconds * 1000).toLocaleString() : 'N/A'}
                    </div>
                </div>
            `;

            document.getElementById('cropPerformance').innerHTML = `
                <div class="parameter-grid">
                    <div class="parameter-item">
                        <strong>Success Rate:</strong> ${crop.successRate}%
                    </div>
                    <div class="parameter-item">
                        <strong>Overall Score:</strong> ${crop.score}%
                    </div>
                    <div class="parameter-item">
                        <strong>Rule-Based Score:</strong> ${crop.ruleBasedScore}%
                    </div>
                </div>
            `;

            document.getElementById('cropParameters').innerHTML = `
                <div class="parameter-grid">
                    <div class="parameter-item">
                        <strong>Temperature Match:</strong> ${crop.parameterMatches.temperature.toFixed(1)}%
                    </div>
                    <div class="parameter-item">
                        <strong>Humidity Match:</strong> ${crop.parameterMatches.humidity.toFixed(1)}%
                    </div>
                    <div class="parameter-item">
                        <strong>Moisture Match:</strong> ${crop.parameterMatches.moisture.toFixed(1)}%
                    </div>
                    <div class="parameter-item">
                        <strong>Light Match:</strong> ${crop.parameterMatches.light.toFixed(1)}%
                    </div>
                    <div class="parameter-item">
                        <strong>pH Match:</strong> ${crop.parameterMatches.ph.toFixed(1)}%
                    </div>
                    <div class="parameter-item">
                        <strong>NPK Matches:</strong>
                        <div class="ml-3">
                            N: ${crop.parameterMatches.npk_N.toFixed(1)}%<br>
                            P: ${crop.parameterMatches.npk_P.toFixed(1)}%<br>
                            K: ${crop.parameterMatches.npk_K.toFixed(1)}%
                        </div>
                    </div>
                </div>
            `;

            document.getElementById('cropOptimalConditions').innerHTML = `
                <div class="parameter-grid">
                    <div class="parameter-item">
                        <strong>Temperature:</strong> ${crop.optimalConditions.temperature}°C
                    </div>
                    <div class="parameter-item">
                        <strong>Humidity:</strong> ${crop.optimalConditions.humidity}%
                    </div>
                    <div class="parameter-item">
                        <strong>Moisture:</strong> ${crop.optimalConditions.moisture}%
                    </div>
                    <div class="parameter-item">
                        <strong>Light:</strong> ${crop.optimalConditions.light} lux
                    </div>
                    <div class="parameter-item">
                        <strong>pH Level:</strong> ${crop.optimalConditions.ph}
                    </div>
                    <div class="parameter-item">
                        <strong>NPK Levels:</strong>
                        <div class="ml-3">
                            N: ${crop.optimalConditions.npk_N}<br>
                            P: ${crop.optimalConditions.npk_P}<br>
                            K: ${crop.optimalConditions.npk_K}
                        </div>
                    </div>
                </div>
            `;

            document.getElementById('reportDate').textContent = new Date().toLocaleString();
            
            // Show the modal
            $('#cropDetailsModal').modal('show');
        }

        function printReport() {
            const printContent = document.querySelector('.modal-body').innerHTML;
            const originalContent = document.body.innerHTML;
            
            document.body.innerHTML = `
                <div class="container">
                    ${printContent}
                </div>
            `;
            
            window.print();
            document.body.innerHTML = originalContent;
            
            // Reinitialize any necessary event listeners
            initializeEventListeners();
        }

        function initializeEventListeners() {
            // Reinitialize any event listeners that were lost after printing
            $('#plantedCropsTable tbody tr').on('click', function() {
                showCropDetails(this);
            });
        }

        function getStatusClass(data) {
            const tempStatus = data.temperature.average >= 25 && data.temperature.average <= 30;
            const humidityStatus = data.humidity.average >= 50 && data.humidity.average <= 70;
            const moistureStatus = data.moistureAve.average >= 50 && data.moistureAve.average <= 80;
            
            if (tempStatus && humidityStatus && moistureStatus) return 'status-normal';
            if (!tempStatus || !humidityStatus || !moistureStatus) return 'status-warning';
            return 'status-danger';
        }

        function getStatusText(data) {
            const tempStatus = data.temperature.average >= 25 && data.temperature.average <= 30;
            const humidityStatus = data.humidity.average >= 50 && data.humidity.average <= 70;
            const moistureStatus = data.moistureAve.average >= 50 && data.moistureAve.average <= 80;
            
            if (tempStatus && humidityStatus && moistureStatus) return 'Optimal';
            if (!tempStatus || !humidityStatus || !moistureStatus) return 'Warning';
            return 'Critical';
        }

        function getNutrientStatusClass(data) {
            const nStatus = data.nitrogen.average >= 20 && data.nitrogen.average <= 30;
            const pStatus = data.phosphorus.average >= 10 && data.phosphorus.average <= 20;
            const kStatus = data.potassium.average >= 15 && data.potassium.average <= 25;
            
            if (nStatus && pStatus && kStatus) return 'status-normal';
            if (!nStatus || !pStatus || !kStatus) return 'status-warning';
            return 'status-danger';
        }

        function getNutrientStatusText(data) {
            const nStatus = data.nitrogen.average >= 20 && data.nitrogen.average <= 30;
            const pStatus = data.phosphorus.average >= 10 && data.phosphorus.average <= 20;
            const kStatus = data.potassium.average >= 15 && data.potassium.average <= 25;
            
            if (nStatus && pStatus && kStatus) return 'Balanced';
            if (!nStatus || !pStatus || !kStatus) return 'Imbalanced';
            return 'Deficient';
        }

        function getNutrientRecommendations(data) {
            let recommendations = [];
            
            if (data.nitrogen.average < 20) recommendations.push('Add nitrogen-rich fertilizer');
            if (data.phosphorus.average < 10) recommendations.push('Add phosphorus-rich fertilizer');
            if (data.potassium.average < 15) recommendations.push('Add potassium-rich fertilizer');
            
            return recommendations.join(', ') || 'No adjustments needed';
        }

        function exportToPDF() {
            const doc = new jsPDF();
            
            // Add header
            doc.setFontSize(20);
            doc.text('NetHouseAutomation Report', 105, 20, { align: 'center' });
            doc.setFontSize(12);
            doc.text('Generated on: ' + new Date().toLocaleDateString(), 105, 30, { align: 'center' });
            
            // Add content
            doc.autoTable({ html: '#sensorTable' });
            doc.autoTable({ html: '#registeredCropsTable' });
            doc.autoTable({ html: '#diseaseTable' });
            doc.autoTable({ html: '#nutrientTable' });
            doc.autoTable({ html: '#irrigationTable' });
            
            // Add footer
            doc.setFontSize(10);
            doc.text('© 2025 NetHouseAutomation - All rights reserved', 105, 280, { align: 'center' });
            
            doc.save('nethouse-report.pdf');
        }

        function exportToExcel() {
            const wb = XLSX.utils.book_new();
            
            // Convert tables to worksheets
            const sensorWS = XLSX.utils.table_to_sheet(document.getElementById('sensorTable'));
            const cropWS = XLSX.utils.table_to_sheet(document.getElementById('registeredCropsTable'));
            const diseaseWS = XLSX.utils.table_to_sheet(document.getElementById('diseaseTable'));
            const nutrientWS = XLSX.utils.table_to_sheet(document.getElementById('nutrientTable'));
            const irrigationWS = XLSX.utils.table_to_sheet(document.getElementById('irrigationTable'));
            
            // Add worksheets to workbook
            XLSX.utils.book_append_sheet(wb, sensorWS, 'Sensor Data');
            XLSX.utils.book_append_sheet(wb, cropWS, 'Crop Data');
            XLSX.utils.book_append_sheet(wb, diseaseWS, 'Disease Data');
            XLSX.utils.book_append_sheet(wb, nutrientWS, 'Nutrient Data');
            XLSX.utils.book_append_sheet(wb, irrigationWS, 'Irrigation Data');
            
            // Save workbook
            XLSX.writeFile(wb, 'nethouse-report.xlsx');
        }

        function exportToWord() {
            const doc = new docx.Document({
                sections: [{
                    properties: {},
                    children: [
                        new docx.Paragraph({
                            children: [
                                new docx.TextRun({
                                    text: 'NetHouseAutomation Report',
                                    bold: true,
                                    size: 32
                                })
                            ],
                            alignment: docx.AlignmentType.CENTER
                        }),
                        new docx.Paragraph({
                            children: [
                                new docx.TextRun({
                                    text: 'Generated on: ' + new Date().toLocaleDateString(),
                                    size: 24
                                })
                            ],
                            alignment: docx.AlignmentType.CENTER
                        }),
                        // Add tables and other content here
                    ]
                }]
            });

            docx.Packer.toBlob(doc).then(blob => {
                saveAs(blob, 'nethouse-report.docx');
            });
        }

        function printSensorData() {
            const printWindow = window.open('', '_blank');
            const table = document.getElementById('sensorTable');
            const title = 'NetHouseAutomation - Daily Sensor Summary';
            const date = new Date().toLocaleDateString();
            
            printWindow.document.write(`
                <html>
                    <head>
                        <title>${title}</title>
                        <style>
                            body { font-family: Arial, sans-serif; }
                            table { width: 100%; border-collapse: collapse; margin: 20px 0; }
                            th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }
                            th { background-color: #f5f5f5; }
                            .text-muted { color: #666; font-size: 0.8em; }
                            .header { text-align: center; margin-bottom: 20px; }
                            .footer { text-align: center; margin-top: 20px; font-size: 0.8em; }
                        </style>
                    </head>
                    <body>
                        <div class="header">
                            <h1>${title}</h1>
                            <p>Generated on: ${date}</p>
                        </div>
                        ${table.outerHTML}
                        <div class="footer">
                            <p>© 2025 NetHouseAutomation - All rights reserved</p>
                        </div>
                    </body>
                </html>
            `);
            
            printWindow.document.close();
            printWindow.focus();
            setTimeout(() => {
                printWindow.print();
                printWindow.close();
            }, 250);
        }

        function showDownloadModal(section) {
            currentSection = section;
            const end = new Date();
            const start = new Date();
            start.setDate(start.getDate() - 30);
            
            document.getElementById('startDate').value = start.toISOString().split('T')[0];
            document.getElementById('endDate').value = end.toISOString().split('T')[0];
            document.getElementById('downloadType').value = section;
            
            $('#downloadModal').modal('show');
        }

        function downloadData() {
            const startDate = document.getElementById('startDate').value;
            const endDate = document.getElementById('endDate').value;
            const format = document.getElementById('downloadFormat').value;
            const type = document.getElementById('downloadType').value;
            
            if (!startDate || !endDate) {
                alert('Please select both start and end dates');
                return;
            }
            
            const url = `/api/download-data?startDate=${startDate}&endDate=${endDate}&format=${format}&type=${type}`;
            
            if (format === 'json') {
                fetch(url)
                    .then(response => response.json())
                    .then(data => {
                        const blob = new Blob([JSON.stringify(data, null, 2)], { type: 'application/json' });
                        downloadBlob(blob, `data-${type}-${startDate}-to-${endDate}.json`);
                    })
                    .catch(error => {
                        console.error('Error downloading data:', error);
                        alert('Error downloading data. Please try again.');
                    });
            } else if (format === 'excel') {
                window.location.href = url;
            } else if (format === 'pdf') {
                window.location.href = url;
            } else {
                // CSV
                window.location.href = url;
            }
            
            $('#downloadModal').modal('hide');
        }

        function downloadBlob(blob, filename) {
            const link = document.createElement('a');
            link.href = URL.createObjectURL(blob);
            link.download = filename;
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
        }

        function changePageSize() {
            pageSize = parseInt(document.getElementById('pageSize').value);
            currentPage = 1;
            lastDoc = null;
            loadSensorData();
        }

        function loadFirstPage() {
            if (currentPage > 1) {
                currentPage = 1;
                lastDoc = null;
                loadSensorData();
            }
        }

        function loadLastPage() {
            if (hasMore) {
                // Load all remaining pages
                loadAllPages();
            }
        }

        function loadAllPages() {
            const tbody = document.querySelector('#sensorTable tbody');
            tbody.innerHTML = '<tr><td colspan="8" class="text-center"><div class="spinner-border text-primary" role="status"></div></td></tr>';
            
            let allData = [];
            let currentLastDoc = lastDoc;
            
            function loadNextBatch() {
                let url = '/api/sensor-data';
                if (currentLastDoc) {
                    url += `?lastDoc=${encodeURIComponent(JSON.stringify(currentLastDoc))}`;
                }
                
                fetch(url)
                    .then(response => response.json())
                    .then(data => {
                        if (data.daily_sensor_summaries && data.daily_sensor_summaries.length > 0) {
                            allData = allData.concat(data.daily_sensor_summaries);
                            currentLastDoc = data.lastDoc;
                            
                            if (data.hasMore) {
                                loadNextBatch();
                            } else {
                                updateTableWithAllData(allData);
                            }
                        }
                    })
                    .catch(error => {
                        console.error('Error loading all pages:', error);
                        tbody.innerHTML = `
                            <tr>
                                <td colspan="8" class="text-center">
                                    <div class="alert alert-danger">
                                        <i class="fa fa-exclamation-circle"></i> Error loading data: ${error.message}
                                    </div>
                                </td>
                            </tr>`;
                    });
            }
            
            loadNextBatch();
        }

        function updateTableWithAllData(data) {
            const tbody = document.querySelector('#sensorTable tbody');
            tbody.innerHTML = data.map(item => createTableRow(item)).join('');
            
            // Update pagination info
            totalEntries = data.length;
            currentPage = Math.ceil(totalEntries / pageSize);
            document.getElementById('currentPage').textContent = currentPage;
            document.getElementById('totalPages').textContent = currentPage;
            document.getElementById('totalEntries').textContent = totalEntries;
            document.getElementById('startEntry').textContent = 1;
            document.getElementById('endEntry').textContent = totalEntries;
            
            // Disable pagination controls
            document.getElementById('firstPageBtn').disabled = true;
            document.getElementById('prevPageBtn').disabled = true;
            document.getElementById('nextPageBtn').disabled = true;
            document.getElementById('lastPageBtn').disabled = true;
        }

        function clearSensorSearch() {
            document.getElementById('sensorSearch').value = '';
            loadSensorData();
        }

        function createTableRow(data) {
            return `
                <tr>
                    <td>${new Date(data.period_start).toLocaleDateString()}</td>
                    <td>
                        ${(data.temperature?.average || 0).toFixed(1)}°C
                        <small class="text-muted d-block">
                            Min: ${(data.temperature?.min || 0).toFixed(1)}°C | Max: ${(data.temperature?.max || 0).toFixed(1)}°C
                        </small>
                    </td>
                    <td>
                        ${(data.humidity?.average || 0).toFixed(1)}%
                        <small class="text-muted d-block">
                            Min: ${(data.humidity?.min || 0).toFixed(1)}% | Max: ${(data.humidity?.max || 0).toFixed(1)}%
                        </small>
                    </td>
                    <td>
                        ${(data.moistureAve?.average || 0).toFixed(1)}%
                        <small class="text-muted d-block">
                            Min: ${(data.moistureAve?.min || 0).toFixed(1)}% | Max: ${(data.moistureAve?.max || 0).toFixed(1)}%
                        </small>
                    </td>
                    <td>
                        ${(data.light?.average || 0).toFixed(1)} lux
                        <small class="text-muted d-block">
                            Min: ${(data.light?.min || 0).toFixed(1)} lux | Max: ${(data.light?.max || 0).toFixed(1)} lux
                        </small>
                    </td>
                    <td>
                        ${(data.ph?.average || 0).toFixed(1)}
                        <small class="text-muted d-block">
                            Min: ${(data.ph?.min || 0).toFixed(1)} | Max: ${(data.ph?.max || 0).toFixed(1)}
                        </small>
                    </td>
                    <td>
                        <div>N: ${(data.nitrogen?.average || 0).toFixed(1)}</div>
                        <div>P: ${(data.phosphorus?.average || 0).toFixed(1)}</div>
                        <div>K: ${(data.potassium?.average || 0).toFixed(1)}</div>
                        <small class="text-muted d-block">
                            Min: N${(data.nitrogen?.min || 0).toFixed(1)} P${(data.phosphorus?.min || 0).toFixed(1)} K${(data.potassium?.min || 0).toFixed(1)}<br>
                            Max: N${(data.nitrogen?.max || 0).toFixed(1)} P${(data.phosphorus?.max || 0).toFixed(1)} K${(data.potassium?.max || 0).toFixed(1)}
                        </small>
                    </td>
                    <td>
                        <span class="status-badge ${getStatusClass(data)}">${getStatusText(data)}</span>
                        <small class="text-muted d-block">
                            Data Points: ${data.data_points || 0}
                        </small>
                    </td>
                </tr>
            `;
        }

        function printPlantedCrops() {
            const printWindow = window.open('', '_blank');
            const table = document.getElementById('plantedCropsTable');
            const title = 'NetHouseAutomation - Planted Crops History';
            const date = new Date().toLocaleDateString();
            
            printWindow.document.write(`
                <html>
                    <head>
                        <title>${title}</title>
                        <style>
                            body { font-family: Arial, sans-serif; }
                            table { width: 100%; border-collapse: collapse; margin: 20px 0; }
                            th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }
                            th { background-color: #f5f5f5; }
                            .text-muted { color: #666; font-size: 0.8em; }
                            .header { text-align: center; margin-bottom: 20px; }
                            .footer { text-align: center; margin-top: 20px; font-size: 0.8em; }
                            .status-badge { padding: 5px 10px; border-radius: 15px; font-size: 0.9em; }
                            .status-successful { background-color: #d4edda; color: #155724; }
                            .status-active { background-color: #fff3cd; color: #856404; }
                            .status-failed { background-color: #f8d7da; color: #721c24; }
                        </style>
                    </head>
                    <body>
                        <div class="header">
                            <h1>${title}</h1>
                            <p>Generated on: ${date}</p>
                        </div>
                        ${table.outerHTML}
                        <div class="footer">
                            <p>© 2025 NetHouseAutomation - All rights reserved</p>
                        </div>
                    </body>
                </html>
            `);
            
            printWindow.document.close();
            printWindow.focus();
            setTimeout(() => {
                printWindow.print();
                printWindow.close();
            }, 250);
        }

        function printRegisteredCrops() {
            const printWindow = window.open('', '_blank');
            const table = document.getElementById('registeredCropsTable');
            const title = 'NetHouseAutomation - Registered Crops';
            const date = new Date().toLocaleDateString();
            
            printWindow.document.write(`
                <html>
                    <head>
                        <title>${title}</title>
                        <style>
                            body { font-family: Arial, sans-serif; }
                            table { width: 100%; border-collapse: collapse; margin: 20px 0; }
                            th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }
                            th { background-color: #f5f5f5; }
                            .text-muted { color: #666; font-size: 0.8em; }
                            .header { text-align: center; margin-bottom: 20px; }
                            .footer { text-align: center; margin-top: 20px; font-size: 0.8em; }
                        </style>
                    </head>
                    <body>
                        <div class="header">
                            <h1>${title}</h1>
                            <p>Generated on: ${date}</p>
                        </div>
                        ${table.outerHTML}
                        <div class="footer">
                            <p>© 2025 NetHouseAutomation - All rights reserved</p>
                        </div>
                    </body>
                </html>
            `);
            
            printWindow.document.close();
            printWindow.focus();
            setTimeout(() => {
                printWindow.print();
                printWindow.close();
            }, 250);
        }

        function printDiseaseData() {
            const printWindow = window.open('', '_blank');
            const table = document.getElementById('diseaseTable');
            const title = 'NetHouseAutomation - Disease Monitoring';
            const date = new Date().toLocaleDateString();
            
            printWindow.document.write(`
                <html>
                    <head>
                        <title>${title}</title>
                        <style>
                            body { font-family: Arial, sans-serif; }
                            table { width: 100%; border-collapse: collapse; margin: 20px 0; }
                            th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }
                            th { background-color: #f5f5f5; }
                            .text-muted { color: #666; font-size: 0.8em; }
                            .header { text-align: center; margin-bottom: 20px; }
                            .footer { text-align: center; margin-top: 20px; font-size: 0.8em; }
                        </style>
                    </head>
                    <body>
                        <div class="header">
                            <h1>${title}</h1>
                            <p>Generated on: ${date}</p>
                        </div>
                        ${table.outerHTML}
                        <div class="footer">
                            <p>© 2025 NetHouseAutomation - All rights reserved</p>
                        </div>
                    </body>
                </html>
            `);
            
            printWindow.document.close();
            printWindow.focus();
            setTimeout(() => {
                printWindow.print();
                printWindow.close();
            }, 250);
        }

        function printNutrientData() {
            const printWindow = window.open('', '_blank');
            const table = document.getElementById('nutrientTable');
            const chart = document.getElementById('nutrientChart');
            const title = 'NetHouseAutomation - Nutrient Analysis';
            const date = new Date().toLocaleDateString();
            
            printWindow.document.write(`
                <html>
                    <head>
                        <title>${title}</title>
                        <style>
                            body { font-family: Arial, sans-serif; }
                            table { width: 100%; border-collapse: collapse; margin: 20px 0; }
                            th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }
                            th { background-color: #f5f5f5; }
                            .text-muted { color: #666; font-size: 0.8em; }
                            .header { text-align: center; margin-bottom: 20px; }
                            .footer { text-align: center; margin-top: 20px; font-size: 0.8em; }
                            .chart-container { margin: 20px 0; }
                        </style>
                    </head>
                    <body>
                        <div class="header">
                            <h1>${title}</h1>
                            <p>Generated on: ${date}</p>
                        </div>
                        <div class="chart-container">
                            <img src="${chart.toDataURL()}" style="width: 100%;">
                        </div>
                        ${table.outerHTML}
                        <div class="footer">
                            <p>© 2025 NetHouseAutomation - All rights reserved</p>
                        </div>
                    </body>
                </html>
            `);
            
            printWindow.document.close();
            printWindow.focus();
            setTimeout(() => {
                printWindow.print();
                printWindow.close();
            }, 250);
        }

        function printIrrigationData() {
            const printWindow = window.open('', '_blank');
            const table = document.getElementById('irrigationTable');
            const title = 'NetHouseAutomation - Irrigation Schedule';
            const date = new Date().toLocaleDateString();
            
            printWindow.document.write(`
                <html>
                    <head>
                        <title>${title}</title>
                        <style>
                            body { font-family: Arial, sans-serif; }
                            table { width: 100%; border-collapse: collapse; margin: 20px 0; }
                            th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }
                            th { background-color: #f5f5f5; }
                            .text-muted { color: #666; font-size: 0.8em; }
                            .header { text-align: center; margin-bottom: 20px; }
                            .footer { text-align: center; margin-top: 20px; font-size: 0.8em; }
                        </style>
                    </head>
                    <body>
                        <div class="header">
                            <h1>${title}</h1>
                            <p>Generated on: ${date}</p>
                        </div>
                        ${table.outerHTML}
                        <div class="footer">
                            <p>© 2025 NetHouseAutomation - All rights reserved</p>
                        </div>
                    </body>
                </html>
            `);
            
            printWindow.document.close();
            printWindow.focus();
            setTimeout(() => {
                printWindow.print();
                printWindow.close();
            }, 250);
        }

        // Document Ready Function
        $(document).ready(function() {
            console.log('Document ready, initializing components...');
            
            // Initialize DataTables
            $('#sensorTable, #plantedCropsTable, #registeredCropsTable, #diseaseTable, #nutrientTable, #irrigationTable').DataTable({
                responsive: true,
                dom: 'Bfrtip',
                buttons: ['copy', 'csv', 'excel', 'pdf', 'print']
            });

            // Initialize Charts
            initializeSensorChart();
            initializeNutrientChart();
            
            // Load Data
            loadSensorData();
            loadCropData();
            loadPlantedCrops();
            
            console.log('Initialization complete');
        });
    </script>
</body>
</html>