<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width initial-scale=1.0">
    <title>NetHouseAutomation Reports & Analytics</title>
    <!-- GLOBAL MAINLY STYLES-->
    <link href="./assets/vendors/bootstrap/dist/css/bootstrap.min.css" rel="stylesheet" />
    <link href="./assets/vendors/font-awesome/css/font-awesome.min.css" rel="stylesheet" />
    <link href="./assets/vendors/themify-icons/css/themify-icons.css" rel="stylesheet" />
    <!-- PLUGINS STYLES-->
    <link href="./assets/vendors/datatables/datatables.min.css" rel="stylesheet" />
    <link href="./assets/vendors/jvectormap/jquery-jvectormap-2.0.3.css" rel="stylesheet" />
    <!-- THEME STYLES-->
    <link href="assets/css/main.min.css" rel="stylesheet" />
    <!-- PAGE LEVEL STYLES-->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <link href="./assets/vendors/fullcalendar/dist/fullcalendar.min.css" rel="stylesheet" />
    <link href="./assets/vendors/fullcalendar/dist/fullcalendar.print.min.css" rel="stylesheet" media="print" />
    <style>
        :root {
            --primary-color: #2c3e50;
            --secondary-color: #34495e;
            --accent-color: #3498db;
            --success-color: #2ecc71;
            --warning-color: #f1c40f;
            --danger-color: #e74c3c;
            --light-bg: #f8f9fa;
            --border-radius: 12px;
            --box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            --transition: all 0.3s ease;
        }

        html, body {
            min-height: 100vh;
            background: linear-gradient(135deg, #f8fafc 0%, #eaf0f7 100%);
            font-family: 'Segoe UI', 'Roboto', 'Helvetica Neue', Arial, 'Liberation Sans', sans-serif;
        }

        body {
            background-color: #f5f6fa;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }

        .page-title {
            color: var(--primary-color);
            font-weight: 600;
            margin-bottom: 2rem;
            padding-bottom: 1rem;
            border-bottom: 2px solid var(--accent-color);
        }

        .report-section {
            background: white;
            border-radius: var(--border-radius);
            box-shadow: var(--box-shadow);
            padding: 1.5rem;
            margin-bottom: 2rem;
            transition: var(--transition);
        }

        .report-section:hover {
            transform: translateY(-5px);
            box-shadow: 0 6px 12px rgba(0, 0, 0, 0.15);
        }

        .section-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1.5rem;
            padding-bottom: 1rem;
            border-bottom: 2px solid var(--light-bg);
        }

        .section-header h3 {
            color: var(--primary-color);
            font-weight: 600;
            margin: 0;
        }

        .section-actions {
            display: flex;
            gap: 0.5rem;
        }

        .btn {
            border-radius: 10px !important;
            font-weight: 500;
            padding: 0.55rem 1.3rem;
            font-size: 1rem;
            transition: background 0.18s, color 0.18s, box-shadow 0.18s, border-color 0.18s;
            box-shadow: 0 2px 8px rgba(44,62,80,0.04);
            outline: none !important;
        }

        .btn:focus {
            box-shadow: 0 0 0 3px #e3eefd;
            border-color: #5b9bd5;
        }

        .btn-primary {
            background: #5b9bd5;
            border-color: #5b9bd5;
        }

        .btn-primary:hover, .btn-primary:focus {
            background: #4178b8;
            border-color: #4178b8;
            color: #fff;
        }

        .btn-outline-secondary {
            border-color: #bfc9d1;
            color: #34495e;
            background: #fff;
        }

        .btn-outline-secondary:hover, .btn-outline-secondary:focus {
            background: #f2f6fa;
            color: #4178b8;
            border-color: #4178b8;
        }

        .btn-success {
            background: #4bbf73;
            border-color: #4bbf73;
        }

        .btn-success:hover, .btn-success:focus {
            background: #399e5a;
            border-color: #399e5a;
        }

        .btn-danger {
            background: #e57373;
            border-color: #e57373;
        }

        .btn-danger:hover, .btn-danger:focus {
            background: #c0392b;
            border-color: #c0392b;
        }

        .search-box {
            margin-bottom: 1.5rem;
        }

        .search-box .form-control {
            border-radius: 8px;
            padding: 0.75rem 1rem;
            border: 2px solid var(--light-bg);
            transition: var(--transition);
        }

        .search-box .form-control:focus {
            border-color: var(--accent-color);
            box-shadow: 0 0 0 0.2rem rgba(52, 152, 219, 0.25);
        }

        .chart-container {
            background: white;
            border-radius: var(--border-radius);
            padding: 1rem;
            margin-bottom: 1.5rem;
            box-shadow: var(--box-shadow);
        }

        .table-responsive {
            background: white;
            border-radius: var(--border-radius);
            padding: 1rem;
            box-shadow: var(--box-shadow);
        }

        .table {
            margin-bottom: 0;
        }

        .table thead th {
            background-color: var(--light-bg);
            color: var(--primary-color);
            font-weight: 600;
            border: none;
            padding: 1rem;
        }

        .table tbody td {
            padding: 1rem;
            vertical-align: middle;
            border-bottom: 1px solid var(--light-bg);
        }

        .table tbody tr:hover {
            background-color: rgba(52, 152, 219, 0.05);
        }

        .status-badge {
            padding: 0.5rem 1rem;
            border-radius: 20px;
            font-size: 0.85rem;
            font-weight: 500;
            display: inline-block;
        }

        .status-normal {
            background-color: rgba(46, 204, 113, 0.1);
            color: var(--success-color);
        }

        .status-warning {
            background-color: rgba(241, 196, 15, 0.1);
            color: var(--warning-color);
        }

        .status-danger {
            background-color: rgba(231, 76, 60, 0.1);
            color: var(--danger-color);
        }

        .parameter-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 1rem;
            margin-bottom: 1.5rem;
        }

        .parameter-item {
            background: var(--light-bg);
            border-radius: var(--border-radius);
            padding: 1rem;
            transition: var(--transition);
        }

        .parameter-item:hover {
            transform: translateY(-3px);
            box-shadow: var(--box-shadow);
        }

        .parameter-item h5 {
            color: var(--primary-color);
            font-weight: 600;
            margin-bottom: 0.5rem;
        }

        .pagination-info {
            display: flex;
            align-items: center;
            justify-content: space-between;
            margin-top: 1rem;
            padding: 1rem;
            background: var(--light-bg);
            border-radius: var(--border-radius);
        }

        .page-size-selector {
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .page-size-selector select {
            border-radius: 6px;
            padding: 0.25rem 0.5rem;
            border: 1px solid #ddd;
        }

        .pagination-controls {
            display: flex;
            gap: 0.5rem;
        }

        .pagination-controls .btn {
            padding: 0.25rem 0.5rem;
            border-radius: 6px;
        }

        .export-buttons {
            display: flex;
            gap: 1rem;
            margin-bottom: 2rem;
        }

        .export-buttons .btn {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            padding: 0.75rem 1.5rem;
        }

        .export-buttons .btn i {
            font-size: 1.1rem;
        }

        .modal-content {
            border-radius: var(--border-radius);
            border: none;
            box-shadow: var(--box-shadow);
        }

        .modal-header {
            background-color: var(--light-bg);
            border-radius: var(--border-radius) var(--border-radius) 0 0;
            padding: 1.5rem;
        }

        .modal-body {
            padding: 1.5rem;
        }

        .modal-footer {
            padding: 1.5rem;
            border-top: 1px solid var(--light-bg);
        }

        .form-group label {
            color: var(--primary-color);
            font-weight: 500;
            margin-bottom: 0.5rem;
        }

        .form-control {
            border-radius: 8px;
            padding: 0.75rem 1rem;
            border: 2px solid var(--light-bg);
            transition: var(--transition);
        }

        .form-control:focus {
            border-color: var(--accent-color);
            box-shadow: 0 0 0 0.2rem rgba(52, 152, 219, 0.25);
        }

        @media print {
            .report-section {
                box-shadow: none;
                border: 1px solid #ddd;
            }

            .section-actions,
            .export-buttons {
                display: none;
            }
        }

        /* Custom scrollbar */
        ::-webkit-scrollbar {
            width: 8px;
            height: 8px;
        }

        ::-webkit-scrollbar-track {
            background: var(--light-bg);
        }

        ::-webkit-scrollbar-thumb {
            background: var(--accent-color);
            border-radius: 4px;
        }

        ::-webkit-scrollbar-thumb:hover {
            background: #2980b9;
        }

        .custom-toast {
            display: flex;
            align-items: center;
            justify-content: flex-start;
            padding: 1.1rem 1.7rem 1.1rem 0.7rem;
            margin: 0;
            border-radius: 16px;
            font-weight: 500;
            box-shadow: none;
            width: 100%;
            border-left: 7px solid #5b9bd5;
            background: #f4f7fa;
            color: #2c3e50;
            position: relative;
            gap: 1rem;
        }
        .custom-toast-warning {
            border-left-color: #ffb300;
            background: linear-gradient(90deg, #fffbe6 0%, #ffe082 100%);
            color: #b26a00;
        }
        .custom-toast-danger {
            border-left-color: #e74c3c;
            background: linear-gradient(90deg, #ffeaea 0%, #ffb3b3 100%);
            color: #a94442;
        }
        .custom-toast-success {
            border-left-color: #27ae60;
            background: linear-gradient(90deg, #eaffea 0%, #b3ffb3 100%);
            color: #207d2a;
        }
        .custom-toast .toast-icon {
            font-size: 1.5rem;
            margin-right: 0.7rem;
            opacity: 0.85;
        }
        .custom-toast .close {
            background: none;
            border: none;
            font-size: 1.7rem;
            color: inherit;
            opacity: 0.7;
            margin-left: auto;
            cursor: pointer;
            transition: opacity 0.2s, color 0.2s;
            padding: 0 0.5rem;
            border-radius: 50%;
            line-height: 1;
        }
        .custom-toast .close:hover {
            opacity: 1;
            color: #e74c3c;
            background: #fff0f0;
        }
        .custom-input {
            border-radius: 10px;
            border: 1.5px solid #cfd8dc;
            padding: 0.7rem 1rem;
            font-size: 1rem;
            transition: border-color 0.2s, box-shadow 0.2s;
            background: #f9fafb;
            box-shadow: 0 1px 2px rgba(44,62,80,0.03);
        }
        .custom-input:focus {
            border-color: #5b9bd5;
            background: #fff;
            box-shadow: 0 0 0 3px #e3eefd;
        }
        .custom-table {
            border-radius: 14px;
            overflow: hidden;
            border-collapse: separate;
            border-spacing: 0;
            background: #fff;
            box-shadow: 0 2px 12px rgba(44,62,80,0.06);
        }
        .custom-table thead th {
            background: #f4f7fa;
            color: #2c3e50;
            font-weight: 600;
            border-bottom: 2px solid #d1d5db;
            padding: 1rem 0.75rem;
            text-align: center;
            position: sticky;
            top: 0;
            z-index: 2;
        }
        .custom-table tbody td {
            padding: 0.85rem 0.75rem;
            border-bottom: 1px solid #f2f6fa;
            vertical-align: middle;
            text-align: center;
            background: #fff;
            transition: background 0.18s;
        }
        .custom-table tbody tr:nth-child(even) td {
            background: #f7fafd;
        }
        .custom-table tbody tr:hover td {
            background: #e3eefd;
        }
        .card.shadow-sm, .card.shadow-lg {
            border-radius: 16px;
            box-shadow: 0 4px 24px rgba(44,62,80,0.10), 0 1.5px 4px rgba(44,62,80,0.04);
            border: 1.5px solid #e3eefd;
        }
        .card-header {
            border-radius: 16px 16px 0 0 !important;
            font-size: 1.15rem;
            letter-spacing: 0.01em;
        }
        .page-title {
            font-family: 'Segoe UI Semibold', 'Segoe UI', Arial, sans-serif;
            font-size: 2.1rem;
            color: #2c3e50;
            font-weight: 700;
            margin-bottom: 2rem;
            padding-bottom: 1rem;
            border-bottom: 2px solid #5b9bd5;
            letter-spacing: 0.01em;
        }
        /* Enhanced Toast/Flash */
        #exportToast {
            position: fixed;
            left: 50%;
            top: 80px;
            transform: translateX(-50%);
            z-index: 9999;
            min-width: 340px;
            max-width: 95vw;
            box-shadow: 0 8px 32px rgba(44,62,80,0.18);
            border-radius: 16px;
            font-size: 1.13rem;
            padding: 0;
            overflow: hidden;
            display: none;
            transition: opacity 0.5s, top 0.5s;
            opacity: 0;
        }
        #exportToast.show {
            display: block;
            opacity: 1;
            top: 100px;
            animation: slideDownFade 0.5s cubic-bezier(.4,2,.6,1) 1;
        }
        @keyframes slideDownFade {
            from { opacity: 0; top: 60px; }
            to { opacity: 1; top: 100px; }
        }
        .info-message {
            display: flex;
            align-items: center;
            gap: 0.7rem;
            background: #e3eefd;
            color: #4178b8;
            border-radius: 10px;
            padding: 0.7rem 1.2rem;
            margin-bottom: 1.2rem;
            font-size: 1.08rem;
            box-shadow: 0 1px 4px rgba(44,62,80,0.04);
        }
        .info-message .fa-info-circle {
            font-size: 1.3rem;
            opacity: 0.85;
        }
        @media (max-width: 768px) {
            .custom-table thead th, .custom-table tbody td {
                padding: 0.5rem 0.3rem;
                font-size: 0.95rem;
            }
            .custom-input {
                font-size: 0.95rem;
                padding: 0.5rem 0.7rem;
            }
            .btn {
                font-size: 0.95rem;
                padding: 0.45rem 1rem;
            }
            .info-message {
                font-size: 0.97rem;
                padding: 0.5rem 0.7rem;
            }
        }

        .filter-download-card {
            transition: box-shadow 0.22s, border-color 0.22s;
            border: 1.5px solid #e3eefd;
            background: #fafdff;
            border-radius: 18px;
            box-shadow: 0 4px 24px rgba(44,62,80,0.10), 0 1.5px 4px rgba(44,62,80,0.04);
        }
        .filter-download-card:hover {
            box-shadow: 0 8px 32px rgba(44,62,80,0.13), 0 2px 8px rgba(44,62,80,0.06);
            border-color: #b3c6e2;
        }
        .filter-download-form {
            gap: 1.5rem 1rem;
        }
        .filter-fields .form-group {
            margin-bottom: 0 !important;
        }
        .action-buttons .btn {
            min-width: 110px;
            font-size: 1.04rem;
            padding: 0.55rem 1.1rem;
            box-shadow: 0 1px 4px rgba(44,62,80,0.04);
            transition: background 0.18s, color 0.18s, box-shadow 0.18s, border-color 0.18s;
        }
        .action-buttons .btn span {
            display: inline-block;
        }
        .action-buttons .btn-success {
            background: #4bbf73;
            border-color: #4bbf73;
        }
        .action-buttons .btn-success:hover, .action-buttons .btn-success:focus {
            background: #399e5a;
            border-color: #399e5a;
        }
        .action-buttons .btn-danger {
            background: #e57373;
            border-color: #e57373;
        }
        .action-buttons .btn-danger:hover, .action-buttons .btn-danger:focus {
            background: #c0392b;
            border-color: #c0392b;
        }
        @media (max-width: 900px) {
            .filter-download-form {
                flex-direction: column;
                align-items: stretch;
                gap: 1.2rem 0;
            }
            .action-buttons {
                justify-content: flex-start !important;
                min-width: 0;
                margin-top: 0.5rem;
            }
        }

        .filter-download-card-pro {
            background: rgba(255,255,255,0.85);
            border-radius: 28px;
            box-shadow: 0 8px 36px rgba(44,62,80,0.13), 0 2px 8px rgba(44,62,80,0.06);
            overflow: hidden;
            position: relative;
            border: 1.5px solid #e3eefd;
            transition: box-shadow 0.22s, border-color 0.22s, background 0.22s;
            backdrop-filter: blur(2.5px);
        }
        .filter-download-card-pro:hover {
            box-shadow: 0 16px 48px rgba(44,62,80,0.18), 0 4px 16px rgba(44,62,80,0.10);
            border-color: #b3c6e2;
            background: rgba(255,255,255,0.97);
        }
        .filter-download-grid {
            display: flex;
            flex-direction: row;
            width: 100%;
            min-height: 180px;
            position: relative;
        }
        .accent-bar {
            width: 8px;
            background: linear-gradient(180deg, #5b9bd5 0%, #b3c6e2 100%);
            border-radius: 0 12px 12px 0;
            margin-right: 0.5rem;
            min-height: 100%;
        }
        .divider {
            width: 1.5px;
            background: linear-gradient(180deg, #e3eefd 0%, #b3c6e2 100%);
            margin: 0 0.5rem;
            border-radius: 2px;
            min-height: 100%;
            align-self: stretch;
        }
        .section-label {
            font-size: 1.08rem;
            color: #7a8ca3;
            font-weight: 600;
            letter-spacing: 0.01em;
            display: flex;
            align-items: center;
            gap: 0.4rem;
            margin-bottom: 0.7rem;
            text-transform: uppercase;
        }
        .custom-input-lg {
            border-radius: 12px;
            border: 1.5px solid #cfd8dc;
            padding: 0.9rem 1.1rem;
            font-size: 1.08rem;
            transition: border-color 0.2s, box-shadow 0.2s;
            background: #f9fafb;
            box-shadow: 0 1px 2px rgba(44,62,80,0.03);
        }
        .custom-input-lg:focus {
            border-color: #5b9bd5;
            background: #fff;
            box-shadow: 0 0 0 3px #e3eefd;
        }
        .btn-primary-pro {
            background: #5b9bd5;
            border-color: #5b9bd5;
            color: #fff;
            font-size: 1.08rem;
            border-radius: 12px;
            font-weight: 600;
            box-shadow: 0 2px 8px rgba(44,62,80,0.04);
            transition: box-shadow 0.18s, transform 0.13s, background 0.18s, border-color 0.18s;
        }
        .btn-primary-pro:hover, .btn-primary-pro:focus {
            background: #4178b8;
            border-color: #4178b8;
            color: #fff;
            box-shadow: 0 4px 16px rgba(44,62,80,0.10);
            transform: translateY(-2px) scale(1.04);
        }
        .btn-outline-secondary-pro {
            border-color: #bfc9d1;
            color: #34495e;
            background: #fff;
            font-size: 1.08rem;
            border-radius: 12px;
            font-weight: 600;
            box-shadow: 0 2px 8px rgba(44,62,80,0.04);
            transition: box-shadow 0.18s, transform 0.13s, background 0.18s, border-color 0.18s;
        }
        .btn-outline-secondary-pro:hover, .btn-outline-secondary-pro:focus {
            background: #f2f6fa;
            color: #4178b8;
            border-color: #4178b8;
            box-shadow: 0 4px 16px rgba(44,62,80,0.10);
            transform: translateY(-2px) scale(1.04);
        }
        .btn-success-pro {
            background: #4bbf73;
            border-color: #4bbf73;
            color: #fff;
            font-size: 1.08rem;
            border-radius: 12px;
            font-weight: 600;
            box-shadow: 0 2px 8px rgba(44,62,80,0.04);
            transition: box-shadow 0.18s, transform 0.13s, background 0.18s, border-color 0.18s;
        }
        .btn-success-pro:hover, .btn-success-pro:focus {
            background: #399e5a;
            border-color: #399e5a;
            color: #fff;
            box-shadow: 0 4px 16px rgba(44,62,80,0.10);
            transform: translateY(-2px) scale(1.04);
        }
        .btn-danger-pro {
            background: #e57373;
            border-color: #e57373;
            color: #fff;
            font-size: 1.08rem;
            border-radius: 12px;
            font-weight: 600;
            box-shadow: 0 2px 8px rgba(44,62,80,0.04);
            transition: box-shadow 0.18s, transform 0.13s, background 0.18s, border-color 0.18s;
        }
        .btn-danger-pro:hover, .btn-danger-pro:focus {
            background: #c0392b;
            border-color: #c0392b;
            color: #fff;
            box-shadow: 0 4px 16px rgba(44,62,80,0.10);
            transform: translateY(-2px) scale(1.04);
        }
        @media (max-width: 900px) {
            .filter-download-grid {
                flex-direction: column;
            }
            .divider, .accent-bar {
                display: none !important;
            }
            .filter-section, .export-section {
                padding: 1.2rem 1.1rem 1.1rem 1.1rem !important;
            }
            .export-section {
                min-width: 0 !important;
                width: 100%;
                align-items: stretch !important;
            }
            .btn-success-pro, .btn-danger-pro {
                margin-bottom: 0.7rem !important;
            }
        }
        .main-content-premium {
            max-width: 1200px;
            margin: 0 auto;
            padding: 2.5rem 1.5rem 3rem 1.5rem;
            animation: fadeInMain 0.7s cubic-bezier(.4,2,.6,1);
            display: flex;
            flex-direction: column;
            align-items: center;
            gap: 2.2rem;
        }
        .main-card {
            max-width: 1000px;
            width: 100%;
            margin: 0 auto 2.2rem auto;
            border-radius: 24px;
            box-shadow: 0 8px 36px rgba(44,62,80,0.13), 0 2px 8px rgba(44,62,80,0.06);
            background: rgba(255,255,255,0.96);
            border: 1.5px solid #e3eefd;
            overflow: hidden;
            transition: box-shadow 0.18s, border-color 0.18s, background 0.18s;
            backdrop-filter: blur(1.5px);
        }
        .main-card:hover {
            box-shadow: 0 16px 48px rgba(44,62,80,0.18), 0 4px 16px rgba(44,62,80,0.10);
            border-color: #b3c6e2;
            background: rgba(255,255,255,0.99);
        }
        @media (max-width: 1100px) {
            .main-content-premium {
                max-width: 100%;
                padding: 1.2rem 0.2rem 2rem 0.2rem;
            }
            .main-card {
                max-width: 100%;
            }
        }
    </style>
</head>

<body class="fixed-navbar">
    <div class="page-wrapper">
        <!-- START HEADER-->
        <header class="header">
            <div class="page-brand">
                <a class="link" href="/dashboard">
                    <span class="brand">Demo
                        <span class="brand-tip">FARM</span>
                    </span>
                    <span class="brand-mini">DF</span>
                </a>
            </div>
            <div class="flexbox flex-1">
                <!-- START TOP-LEFT TOOLBAR-->
                <ul class="nav navbar-toolbar">
                    <li>
                        <a class="nav-link sidebar-toggler js-sidebar-toggler"><i class="ti-menu"></i></a>
                    </li>
                </ul>
                <!-- END TOP-LEFT TOOLBAR-->
                <!-- START TOP-RIGHT TOOLBAR-->
                <ul class="nav navbar-toolbar">
                    <li>
                        <a class="nav-link" href="#" id="pendingUsersBtn">
                            <i class="fa fa-user-clock"></i>
                            <span class="badge badge-danger" id="pendingUsersCount" style="display: none;">0</span>
                        </a>
                    </li>
                    <li class="dropdown dropdown-user">
                        <a class="nav-link dropdown-toggle link" data-toggle="dropdown">
                            <img src="<%= user.profilePicture %>" />
                            <span></span><%= user.name %><i class="fa fa-angle-down m-l-5"></i></a>
                        <ul class="dropdown-menu dropdown-menu-right">
                            <a class="dropdown-item" href="/profile"><i class="fa fa-user"></i>Profile</a>
                            <li class="dropdown-divider"></li>
                            <a class="dropdown-item" href="/logout"><i class="fa fa-power-off"></i>Logout</a>
                        </ul>
                    </li>
                </ul>
                <!-- END TOP-RIGHT TOOLBAR-->
            </div>
        </header>
        <!-- END HEADER-->
        <!-- START SIDEBAR-->
        <nav class="page-sidebar" id="sidebar">
            <div id="sidebar-collapse">
                <div class="admin-block d-flex">
                    <div>
                        <img src="<%= user.profilePicture %>" width="45px" />
                    </div>
                    <div class="admin-info">
                        <div class="font-strong"><%= user.name %></div><small><%= user.role %></small></div>
                </div>
                <ul class="side-menu metismenu">
                    <li>
                        <a href="/dashboard"><i class="sidebar-item-icon fas fa-tachometer-alt"></i>
                            <span class="nav-label">Dashboard</span>
                        </a>
                    </li>
                    <li>
                        <a href="/plant-overview"><i class="sidebar-item-icon fas fa-leaf"></i>
                            <span class="nav-label">Plant Overview</span>
                        </a>
                    </li>
                    <li>
                        <a href="/irrigation-controll"><i class="sidebar-item-icon fas fa-faucet"></i>
                            <span class="nav-label">Irrigation Control</span>
                        </a>
                    </li>
                    <li>
                        <a href="#" class="dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                            <i class="sidebar-item-icon fas fa-chart-bar"></i>
                            <span class="nav-label">Reports & Analytics</span>
                            <i class="fa fa-caret-down ml-1"></i>
                        </a>
                        <ul class="dropdown-menu" style="background: #fff; border-radius: 8px; box-shadow: 0 2px 8px rgba(0,0,0,0.08);">
                            <li><a class="dropdown-item" href="/report-crops">Crops Report</a></li>
                            <li><a class="dropdown-item" href="/report-daily-sensors">Daily Sensors Data</a></li>
                            <li><a class="dropdown-item" href="/report-irrigation">Irrigation Records</a></li>
                            <li><a class="dropdown-item" href="/report-planted-crops">Planted Crops</a></li>
                            <li><a class="dropdown-item" href="/report-prediction-history">Prediction History</a></li>
                            <li><a class="dropdown-item" href="/report-ai-fertilizer">AI Fertilizer</a></li>
                            <li><a class="dropdown-item" href="/report-ai-disease">AI Disease</a></li>
                        </ul>
                    </li>
                    <li>
                        <a href="/user-management"><i class="sidebar-item-icon fas fa-users-cog"></i>
                            <span class="nav-label">User Management</span>
                        </a>
                    </li>
                    <li>
                        <a class="active" href="/crop-recommendations"><i class="sidebar-item-icon fas fa-seedling"></i>
                            <span class="nav-label">Crop Recommendations</span>
                        </a>
                    </li>
                </ul>
            </div>
        </nav>
        <div class="content-wrapper">
            <div class="page-content fade-in-up">
                <div class="row">
                    <div class="col-12">
                        <h1 class="page-title">AI Disease & Fertilizer Advice Report</h1>
                        <!-- Filter & Download Card -->
                        <div class="main-card filter-download-card-pro card mb-4 p-0 border-0">
                            <div class="filter-download-grid d-flex flex-wrap flex-md-nowrap align-items-stretch position-relative">
                                <div class="accent-bar d-none d-md-block"></div>
                                <div class="filter-section flex-grow-1 p-4 pb-3 pe-md-4">
                                    <div class="section-label mb-3"><i class="fa fa-filter me-2"></i> <span>Filter</span></div>
                                    <form class="row g-3 align-items-end" method="get" action="" autocomplete="off">
                                        <div class="col-md-4 col-12">
                                            <label for="filterCropName" class="form-label mb-1">Crop Name</label>
                                            <select class="form-control custom-input-lg" id="filterCropName" name="cropName">
                                                <option value="">All Crops</option>
                                                <% if (cropNames && cropNames.length > 0) { %>
                                                    <% cropNames.forEach(function(name) { %>
                                                        <option value="<%= name %>" <%= filter && filter.cropName === name ? 'selected' : '' %>><%= name %></option>
                                                    <% }); %>
                                                <% } %>
                                            </select>
                                        </div>
                                        <div class="col-md-4 col-6">
                                            <label for="filterDateFrom" class="form-label mb-1">Date From</label>
                                            <input type="date" class="form-control custom-input-lg" id="filterDateFrom" name="dateFrom" value="<%= typeof filter !== 'undefined' && filter.dateFrom ? filter.dateFrom : '' %>">
                                        </div>
                                        <div class="col-md-4 col-6">
                                            <label for="filterDateTo" class="form-label mb-1">Date To</label>
                                            <input type="date" class="form-control custom-input-lg" id="filterDateTo" name="dateTo" value="<%= typeof filter !== 'undefined' && filter.dateTo ? filter.dateTo : '' %>">
                                        </div>
                                        <div class="col-12 mt-2 d-flex gap-2 flex-wrap">
                                            <button type="submit" class="btn btn-primary-pro d-flex align-items-center gap-2"><i class="fa fa-search"></i> <span>Filter</span></button>
                                            <a href="/report-ai-disease" class="btn btn-outline-secondary-pro d-flex align-items-center gap-2"><i class="fa fa-undo"></i> <span>Reset</span></a>
                                        </div>
                                    </form>
                                </div>
                                <div class="divider d-none d-md-block"></div>
                                <div class="export-section p-4 pb-3 ps-md-4 d-flex flex-column align-items-center justify-content-center" style="min-width: 220px;">
                                    <div class="section-label mb-3"><i class="fa fa-download me-2"></i> <span>Export</span></div>
                                    <button type="button" class="btn btn-success-pro mb-2 w-100 d-flex align-items-center justify-content-center gap-2" id="exportExcelBtn"><i class="fa fa-file-excel"></i> <span>Excel</span></button>
                                    <button type="button" class="btn btn-danger-pro w-100 d-flex align-items-center justify-content-center gap-2" id="exportPdfBtn"><i class="fa fa-file-pdf"></i> <span>PDF</span></button>
                                </div>
                            </div>
                            <!-- Toast for messages -->
                            <div id="exportToast"></div>
                        </div>
                        <!-- AI Disease Advice Table -->
                        <div class="main-card premium-table-card mb-5">
                            <div class="card-header bg-primary text-white d-flex align-items-center" style="border-top-left-radius: 0.5rem; border-top-right-radius: 0.5rem;">
                                <i class="fa fa-virus fa-lg me-2"></i>
                                <h3 class="mb-0 flex-grow-1">AI Disease Advice</h3>
                                <span class="badge bg-light text-primary ms-2">Total: <%= diseasePagination.totalRecords %></span>
                            </div>
                            <div class="card-body p-0">
                                <div class="table-responsive">
                                    <table class="table table-hover table-striped align-middle mb-0 custom-table" id="diseaseAdviceTable">
                                        <thead class="table-primary">
                                            <tr>
                                                <th style="min-width:120px;"><i class="fa fa-leaf"></i> Crop Name</th>
                                                <th style="min-width:120px;"><i class="fa fa-seedling"></i> Growth Stage</th>
                                                <th style="min-width:160px;"><i class="fa fa-clock"></i> Timestamp</th>
                                                <th><i class="fa fa-bug"></i> Disease</th>
                                                <th><i class="fa fa-shield-virus"></i> Prevention</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            <% if (aiDiseaseAdvice && aiDiseaseAdvice.length > 0) { %>
                                                <% aiDiseaseAdvice.forEach(function(advice) { %>
                                                    <% var arr = advice.diseases && advice.diseases.length > 0 ? advice.diseases : [{disease:'No disease advice', prevention:'-'}]; %>
                                                    <% arr.forEach(function(disease, idx) { %>
                                                        <tr>
                                                            <% if (idx === 0) { %>
                                                                <td rowspan="<%= arr.length %>" class="align-middle bg-light border-start border-3 border-primary"><%= advice.cropName %></td>
                                                                <td rowspan="<%= arr.length %>" class="align-middle bg-light"><%= advice.growthStage %></td>
                                                                <td rowspan="<%= arr.length %>" class="align-middle bg-light"><%= advice.timestamp %></td>
                                                            <% } %>
                                                            <td><span class="badge bg-danger bg-opacity-75"><%= disease.disease %></span></td>
                                                            <td><%= disease.prevention %></td>
                                        </tr>
                                                    <% }); %>
                                                <% }); %>
                                            <% } else { %>
                                                <tr><td colspan="5" class="text-center">No AI disease advice data available.</td></tr>
                                            <% } %>
                                    </tbody>
                                </table>
                        </div>
                                <!-- Pagination Controls for Disease Advice -->
                                <nav aria-label="Disease Advice Pagination" class="mt-3">
                                    <ul class="pagination justify-content-center pagination-lg">
                                        <li class="page-item <%= diseasePagination.currentPage === 1 ? 'disabled' : '' %>">
                                            <a class="page-link" href="?<%= Object.entries(filter).map(([k,v]) => v ? `${k}=${encodeURIComponent(v)}` : '').filter(Boolean).join('&') %>&diseasePage=1&fertilizerPage=<%= fertilizerPagination.currentPage %>" tabindex="-1">First</a>
                                        </li>
                                        <li class="page-item <%= diseasePagination.currentPage === 1 ? 'disabled' : '' %>">
                                            <a class="page-link" href="?<%= Object.entries(filter).map(([k,v]) => v ? `${k}=${encodeURIComponent(v)}` : '').filter(Boolean).join('&') %>&diseasePage=<%= diseasePagination.currentPage - 1 %>&fertilizerPage=<%= fertilizerPagination.currentPage %>">Previous</a>
                                        </li>
                                        <li class="page-item disabled"><span class="page-link">Page <%= diseasePagination.currentPage %> of <%= diseasePagination.totalPages %></span></li>
                                        <li class="page-item <%= diseasePagination.currentPage === diseasePagination.totalPages ? 'disabled' : '' %>">
                                            <a class="page-link" href="?<%= Object.entries(filter).map(([k,v]) => v ? `${k}=${encodeURIComponent(v)}` : '').filter(Boolean).join('&') %>&diseasePage=<%= diseasePagination.currentPage + 1 %>&fertilizerPage=<%= fertilizerPagination.currentPage %>">Next</a>
                                        </li>
                                        <li class="page-item <%= diseasePagination.currentPage === diseasePagination.totalPages ? 'disabled' : '' %>">
                                            <a class="page-link" href="?<%= Object.entries(filter).map(([k,v]) => v ? `${k}=${encodeURIComponent(v)}` : '').filter(Boolean).join('&') %>&diseasePage=<%= diseasePagination.totalPages %>&fertilizerPage=<%= fertilizerPagination.currentPage %>">Last</a>
                                        </li>
                                    </ul>
                                    <div class="text-center text-muted mb-2">Showing <%= (diseasePagination.currentPage - 1) * 10 + 1 %> to <%= Math.min(diseasePagination.currentPage * 10, diseasePagination.totalRecords) %> of <%= diseasePagination.totalRecords %> entries</div>
                                </nav>
                    </div>
                </div>
                        <!-- AI Fertilizer Advice Table -->
                        <div class="main-card premium-table-card mb-5">
                            <div class="card-header bg-success text-white d-flex align-items-center" style="border-top-left-radius: 0.5rem; border-top-right-radius: 0.5rem;">
                                <i class="fa fa-flask-vial fa-lg me-2"></i>
                                <h3 class="mb-0 flex-grow-1">AI Fertilizer Advice</h3>
                                <span class="badge bg-light text-success ms-2">Total: <%= fertilizerPagination.totalRecords %></span>
                                </div>
                            <div class="card-body p-0">
                            <div class="table-responsive">
                                    <table class="table table-hover table-striped align-middle mb-0 custom-table" id="fertilizerAdviceTable">
                                        <thead class="table-success">
                                            <tr>
                                                <th style="min-width:120px;"><i class="fa fa-leaf"></i> Crop Name</th>
                                                <th style="min-width:120px;"><i class="fa fa-seedling"></i> Growth Stage</th>
                                                <th style="min-width:160px;"><i class="fa fa-clock"></i> Timestamp</th>
                                                <th><i class="fa fa-flask"></i> Fertilizer Name</th>
                                                <th><i class="fa fa-vial"></i> Application</th>
                                                <th><i class="fa fa-bolt"></i> Effect</th>
                                                <th><i class="fa fa-info-circle"></i> Reason</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                            <% if (aiFertilizerAdvice && aiFertilizerAdvice.length > 0) { %>
                                                <% aiFertilizerAdvice.forEach(function(advice) { %>
                                                    <% var arr = advice.fertilizers && advice.fertilizers.length > 0 ? advice.fertilizers : [{name:'No fertilizer advice', application:'-', effect:'-', reason:'-'}]; %>
                                                    <% arr.forEach(function(fertilizer, idx) { %>
                                                        <tr>
                                                            <% if (idx === 0) { %>
                                                                <td rowspan="<%= arr.length %>" class="align-middle bg-light border-start border-3 border-success"><%= advice.cropName %></td>
                                                                <td rowspan="<%= arr.length %>" class="align-middle bg-light"><%= advice.growthStage %></td>
                                                                <td rowspan="<%= arr.length %>" class="align-middle bg-light"><%= advice.timestamp %></td>
                                                            <% } %>
                                                            <td><span class="badge bg-success bg-opacity-75"><%= fertilizer.name %></span></td>
                                                            <td><%= fertilizer.application %></td>
                                                            <td><%= fertilizer.effect %></td>
                                                            <td><%= fertilizer.reason %></td>
                                        </tr>
                                                    <% }); %>
                                                <% }); %>
                                            <% } else { %>
                                                <tr><td colspan="7" class="text-center">No AI fertilizer advice data available.</td></tr>
                                            <% } %>
                                    </tbody>
                                </table>
                            </div>
                                <!-- Pagination Controls for Fertilizer Advice -->
                                <nav aria-label="Fertilizer Advice Pagination" class="mt-3">
                                    <ul class="pagination justify-content-center pagination-lg">
                                        <li class="page-item <%= fertilizerPagination.currentPage === 1 ? 'disabled' : '' %>">
                                            <a class="page-link" href="?<%= Object.entries(filter).map(([k,v]) => v ? `${k}=${encodeURIComponent(v)}` : '').filter(Boolean).join('&') %>&diseasePage=<%= diseasePagination.currentPage %>&fertilizerPage=1">First</a>
                                        </li>
                                        <li class="page-item <%= fertilizerPagination.currentPage === 1 ? 'disabled' : '' %>">
                                            <a class="page-link" href="?<%= Object.entries(filter).map(([k,v]) => v ? `${k}=${encodeURIComponent(v)}` : '').filter(Boolean).join('&') %>&diseasePage=<%= diseasePagination.currentPage %>&fertilizerPage=<%= fertilizerPagination.currentPage - 1 %>">Previous</a>
                                        </li>
                                        <li class="page-item disabled"><span class="page-link">Page <%= fertilizerPagination.currentPage %> of <%= fertilizerPagination.totalPages %></span></li>
                                        <li class="page-item <%= fertilizerPagination.currentPage === fertilizerPagination.totalPages ? 'disabled' : '' %>">
                                            <a class="page-link" href="?<%= Object.entries(filter).map(([k,v]) => v ? `${k}=${encodeURIComponent(v)}` : '').filter(Boolean).join('&') %>&diseasePage=<%= diseasePagination.currentPage %>&fertilizerPage=<%= fertilizerPagination.currentPage + 1 %>">Next</a>
                                        </li>
                                        <li class="page-item <%= fertilizerPagination.currentPage === fertilizerPagination.totalPages ? 'disabled' : '' %>">
                                            <a class="page-link" href="?<%= Object.entries(filter).map(([k,v]) => v ? `${k}=${encodeURIComponent(v)}` : '').filter(Boolean).join('&') %>&diseasePage=<%= diseasePagination.currentPage %>&fertilizerPage=<%= fertilizerPagination.totalPages %>">Last</a>
                                        </li>
                                    </ul>
                                    <div class="text-center text-muted mb-2">Showing <%= (fertilizerPagination.currentPage - 1) * 10 + 1 %> to <%= Math.min(fertilizerPagination.currentPage * 10, fertilizerPagination.totalRecords) %> of <%= fertilizerPagination.totalRecords %> entries</div>
                                </nav>
                        </div>
                                </div>
                            </div>
                </div>
            </div>
            <footer class="page-footer">
                <div class="font-13">2025 © <b>NetHouseAutomation</b> - All rights reserved.</div>
                <div class="to-top"><i class="fa fa-angle-double-up"></i></div>
            </footer>
        </div>
    </div>

    <!-- Add this modal HTML just before the closing body tag -->
    <div class="modal fade" id="cropDetailsModal" tabindex="-1" role="dialog" aria-labelledby="cropDetailsModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="cropDetailsModalLabel">Crop Details Report</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <div class="report-header text-center mb-4">
                        <h4>NetHouseAutomation</h4>
                        <p>Crop Performance Report</p>
                    </div>
                    <div class="report-content">
                        <div class="report-section">
                            <h5>Basic Information</h5>
                            <div id="cropBasicInfo"></div>
                        </div>
                        <div class="report-section">
                            <h5>Performance Metrics</h5>
                            <div id="cropPerformance"></div>
                        </div>
                        <div class="report-section">
                            <h5>Parameter Analysis</h5>
                            <div id="cropParameters"></div>
                        </div>
                        <div class="report-section">
                            <h5>Optimal Conditions</h5>
                            <div id="cropOptimalConditions"></div>
                        </div>
                    </div>
                    <div class="report-footer text-center mt-4">
                        <p>Generated on: <span id="reportDate"></span></p>
                        <p>© 2025 NetHouseAutomation - All rights reserved</p>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                    <button type="button" class="btn btn-primary" onclick="printReport()">Print Report</button>
                </div>
            </div>
        </div>
    </div>
<!-- Pending Users Modal -->
<div class="modal fade" id="pendingUsersModal" tabindex="-1" role="dialog" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Pending Users</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div id="pendingUsersList">
                    <!-- Pending users will be loaded here -->
                </div>
            </div>
        </div>
    </div>
</div>
    <!-- Download Modal -->
    <div class="modal fade" id="downloadModal" tabindex="-1" role="dialog" aria-labelledby="downloadModalLabel" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="downloadModalLabel">Download Data</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <form id="downloadForm">
                        <div class="form-group">
                            <label for="startDate">Start Date</label>
                            <input type="date" class="form-control" id="startDate" required>
                        </div>
                        <div class="form-group">
                            <label for="endDate">End Date</label>
                            <input type="date" class="form-control" id="endDate" required>
                        </div>
                        <div class="form-group">
                            <label for="downloadFormat">Format</label>
                            <select class="form-control" id="downloadFormat">
                                <option value="csv">CSV</option>
                                <option value="json">JSON</option>
                                <option value="excel">Excel</option>
                                <option value="pdf">PDF</option>
                            </select>
                        </div>
                        <div class="form-group">
                            <label for="downloadType">Data Type</label>
                            <select class="form-control" id="downloadType">
                                <option value="sensor">Sensor Data</option>
                                <option value="crops">Crop Data</option>
                                <option value="all">All Data</option>
                            </select>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                    <button type="button" class="btn btn-primary" onclick="downloadData()">Download</button>
                </div>
            </div>
        </div>
    </div>

    <!-- CORE PLUGINS-->
    <script src="./assets/vendors/jquery/dist/jquery.min.js" type="text/javascript"></script>
    <script src="./assets/vendors/popper.js/dist/umd/popper.min.js" type="text/javascript"></script>
    <script src="./assets/vendors/bootstrap/dist/js/bootstrap.min.js" type="text/javascript"></script>
    <script src="./assets/vendors/metisMenu/dist/metisMenu.min.js" type="text/javascript"></script>
    <script src="./assets/vendors/jquery-slimscroll/jquery.slimscroll.min.js" type="text/javascript"></script>
    <!-- PAGE LEVEL PLUGINS-->
    <script src="./assets/vendors/chart.js/dist/Chart.min.js" type="text/javascript"></script>
    <script src="./assets/vendors/datatables/datatables.min.js" type="text/javascript"></script>
    <script src="./assets/vendors/jspdf/jspdf.min.js" type="text/javascript"></script>
    <script src="./assets/vendors/jspdf-autotable/jspdf.plugin.autotable.js" type="text/javascript"></script>
    <script src="./assets/vendors/xlsx/xlsx.full.min.js" type="text/javascript"></script>
    <script src="./assets/vendors/docx/docx.min.js" type="text/javascript"></script>
    
    <!-- CORE SCRIPTS-->
    <script src="assets/js/app.min.js" type="text/javascript"></script>
    
    <script>
        // Add these variables at the top of your script section
        let currentPage = 1;
        let pageSize = 10;
        let lastDoc = null;
        let hasMore = false;
        let totalEntries = 0;
        let currentSection = 'sensor';

        function initializeSensorChart() {
            console.log('Initializing sensor chart...');
            const ctx = document.getElementById('sensorChart').getContext('2d');
            window.sensorChart = new Chart(ctx, {
                type: 'line',
                data: {
                    labels: [],
                    datasets: [{
                        label: 'Temperature (°C)',
                        data: [],
                        borderColor: 'rgb(255, 99, 132)',
                        tension: 0.1,
                        fill: false
                    }, {
                        label: 'Humidity (%)',
                        data: [],
                        borderColor: 'rgb(54, 162, 235)',
                        tension: 0.1,
                        fill: false
                    }, {
                        label: 'Soil Moisture (%)',
                        data: [],
                        borderColor: 'rgb(75, 192, 192)',
                        tension: 0.1,
                        fill: false
                    }, {
                        label: 'Light (lux)',
                        data: [],
                        borderColor: 'rgb(255, 206, 86)',
                        tension: 0.1,
                        fill: false
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    scales: {
                        y: {
                            beginAtZero: true
                        }
                    },
                    plugins: {
                        legend: {
                            position: 'top',
                        },
                        title: {
                            display: true,
                            text: 'Sensor Data Over Time'
                        }
                    }
                }
            });
            console.log('Sensor chart initialized');
        }

        function initializeNutrientChart() {
            console.log('Initializing nutrient chart...');
            const ctx = document.getElementById('nutrientChart').getContext('2d');
            window.nutrientChart = new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: [],
                    datasets: [{
                        label: 'Nitrogen (N)',
                        data: [],
                        backgroundColor: 'rgba(255, 99, 132, 0.5)'
                    }, {
                        label: 'Phosphorus (P)',
                        data: [],
                        backgroundColor: 'rgba(54, 162, 235, 0.5)'
                    }, {
                        label: 'Potassium (K)',
                        data: [],
                        backgroundColor: 'rgba(75, 192, 192, 0.5)'
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    scales: {
                        y: {
                            beginAtZero: true
                        }
                    },
                    plugins: {
                        legend: {
                            position: 'top',
                        },
                        title: {
                            display: true,
                            text: 'Nutrient Levels'
                        }
                    }
                }
            });
            console.log('Nutrient chart initialized');
        }

        function loadSensorData(page = 1) {
            console.log('Loading sensor data for page:', page);
            const tbody = document.querySelector('#sensorTable tbody');
            tbody.innerHTML = '<tr><td colspan="8" class="text-center"><div class="spinner-border text-primary" role="status"></div></td></tr>';

            let url = `/api/sensor-data?pageSize=${pageSize}`;
            if (page > 1 && lastDoc) {
                url += `&lastDoc=${encodeURIComponent(JSON.stringify(lastDoc))}`;
            }

            fetch(url)
                .then(response => {
                    console.log('Sensor data response status:', response.status);
                    if (!response.ok) {
                        throw new Error(`HTTP error! status: ${response.status}`);
                    }
                    return response.json();
                })
                .then(data => {
                    console.log('Raw sensor data received:', data);
                    if (data && data.daily_sensor_summaries && data.daily_sensor_summaries.length > 0) {
                        console.log('Processing sensor data:', data.daily_sensor_summaries);
                        const sensorData = data.daily_sensor_summaries;
                        
                        // Update pagination state
                        currentPage = page;
                        lastDoc = data.lastDoc;
                        hasMore = data.hasMore;
                        totalEntries = data.totalEntries || sensorData.length;
                        
                        // Update pagination controls
                        document.getElementById('currentPage').textContent = currentPage;
                        document.getElementById('totalPages').textContent = Math.ceil(totalEntries / pageSize);
                        document.getElementById('totalEntries').textContent = totalEntries;
                        document.getElementById('startEntry').textContent = ((currentPage - 1) * pageSize) + 1;
                        document.getElementById('endEntry').textContent = Math.min(currentPage * pageSize, totalEntries);
                        
                        document.getElementById('firstPageBtn').disabled = currentPage === 1;
                        document.getElementById('prevPageBtn').disabled = currentPage === 1;
                        document.getElementById('nextPageBtn').disabled = !hasMore;
                        document.getElementById('lastPageBtn').disabled = !hasMore;
                        
                        // Update the table
                        tbody.innerHTML = sensorData.map(item => createTableRow(item)).join('');

                        // Update the charts
                        updateSensorChart(sensorData);
                        updateNutrientChart(sensorData);
                    } else {
                        console.log('No sensor data found in response');
                        tbody.innerHTML = `
                            <tr>
                                <td colspan="8" class="text-center">
                                    <div class="alert alert-info">
                                        <i class="fa fa-info-circle"></i> No sensor data available
                            </div>
                                </td>
                            </tr>`;
                    }
                })
                .catch(error => {
                    console.error('Error loading sensor data:', error);
                    tbody.innerHTML = `
                        <tr>
                            <td colspan="8" class="text-center">
                                <div class="alert alert-danger">
                                    <i class="fa fa-exclamation-circle"></i> Error loading sensor data: ${error.message}
                        </div>
                            </td>
                        </tr>`;
                });
        }

        function loadCropData() {
            fetch('/api/crop-data')
                .then(response => response.json())
                .then(data => {
                    if (data && data.crops) {
                        updateRegisteredCropsTable(data.crops);
                    }
                })
                .catch(error => console.error('Error loading crop data:', error));
        }

        function loadPlantedCrops() {
            console.log('Loading planted crops...');
            const tbody = document.querySelector('#plantedCropsTable tbody');
            tbody.innerHTML = '<tr><td colspan="6" class="text-center">Loading planted crops data...</td></tr>';

            fetch('/api/planted-crops')
                .then(response => {
                    console.log('Response status:', response.status);
                    if (!response.ok) {
                        throw new Error(`HTTP error! status: ${response.status}`);
                    }
                    return response.json();
                })
                .then(data => {
                    console.log('Received planted crops data:', data);
                    if (data && data.planted_crops && data.planted_crops.length > 0) {
                        console.log('Number of planted crops:', data.planted_crops.length);
                        updatePlantedCropsTable(data.planted_crops);
                    } else {
                        console.log('No planted crops data found');
                        tbody.innerHTML = `
                            <tr>
                                <td colspan="6" class="text-center">
                                    <div class="alert alert-info">
                                        <i class="fa fa-info-circle"></i> No planted crops data available
                            </div>
                                </td>
                            </tr>`;
                    }
                })
                .catch(error => {
                    console.error('Error loading planted crops:', error);
                    tbody.innerHTML = `
                        <tr>
                            <td colspan="6" class="text-center">
                                <div class="alert alert-danger">
                                    <i class="fa fa-exclamation-circle"></i> Error loading planted crops data: ${error.message}
                                        </div>
                            </td>
                        </tr>`;
                });
        }

        function updateSensorChart(data) {
            console.log('Updating sensor chart with data:', data);
            if (!data || !Array.isArray(data)) {
                console.error('Invalid data provided for sensor chart update');
                return;
            }

            const labels = data.map(d => new Date(d.period_start).toLocaleDateString());
            const temperatureData = data.map(d => d.temperature?.average || 0);
            const humidityData = data.map(d => d.humidity?.average || 0);
            const moistureData = data.map(d => d.moistureAve?.average || 0);
            const lightData = data.map(d => d.light?.average || 0);
            
            window.sensorChart.data.labels = labels;
            window.sensorChart.data.datasets[0].data = temperatureData;
            window.sensorChart.data.datasets[1].data = humidityData;
            window.sensorChart.data.datasets[2].data = moistureData;
            window.sensorChart.data.datasets[3].data = lightData;
            
            window.sensorChart.update();
        }

        function updateNutrientChart(data) {
            if (!data || !Array.isArray(data)) {
                console.error('Invalid data provided for nutrient chart update');
                return;
            }

            const labels = data.map(d => new Date(d.period_start).toLocaleDateString());
            const nitrogenData = data.map(d => d.nitrogen?.average || 0);
            const phosphorusData = data.map(d => d.phosphorus?.average || 0);
            const potassiumData = data.map(d => d.potassium?.average || 0);
            
            window.nutrientChart.data.labels = labels;
            window.nutrientChart.data.datasets[0].data = nitrogenData;
            window.nutrientChart.data.datasets[1].data = phosphorusData;
            window.nutrientChart.data.datasets[2].data = potassiumData;
            
            window.nutrientChart.update();
        }

        function updateNutrientTable(data) {
            const tbody = document.querySelector('#nutrientTable tbody');
            tbody.innerHTML = `
                <tr>
                    <td>${new Date(data.period_start).toLocaleDateString()}</td>
                    <td>
                        ${data.nitrogen.average.toFixed(1)}
                        <small class="text-muted d-block">
                            Min: ${data.nitrogen.min.toFixed(1)} | Max: ${data.nitrogen.max.toFixed(1)}
                        </small>
                    </td>
                    <td>
                        ${data.phosphorus.average.toFixed(1)}
                        <small class="text-muted d-block">
                            Min: ${data.phosphorus.min.toFixed(1)} | Max: ${data.phosphorus.max.toFixed(1)}
                        </small>
                    </td>
                    <td>
                        ${data.potassium.average.toFixed(1)}
                        <small class="text-muted d-block">
                            Min: ${data.potassium.min.toFixed(1)} | Max: ${data.potassium.max.toFixed(1)}
                        </small>
                    </td>
                    <td>
                        <span class="status-indicator ${getNutrientStatusClass(data)}"></span>
                        ${getNutrientStatusText(data)}
                    </td>
                    <td>${getNutrientRecommendations(data)}</td>
                </tr>
            `;
        }

        function updateRegisteredCropsTable(crops) {
            const tbody = document.querySelector('#registeredCropsTable tbody');
            tbody.innerHTML = crops.map(crop => `
                <tr>
                    <td>${crop.name}</td>
                    <td>${crop.optimal_temperature}°C</td>
                    <td>${crop.optimal_humidity}%</td>
                    <td>${crop.optimal_moisture}%</td>
                    <td>${crop.optimal_light} lux</td>
                    <td>${crop.optimal_ph}</td>
                    <td>N:${crop.optimal_n} P:${crop.optimal_p} K:${crop.optimal_k}</td>
                    <td>${crop.priority}</td>
                </tr>
            `).join('');
        }

        function updatePlantedCropsTable(crops) {
            const tbody = document.querySelector('#plantedCropsTable tbody');
            
            if (!crops || crops.length === 0) {
                tbody.innerHTML = '<tr><td colspan="6" class="text-center">No planted crops data available</td></tr>';
                return;
            }
            
            tbody.innerHTML = crops.map(crop => `
                <tr data-crop='${JSON.stringify(crop)}' onclick="showCropDetails(this)">
                    <td>${crop.name || 'Unknown'}</td>
                    <td>${crop.startDate ? new Date(crop.startDate).toLocaleDateString() : 'N/A'}</td>
                    <td>${crop.endDate ? new Date(crop.endDate).toLocaleDateString() : 'Active'}</td>
                    <td><span class="status-badge status-${crop.status.toLowerCase()}">${crop.status}</span></td>
                    <td>${crop.successRate || 0}%</td>
                    <td>${crop.score || 0}%</td>
                </tr>
            `).join('');
        }

        function showCropDetails(row) {
            const crop = JSON.parse(row.getAttribute('data-crop'));
            
            // Update modal content
            document.getElementById('cropBasicInfo').innerHTML = `
                <div class="parameter-grid">
                    <div class="parameter-item">
                        <strong>Crop Name:</strong> ${crop.name}
                    </div>
                    <div class="parameter-item">
                        <strong>Status:</strong> <span class="status-badge status-${crop.status.toLowerCase()}">${crop.status}</span>
                    </div>
                    <div class="parameter-item">
                        <strong>Start Date:</strong> ${new Date(crop.startDate).toLocaleDateString()}
                    </div>
                    <div class="parameter-item">
                        <strong>End Date:</strong> ${crop.endDate ? new Date(crop.endDate).toLocaleDateString() : 'Active'}
                    </div>
                    <div class="parameter-item">
                        <strong>User:</strong> ${crop.userName} (${crop.userEmail})
                    </div>
                    <div class="parameter-item">
                        <strong>Last Updated:</strong> ${crop.lastUpdated ? new Date(crop.lastUpdated._seconds * 1000).toLocaleString() : 'N/A'}
                    </div>
                </div>
            `;

            document.getElementById('cropPerformance').innerHTML = `
                <div class="parameter-grid">
                    <div class="parameter-item">
                        <strong>Success Rate:</strong> ${crop.successRate}%
                    </div>
                    <div class="parameter-item">
                        <strong>Overall Score:</strong> ${crop.score}%
                    </div>
                    <div class="parameter-item">
                        <strong>Rule-Based Score:</strong> ${crop.ruleBasedScore}%
                    </div>
                </div>
            `;

            document.getElementById('cropParameters').innerHTML = `
                <div class="parameter-grid">
                    <div class="parameter-item">
                        <strong>Temperature Match:</strong> ${crop.parameterMatches.temperature.toFixed(1)}%
                    </div>
                    <div class="parameter-item">
                        <strong>Humidity Match:</strong> ${crop.parameterMatches.humidity.toFixed(1)}%
                    </div>
                    <div class="parameter-item">
                        <strong>Moisture Match:</strong> ${crop.parameterMatches.moisture.toFixed(1)}%
                    </div>
                    <div class="parameter-item">
                        <strong>Light Match:</strong> ${crop.parameterMatches.light.toFixed(1)}%
                    </div>
                    <div class="parameter-item">
                        <strong>pH Match:</strong> ${crop.parameterMatches.ph.toFixed(1)}%
                    </div>
                    <div class="parameter-item">
                        <strong>NPK Matches:</strong>
                        <div class="ml-3">
                            N: ${crop.parameterMatches.npk_N.toFixed(1)}%<br>
                            P: ${crop.parameterMatches.npk_P.toFixed(1)}%<br>
                            K: ${crop.parameterMatches.npk_K.toFixed(1)}%
                        </div>
                    </div>
                </div>
            `;

            document.getElementById('cropOptimalConditions').innerHTML = `
                <div class="parameter-grid">
                    <div class="parameter-item">
                        <strong>Temperature:</strong> ${crop.optimalConditions.temperature}°C
                    </div>
                    <div class="parameter-item">
                        <strong>Humidity:</strong> ${crop.optimalConditions.humidity}%
                    </div>
                    <div class="parameter-item">
                        <strong>Moisture:</strong> ${crop.optimalConditions.moisture}%
                    </div>
                    <div class="parameter-item">
                        <strong>Light:</strong> ${crop.optimalConditions.light} lux
                    </div>
                    <div class="parameter-item">
                        <strong>pH Level:</strong> ${crop.optimalConditions.ph}
                    </div>
                    <div class="parameter-item">
                        <strong>NPK Levels:</strong>
                        <div class="ml-3">
                            N: ${crop.optimalConditions.npk_N}<br>
                            P: ${crop.optimalConditions.npk_P}<br>
                            K: ${crop.optimalConditions.npk_K}
                        </div>
                    </div>
                </div>
            `;

            document.getElementById('reportDate').textContent = new Date().toLocaleString();
            
            // Show the modal
            $('#cropDetailsModal').modal('show');
        }

        function printReport() {
            const printContent = document.querySelector('.modal-body').innerHTML;
            const originalContent = document.body.innerHTML;
            
            document.body.innerHTML = `
                <div class="container">
                    ${printContent}
                </div>
            `;
            
            window.print();
            document.body.innerHTML = originalContent;
            
            // Reinitialize any necessary event listeners
            initializeEventListeners();
        }

        function initializeEventListeners() {
            // Reinitialize any event listeners that were lost after printing
            $('#plantedCropsTable tbody tr').on('click', function() {
                showCropDetails(this);
            });
        }

        function getStatusClass(data) {
            const tempStatus = data.temperature.average >= 25 && data.temperature.average <= 30;
            const humidityStatus = data.humidity.average >= 50 && data.humidity.average <= 70;
            const moistureStatus = data.moistureAve.average >= 50 && data.moistureAve.average <= 80;
            
            if (tempStatus && humidityStatus && moistureStatus) return 'status-normal';
            if (!tempStatus || !humidityStatus || !moistureStatus) return 'status-warning';
            return 'status-danger';
        }

        function getStatusText(data) {
            const tempStatus = data.temperature.average >= 25 && data.temperature.average <= 30;
            const humidityStatus = data.humidity.average >= 50 && data.humidity.average <= 70;
            const moistureStatus = data.moistureAve.average >= 50 && data.moistureAve.average <= 80;
            
            if (tempStatus && humidityStatus && moistureStatus) return 'Optimal';
            if (!tempStatus || !humidityStatus || !moistureStatus) return 'Warning';
            return 'Critical';
        }

        function getNutrientStatusClass(data) {
            const nStatus = data.nitrogen.average >= 20 && data.nitrogen.average <= 30;
            const pStatus = data.phosphorus.average >= 10 && data.phosphorus.average <= 20;
            const kStatus = data.potassium.average >= 15 && data.potassium.average <= 25;
            
            if (nStatus && pStatus && kStatus) return 'status-normal';
            if (!nStatus || !pStatus || !kStatus) return 'status-warning';
            return 'status-danger';
        }

        function getNutrientStatusText(data) {
            const nStatus = data.nitrogen.average >= 20 && data.nitrogen.average <= 30;
            const pStatus = data.phosphorus.average >= 10 && data.phosphorus.average <= 20;
            const kStatus = data.potassium.average >= 15 && data.potassium.average <= 25;
            
            if (nStatus && pStatus && kStatus) return 'Balanced';
            if (!nStatus || !pStatus || !kStatus) return 'Imbalanced';
            return 'Deficient';
        }

        function getNutrientRecommendations(data) {
            let recommendations = [];
            
            if (data.nitrogen.average < 20) recommendations.push('Add nitrogen-rich fertilizer');
            if (data.phosphorus.average < 10) recommendations.push('Add phosphorus-rich fertilizer');
            if (data.potassium.average < 15) recommendations.push('Add potassium-rich fertilizer');
            
            return recommendations.join(', ') || 'No adjustments needed';
        }

        function exportToPDF() {
            const doc = new jsPDF();
            
            // Add header
            doc.setFontSize(20);
            doc.text('NetHouseAutomation Report', 105, 20, { align: 'center' });
            doc.setFontSize(12);
            doc.text('Generated on: ' + new Date().toLocaleDateString(), 105, 30, { align: 'center' });
            
            // Add content
            doc.autoTable({ html: '#sensorTable' });
            doc.autoTable({ html: '#registeredCropsTable' });
            doc.autoTable({ html: '#diseaseTable' });
            doc.autoTable({ html: '#nutrientTable' });
            doc.autoTable({ html: '#irrigationTable' });
            
            // Add footer
            doc.setFontSize(10);
            doc.text('© 2025 NetHouseAutomation - All rights reserved', 105, 280, { align: 'center' });
            
            doc.save('nethouse-report.pdf');
        }

        function exportToExcel() {
            const wb = XLSX.utils.book_new();
            
            // Convert tables to worksheets
            const sensorWS = XLSX.utils.table_to_sheet(document.getElementById('sensorTable'));
            const cropWS = XLSX.utils.table_to_sheet(document.getElementById('registeredCropsTable'));
            const diseaseWS = XLSX.utils.table_to_sheet(document.getElementById('diseaseTable'));
            const nutrientWS = XLSX.utils.table_to_sheet(document.getElementById('nutrientTable'));
            const irrigationWS = XLSX.utils.table_to_sheet(document.getElementById('irrigationTable'));
            
            // Add worksheets to workbook
            XLSX.utils.book_append_sheet(wb, sensorWS, 'Sensor Data');
            XLSX.utils.book_append_sheet(wb, cropWS, 'Crop Data');
            XLSX.utils.book_append_sheet(wb, diseaseWS, 'Disease Data');
            XLSX.utils.book_append_sheet(wb, nutrientWS, 'Nutrient Data');
            XLSX.utils.book_append_sheet(wb, irrigationWS, 'Irrigation Data');
            
            // Save workbook
            XLSX.writeFile(wb, 'nethouse-report.xlsx');
        }

        function exportToWord() {
            const doc = new docx.Document({
                sections: [{
                    properties: {},
                    children: [
                        new docx.Paragraph({
                            children: [
                                new docx.TextRun({
                                    text: 'NetHouseAutomation Report',
                                    bold: true,
                                    size: 32
                                })
                            ],
                            alignment: docx.AlignmentType.CENTER
                        }),
                        new docx.Paragraph({
                            children: [
                                new docx.TextRun({
                                    text: 'Generated on: ' + new Date().toLocaleDateString(),
                                    size: 24
                                })
                            ],
                            alignment: docx.AlignmentType.CENTER
                        }),
                        // Add tables and other content here
                    ]
                }]
            });

            docx.Packer.toBlob(doc).then(blob => {
                saveAs(blob, 'nethouse-report.docx');
            });
        }

        function printSensorData() {
            const printWindow = window.open('', '_blank');
            const table = document.getElementById('sensorTable');
            const title = 'NetHouseAutomation - Daily Sensor Summary';
            const date = new Date().toLocaleDateString();
            
            printWindow.document.write(`
                <html>
                    <head>
                        <title>${title}</title>
                        <style>
                            body { font-family: Arial, sans-serif; }
                            table { width: 100%; border-collapse: collapse; margin: 20px 0; }
                            th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }
                            th { background-color: #f5f5f5; }
                            .text-muted { color: #666; font-size: 0.8em; }
                            .header { text-align: center; margin-bottom: 20px; }
                            .footer { text-align: center; margin-top: 20px; font-size: 0.8em; }
                        </style>
                    </head>
                    <body>
                        <div class="header">
                            <h1>${title}</h1>
                            <p>Generated on: ${date}</p>
                        </div>
                        ${table.outerHTML}
                        <div class="footer">
                            <p>© 2025 NetHouseAutomation - All rights reserved</p>
                        </div>
                    </body>
                </html>
            `);
            
            printWindow.document.close();
            printWindow.focus();
            setTimeout(() => {
                printWindow.print();
                printWindow.close();
            }, 250);
        }

        function showDownloadModal(section) {
            currentSection = section;
            const end = new Date();
            const start = new Date();
            start.setDate(start.getDate() - 30);
            
            document.getElementById('startDate').value = start.toISOString().split('T')[0];
            document.getElementById('endDate').value = end.toISOString().split('T')[0];
            document.getElementById('downloadType').value = section;
            
            $('#downloadModal').modal('show');
        }

        function downloadData() {
            const startDate = document.getElementById('startDate').value;
            const endDate = document.getElementById('endDate').value;
            const format = document.getElementById('downloadFormat').value;
            const type = document.getElementById('downloadType').value;
            
            if (!startDate || !endDate) {
                alert('Please select both start and end dates');
                return;
            }
            
            const url = `/api/download-data?startDate=${startDate}&endDate=${endDate}&format=${format}&type=${type}`;
            
            if (format === 'json') {
                fetch(url)
                    .then(response => response.json())
                    .then(data => {
                        const blob = new Blob([JSON.stringify(data, null, 2)], { type: 'application/json' });
                        downloadBlob(blob, `data-${type}-${startDate}-to-${endDate}.json`);
                    })
                    .catch(error => {
                        console.error('Error downloading data:', error);
                        alert('Error downloading data. Please try again.');
                    });
            } else if (format === 'excel') {
                window.location.href = url;
            } else if (format === 'pdf') {
                window.location.href = url;
            } else {
                // CSV
                window.location.href = url;
            }
            
            $('#downloadModal').modal('hide');
        }

        function downloadBlob(blob, filename) {
            const link = document.createElement('a');
            link.href = URL.createObjectURL(blob);
            link.download = filename;
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
        }

        function changePageSize() {
            pageSize = parseInt(document.getElementById('pageSize').value);
            currentPage = 1;
            lastDoc = null;
            loadSensorData();
        }

        function loadFirstPage() {
            if (currentPage > 1) {
                currentPage = 1;
                lastDoc = null;
                loadSensorData();
            }
        }

        function loadLastPage() {
            if (hasMore) {
                // Load all remaining pages
                loadAllPages();
            }
        }

        function loadAllPages() {
            const tbody = document.querySelector('#sensorTable tbody');
            tbody.innerHTML = '<tr><td colspan="8" class="text-center"><div class="spinner-border text-primary" role="status"></div></td></tr>';
            
            let allData = [];
            let currentLastDoc = lastDoc;
            
            function loadNextBatch() {
                let url = '/api/sensor-data';
                if (currentLastDoc) {
                    url += `?lastDoc=${encodeURIComponent(JSON.stringify(currentLastDoc))}`;
                }
                
                fetch(url)
                    .then(response => response.json())
                    .then(data => {
                        if (data.daily_sensor_summaries && data.daily_sensor_summaries.length > 0) {
                            allData = allData.concat(data.daily_sensor_summaries);
                            currentLastDoc = data.lastDoc;
                            
                            if (data.hasMore) {
                                loadNextBatch();
                            } else {
                                updateTableWithAllData(allData);
                            }
                        }
                    })
                    .catch(error => {
                        console.error('Error loading all pages:', error);
                        tbody.innerHTML = `
                            <tr>
                                <td colspan="8" class="text-center">
                                    <div class="alert alert-danger">
                                        <i class="fa fa-exclamation-circle"></i> Error loading data: ${error.message}
                                    </div>
                                </td>
                            </tr>`;
                    });
            }
            
            loadNextBatch();
        }

        function updateTableWithAllData(data) {
            const tbody = document.querySelector('#sensorTable tbody');
            tbody.innerHTML = data.map(item => createTableRow(item)).join('');
            
            // Update pagination info
            totalEntries = data.length;
            currentPage = Math.ceil(totalEntries / pageSize);
            document.getElementById('currentPage').textContent = currentPage;
            document.getElementById('totalPages').textContent = currentPage;
            document.getElementById('totalEntries').textContent = totalEntries;
            document.getElementById('startEntry').textContent = 1;
            document.getElementById('endEntry').textContent = totalEntries;
            
            // Disable pagination controls
            document.getElementById('firstPageBtn').disabled = true;
            document.getElementById('prevPageBtn').disabled = true;
            document.getElementById('nextPageBtn').disabled = true;
            document.getElementById('lastPageBtn').disabled = true;
        }

        function clearSensorSearch() {
            document.getElementById('sensorSearch').value = '';
            loadSensorData();
        }

        function createTableRow(data) {
            return `
                <tr>
                    <td>${new Date(data.period_start).toLocaleDateString()}</td>
                    <td>
                        ${(data.temperature?.average || 0).toFixed(1)}°C
                        <small class="text-muted d-block">
                            Min: ${(data.temperature?.min || 0).toFixed(1)}°C | Max: ${(data.temperature?.max || 0).toFixed(1)}°C
                        </small>
                    </td>
                    <td>
                        ${(data.humidity?.average || 0).toFixed(1)}%
                        <small class="text-muted d-block">
                            Min: ${(data.humidity?.min || 0).toFixed(1)}% | Max: ${(data.humidity?.max || 0).toFixed(1)}%
                        </small>
                    </td>
                    <td>
                        ${(data.moistureAve?.average || 0).toFixed(1)}%
                        <small class="text-muted d-block">
                            Min: ${(data.moistureAve?.min || 0).toFixed(1)}% | Max: ${(data.moistureAve?.max || 0).toFixed(1)}%
                        </small>
                    </td>
                    <td>
                        ${(data.light?.average || 0).toFixed(1)} lux
                        <small class="text-muted d-block">
                            Min: ${(data.light?.min || 0).toFixed(1)} lux | Max: ${(data.light?.max || 0).toFixed(1)} lux
                        </small>
                    </td>
                    <td>
                        ${(data.ph?.average || 0).toFixed(1)}
                        <small class="text-muted d-block">
                            Min: ${(data.ph?.min || 0).toFixed(1)} | Max: ${(data.ph?.max || 0).toFixed(1)}
                        </small>
                    </td>
                    <td>
                        <div>N: ${(data.nitrogen?.average || 0).toFixed(1)}</div>
                        <div>P: ${(data.phosphorus?.average || 0).toFixed(1)}</div>
                        <div>K: ${(data.potassium?.average || 0).toFixed(1)}</div>
                        <small class="text-muted d-block">
                            Min: N${(data.nitrogen?.min || 0).toFixed(1)} P${(data.phosphorus?.min || 0).toFixed(1)} K${(data.potassium?.min || 0).toFixed(1)}<br>
                            Max: N${(data.nitrogen?.max || 0).toFixed(1)} P${(data.phosphorus?.max || 0).toFixed(1)} K${(data.potassium?.max || 0).toFixed(1)}
                        </small>
                    </td>
                    <td>
                        <span class="status-badge ${getStatusClass(data)}">${getStatusText(data)}</span>
                        <small class="text-muted d-block">
                            Data Points: ${data.data_points || 0}
                        </small>
                    </td>
                </tr>
            `;
        }

        function printPlantedCrops() {
            const printWindow = window.open('', '_blank');
            const table = document.getElementById('plantedCropsTable');
            const title = 'NetHouseAutomation - Planted Crops History';
            const date = new Date().toLocaleDateString();
            
            printWindow.document.write(`
                <html>
                    <head>
                        <title>${title}</title>
                        <style>
                            body { font-family: Arial, sans-serif; }
                            table { width: 100%; border-collapse: collapse; margin: 20px 0; }
                            th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }
                            th { background-color: #f5f5f5; }
                            .text-muted { color: #666; font-size: 0.8em; }
                            .header { text-align: center; margin-bottom: 20px; }
                            .footer { text-align: center; margin-top: 20px; font-size: 0.8em; }
                            .status-badge { padding: 5px 10px; border-radius: 15px; font-size: 0.9em; }
                            .status-successful { background-color: #d4edda; color: #155724; }
                            .status-active { background-color: #fff3cd; color: #856404; }
                            .status-failed { background-color: #f8d7da; color: #721c24; }
                        </style>
                    </head>
                    <body>
                        <div class="header">
                            <h1>${title}</h1>
                            <p>Generated on: ${date}</p>
                        </div>
                        ${table.outerHTML}
                        <div class="footer">
                            <p>© 2025 NetHouseAutomation - All rights reserved</p>
                        </div>
                    </body>
                </html>
            `);
            
            printWindow.document.close();
            printWindow.focus();
            setTimeout(() => {
                printWindow.print();
                printWindow.close();
            }, 250);
        }

        function printRegisteredCrops() {
            const printWindow = window.open('', '_blank');
            const table = document.getElementById('registeredCropsTable');
            const title = 'NetHouseAutomation - Registered Crops';
            const date = new Date().toLocaleDateString();
            
            printWindow.document.write(`
                <html>
                    <head>
                        <title>${title}</title>
                        <style>
                            body { font-family: Arial, sans-serif; }
                            table { width: 100%; border-collapse: collapse; margin: 20px 0; }
                            th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }
                            th { background-color: #f5f5f5; }
                            .text-muted { color: #666; font-size: 0.8em; }
                            .header { text-align: center; margin-bottom: 20px; }
                            .footer { text-align: center; margin-top: 20px; font-size: 0.8em; }
                        </style>
                    </head>
                    <body>
                        <div class="header">
                            <h1>${title}</h1>
                            <p>Generated on: ${date}</p>
                        </div>
                        ${table.outerHTML}
                        <div class="footer">
                            <p>© 2025 NetHouseAutomation - All rights reserved</p>
                        </div>
                    </body>
                </html>
            `);
            
            printWindow.document.close();
            printWindow.focus();
            setTimeout(() => {
                printWindow.print();
                printWindow.close();
            }, 250);
        }

        function printDiseaseData() {
            const printWindow = window.open('', '_blank');
            const table = document.getElementById('diseaseTable');
            const title = 'NetHouseAutomation - Disease Monitoring';
            const date = new Date().toLocaleDateString();
            
            printWindow.document.write(`
                <html>
                    <head>
                        <title>${title}</title>
                        <style>
                            body { font-family: Arial, sans-serif; }
                            table { width: 100%; border-collapse: collapse; margin: 20px 0; }
                            th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }
                            th { background-color: #f5f5f5; }
                            .text-muted { color: #666; font-size: 0.8em; }
                            .header { text-align: center; margin-bottom: 20px; }
                            .footer { text-align: center; margin-top: 20px; font-size: 0.8em; }
                        </style>
                    </head>
                    <body>
                        <div class="header">
                            <h1>${title}</h1>
                            <p>Generated on: ${date}</p>
                        </div>
                        ${table.outerHTML}
                        <div class="footer">
                            <p>© 2025 NetHouseAutomation - All rights reserved</p>
                        </div>
                    </body>
                </html>
            `);
            
            printWindow.document.close();
            printWindow.focus();
            setTimeout(() => {
                printWindow.print();
                printWindow.close();
            }, 250);
        }

        function printNutrientData() {
            const printWindow = window.open('', '_blank');
            const table = document.getElementById('nutrientTable');
            const chart = document.getElementById('nutrientChart');
            const title = 'NetHouseAutomation - Nutrient Analysis';
            const date = new Date().toLocaleDateString();
            
            printWindow.document.write(`
                <html>
                    <head>
                        <title>${title}</title>
                        <style>
                            body { font-family: Arial, sans-serif; }
                            table { width: 100%; border-collapse: collapse; margin: 20px 0; }
                            th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }
                            th { background-color: #f5f5f5; }
                            .text-muted { color: #666; font-size: 0.8em; }
                            .header { text-align: center; margin-bottom: 20px; }
                            .footer { text-align: center; margin-top: 20px; font-size: 0.8em; }
                            .chart-container { margin: 20px 0; }
                        </style>
                    </head>
                    <body>
                        <div class="header">
                            <h1>${title}</h1>
                            <p>Generated on: ${date}</p>
                        </div>
                        <div class="chart-container">
                            <img src="${chart.toDataURL()}" style="width: 100%;">
                        </div>
                        ${table.outerHTML}
                        <div class="footer">
                            <p>© 2025 NetHouseAutomation - All rights reserved</p>
                        </div>
                    </body>
                </html>
            `);
            
            printWindow.document.close();
            printWindow.focus();
            setTimeout(() => {
                printWindow.print();
                printWindow.close();
            }, 250);
        }

        function printIrrigationData() {
            const printWindow = window.open('', '_blank');
            const table = document.getElementById('irrigationTable');
            const title = 'NetHouseAutomation - Irrigation Schedule';
            const date = new Date().toLocaleDateString();
            
            printWindow.document.write(`
                <html>
                    <head>
                        <title>${title}</title>
                        <style>
                            body { font-family: Arial, sans-serif; }
                            table { width: 100%; border-collapse: collapse; margin: 20px 0; }
                            th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }
                            th { background-color: #f5f5f5; }
                            .text-muted { color: #666; font-size: 0.8em; }
                            .header { text-align: center; margin-bottom: 20px; }
                            .footer { text-align: center; margin-top: 20px; font-size: 0.8em; }
                        </style>
                    </head>
                    <body>
                        <div class="header">
                            <h1>${title}</h1>
                            <p>Generated on: ${date}</p>
                        </div>
                        ${table.outerHTML}
                        <div class="footer">
                            <p>© 2025 NetHouseAutomation - All rights reserved</p>
                        </div>
                    </body>
                </html>
            `);
            
            printWindow.document.close();
            printWindow.focus();
            setTimeout(() => {
                printWindow.print();
                printWindow.close();
            }, 250);
        }

        // Document Ready Function
        $(document).ready(function() {
            console.log('Document ready, initializing components...');
            
            // Initialize DataTables
            $('#sensorTable, #plantedCropsTable, #registeredCropsTable, #diseaseTable, #nutrientTable, #irrigationTable').DataTable({
                responsive: true,
                dom: 'Bfrtip',
                buttons: ['copy', 'csv', 'excel', 'pdf', 'print']
            });

            // Initialize Charts
            initializeSensorChart();
            initializeNutrientChart();
            
            // Load Data
            loadSensorData();
            loadCropData();
            loadPlantedCrops();
            
            console.log('Initialization complete');
        });

        async function checkDataExists() {
            const cropName = document.getElementById('filterCropName').value;
            const dateFrom = document.getElementById('filterDateFrom').value;
            const dateTo = document.getElementById('filterDateTo').value;
            const params = new URLSearchParams({ cropName, dateFrom, dateTo });
            try {
                const resp = await fetch(`/report-ai-disease/export/check?${params.toString()}`);
                if (!resp.ok) return false;
                const data = await resp.json();
                return data && data.hasData;
            } catch (e) { return false; }
        }

        function getExportQueryString() {
            const cropName = document.getElementById('filterCropName').value;
            const dateFrom = document.getElementById('filterDateFrom').value;
            const dateTo = document.getElementById('filterDateTo').value;
            return `?cropName=${encodeURIComponent(cropName)}&dateFrom=${encodeURIComponent(dateFrom)}&dateTo=${encodeURIComponent(dateTo)}`;
        }
        function getExportFileName(ext) {
            const cropSelect = document.getElementById('filterCropName');
            const cropText = cropSelect.options[cropSelect.selectedIndex].text || 'All Crops';
            const dateFrom = document.getElementById('filterDateFrom').value;
            const dateTo = document.getElementById('filterDateTo').value;
            return `${cropText.replace(/[^a-zA-Z0-9\- ]/g, '_')} from ${dateFrom} - ${dateTo}.${ext}`;
        }

        document.getElementById('exportExcelBtn').addEventListener('click', async function() {
            const cropName = document.getElementById('filterCropName').value;
            const dateFrom = document.getElementById('filterDateFrom').value;
            const dateTo = document.getElementById('filterDateTo').value;
            if (!dateFrom || !dateTo) {
                showExportToast('Please fill in Date From and Date To before downloading.');
                return;
            }
            if (dateFrom > dateTo) {
                showExportToast('Date From should not be later than Date To.', 'danger');
                return;
            }
            if (!(await checkDataExists())) {
                const cropSelect = document.getElementById('filterCropName');
                const cropText = cropSelect.options[cropSelect.selectedIndex].text || 'All Crops';
                showExportToast(`No records found for ${cropText} from ${dateFrom} to ${dateTo}.`, 'danger');
                return;
            }
            window.location.href = '/report-ai-disease/export/excel' + getExportQueryString();
        });
        document.getElementById('exportPdfBtn').addEventListener('click', async function() {
            const cropName = document.getElementById('filterCropName').value;
            const dateFrom = document.getElementById('filterDateFrom').value;
            const dateTo = document.getElementById('filterDateTo').value;
            if (!dateFrom || !dateTo) {
                showExportToast('Please fill in Date From and Date To before downloading.');
                return;
            }
            if (dateFrom > dateTo) {
                showExportToast('Date From should not be later than Date To.', 'danger');
                return;
            }
            if (!(await checkDataExists())) {
                const cropSelect = document.getElementById('filterCropName');
                const cropText = cropSelect.options[cropSelect.selectedIndex].text || 'All Crops';
                showExportToast(`No records found for ${cropText} from ${dateFrom} to ${dateTo}.`, 'danger');
                return;
            }
            window.location.href = '/report-ai-disease/export/pdf' + getExportQueryString();
        });

        function showExportToast(msg, type = 'warning') {
            const toast = document.getElementById('exportToast');
            let toastTypeClass = 'custom-toast-warning';
            let icon = '<i class="fa fa-exclamation-triangle toast-icon"></i>';
            if (type === 'danger') { toastTypeClass = 'custom-toast-danger'; icon = '<i class="fa fa-times-circle toast-icon"></i>'; }
            if (type === 'success') { toastTypeClass = 'custom-toast-success'; icon = '<i class="fa fa-check-circle toast-icon"></i>'; }
            toast.innerHTML = `<div class="custom-toast ${toastTypeClass} show">${icon}<span>${msg}</span><button class="close" onclick="hideExportToast()" aria-label="Close">&times;</button></div>`;
            toast.classList.add('show');
            toast.style.display = 'block';
            setTimeout(() => {
                if (toast.querySelector('.custom-toast')) {
                    toast.querySelector('.custom-toast').classList.remove('show');
                }
                toast.classList.remove('show');
            }, 2600);
            setTimeout(() => {
                toast.style.display = 'none';
            }, 3000);
        }
        function hideExportToast() {
            const toast = document.getElementById('exportToast');
            if (toast.querySelector('.custom-toast')) {
                toast.querySelector('.custom-toast').classList.remove('show');
            }
            toast.classList.remove('show');
            setTimeout(() => {
                toast.style.display = 'none';
            }, 400);
        }
    </script>
    
<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Load pending users count
        loadPendingUsersCount();
    
        // Handle pending users button click
        document.getElementById('pendingUsersBtn').addEventListener('click', function(e) {
            e.preventDefault();
            loadPendingUsers();
            $('#pendingUsersModal').modal('show');
        });
    
        // Function to load pending users count
        async function loadPendingUsersCount() {
            try {
                const response = await fetch('/api/users/pending/count');
                const data = await response.json();
                if (data.success) {
                    const countBadge = document.getElementById('pendingUsersCount');
                    if (data.count > 0) {
                        countBadge.textContent = data.count;
                        countBadge.style.display = 'inline';
                    } else {
                        countBadge.style.display = 'none';
                    }
                }
            } catch (error) {
                console.error('Error loading pending users count:', error);
            }
        }
    
        // Function to load pending users
        async function loadPendingUsers() {
            try {
                const response = await fetch('/api/users/pending');
                const data = await response.json();
    
                if (data.success) {
                    const pendingUsersList = document.getElementById('pendingUsersList');
                    pendingUsersList.innerHTML = '';
    
                    if (!data.users || data.users.length === 0) {
                        pendingUsersList.innerHTML = '<div class="alert alert-info">No pending users found.</div>';
                        return;
                    }
    
                    data.users.forEach(user => {
                        const userCard = document.createElement('div');
                        userCard.className = 'card mb-3';
                        userCard.innerHTML = `
                            <div class="card-body">
                                <div class="row">
                                    <div class="col-md-2">
                                        <img src="${user.profilePicture || '/assets/img/default-avatar.png'}" 
                                             class="img-fluid rounded-circle" 
                                             style="width: 80px; height: 80px; object-fit: cover;">
                                    </div>
                                    <div class="col-md-7">
                                        <h5 class="card-title">${user.name}</h5>
                                        <p class="card-text">
                                            <strong>Email:</strong> ${user.email}<br>
                                            <strong>Contact:</strong> ${user.contactNumber || 'N/A'}<br>
                                            <strong>Role:</strong> ${user.role}<br>
                                            <strong>Email Verification:</strong> ${user.isVerified ? 'Verified' : 'Not Verified'}<br>
                                            <strong>Registered:</strong> ${user.createdAt}
                                        </p>
                                    </div>
                                    <div class="col-md-3 text-right">
                                        <button class="btn btn-success btn-sm mb-2 approve-user" 
                                                data-user-id="${user.id}">
                                            <i class="fa fa-check"></i> Approve
                                        </button>
                                        <button class="btn btn-danger btn-sm reject-user" 
                                                data-user-id="${user.id}">
                                            <i class="fa fa-times"></i> Reject
                                        </button>
                                    </div>
                                </div>
                            </div>
                        `;
                        pendingUsersList.appendChild(userCard);
                    });
    
                    // Add event listeners for approve/reject buttons
                    document.querySelectorAll('.approve-user').forEach(button => {
                        button.addEventListener('click', handleUserApproval);
                    });
                    document.querySelectorAll('.reject-user').forEach(button => {
                        button.addEventListener('click', handleUserRejection);
                    });
                } else {
                    const pendingUsersList = document.getElementById('pendingUsersList');
                    pendingUsersList.innerHTML = `<div class="alert alert-danger">Error: ${data.message}</div>`;
                }
            } catch (error) {
                console.error('Error loading pending users:', error);
                const pendingUsersList = document.getElementById('pendingUsersList');
                pendingUsersList.innerHTML = `<div class="alert alert-danger">Failed to load pending users: ${error.message}</div>`;
            }
        }
    
        // Handle user approval
        async function handleUserApproval(e) {
            const userId = e.target.closest('button').dataset.userId;
            try {
                const response = await fetch(`/api/users/${userId}/approve`, {
                    method: 'PUT'
                });
                const data = await response.json();
                if (data.success) {
                    showNotification('success', 'User approved successfully');
                    loadPendingUsers();
                    loadPendingUsersCount();
                } else {
                    showNotification('error', 'Error approving user');
                }
            } catch (error) {
                console.error('Error:', error);
                showNotification('error', 'Error approving user');
            }
        }
    
        // Handle user rejection
        async function handleUserRejection(e) {
            const userId = e.target.closest('button').dataset.userId;
            try {
                const response = await fetch(`/api/users/${userId}/reject`, {
                    method: 'PUT'
                });
                const data = await response.json();
                if (data.success) {
                    showNotification('success', 'User rejected successfully');
                    loadPendingUsers();
                    loadPendingUsersCount();
                } else {
                    showNotification('error', 'Error rejecting user');
                }
            } catch (error) {
                console.error('Error:', error);
                showNotification('error', 'Error rejecting user');
            }
        }
    
        // Show notification
        function showNotification(type, message) {
            const toast = document.createElement('div');
            toast.className = `toast toast-${type}`;
            toast.innerHTML = message;
            document.body.appendChild(toast);
    
            setTimeout(() => {
                toast.remove();
            }, 3000);
        }
    });
    </script>
</body>
</html>